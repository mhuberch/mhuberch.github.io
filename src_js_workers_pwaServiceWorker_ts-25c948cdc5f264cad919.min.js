"use strict";
(self["webpackChunkgraphPlayground"] = self["webpackChunkgraphPlayground"] || []).push([["src_js_workers_pwaServiceWorker_ts"],{

/***/ "./src/js/workers/pwaServiceWorker.ts":
/*!********************************************!*\
  !*** ./src/js/workers/pwaServiceWorker.ts ***!
  \********************************************/
/***/ (() => {


var dataCacheName = "graphs-v1";
var filesToCache = ["index.html"];
// @ts-ignore
var ctx = self;
// @ts-ignore
ctx.addEventListener("install", function (event) {
    event.waitUntil(caches
        .open(dataCacheName)
        .then(function (cache) { return cache.addAll(filesToCache); })
        .then(function () { return ctx.skipWaiting(); }));
});
ctx.addEventListener("activate", function () {
    ctx.clients.claim();
});
// Get files from network first (cache if not cached already), then the cache
// @ts-ignore
ctx.addEventListener("fetch", function (event) {
    event.respondWith(fetch(event.request)
        .then(function (response) {
        if (event.request.url.includes("chrome-extension://")) {
            return response;
        }
        return caches.open(dataCacheName).then(function (cache) {
            var newResp = response.clone();
            // Check if the response is for a real URL, not base64 encoded data and it is a GET request
            if (!newResp.url.includes("data:") && event.request.method === "GET") {
                cache.put(event.request, newResp);
            }
            return response;
        });
    })
        .catch(function () {
        return caches.match(event.request);
    }));
});


/***/ })

}]);
//# sourceMappingURL=src_js_workers_pwaServiceWorker_ts-25c948cdc5f264cad919.min.js.map