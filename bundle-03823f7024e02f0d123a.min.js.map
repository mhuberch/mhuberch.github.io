{"version":3,"file":"bundle-03823f7024e02f0d123a.min.js","mappings":"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","sources":["webpack://graphPlayground/webpack/runtime/chunk loaded","webpack://graphPlayground/webpack/runtime/create fake namespace object","webpack://graphPlayground/webpack/runtime/load script","webpack://graphPlayground/./src/js/workers/GraphAlgorithmWorker.ts?dbca","webpack://graphPlayground/./src/js/UIInteractions.ts","webpack://graphPlayground/./src/js/app.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/EdgeImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/GraphImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/NodeImmut.ts","webpack://graphPlayground/./src/js/graphState.ts","webpack://graphPlayground/./src/js/languages.ts","webpack://graphPlayground/./src/js/main.ts","webpack://graphPlayground/./src/js/settings.ts","webpack://graphPlayground/./src/js/util/genericHelpers.ts","webpack://graphPlayground/./src/js/util/graphHelpers.ts","webpack://graphPlayground/./src/ lazy ^\\.\\/.*\\.ts$ namespace object","webpack://graphPlayground/webpack/bootstrap","webpack://graphPlayground/webpack/runtime/compat get default export","webpack://graphPlayground/webpack/runtime/define property getters","webpack://graphPlayground/webpack/runtime/ensure chunk","webpack://graphPlayground/webpack/runtime/get javascript chunk filename","webpack://graphPlayground/webpack/runtime/global","webpack://graphPlayground/webpack/runtime/hasOwnProperty shorthand","webpack://graphPlayground/webpack/runtime/make namespace object","webpack://graphPlayground/webpack/runtime/node module decorator","webpack://graphPlayground/webpack/runtime/publicPath","webpack://graphPlayground/webpack/runtime/jsonp chunk loading","webpack://graphPlayground/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"graphPlayground:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"GraphAlgorithmWorker-90da9cebbb4471166093.min.worker.js\");\n}\n","import gHelp from \"./util/graphHelpers\";\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport GraphState from \"./graphState\";\nimport { FlowResult, kColorResult, MSTResult, ShortestPathResult } from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from \"worker-loader!./workers/GraphAlgorithmWorker\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./classes/GraphImmut/EdgeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport * as languages from \"./languages\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean;\n}\n\nconst makeAndPrintShortestPath = (title: string, fn: string, weighted: boolean): void => {\n    const myName = languages.current.ShortestPath;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (fn.includes(\"dijkstra\")) {\n                        help.showSimpleModal(\n                            languages.current.DijkstraError,\n                            languages.current.DijkstraErrorHTML\n                        );\n                    } else if (fn.includes(\"bellman\")) {\n                        help.showSimpleModal(\n                            languages.current.BellmanFordError,\n                            languages.current.BellmanFordErrorHTML\n                        );\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                    help.htmlEncode(source.toString()), help.htmlEncode(sink.toString()))}`;\n\n                if (a.pathExists) {\n                    p = help.stringReplacement(languages.current.ShortestPathFromAToB, title,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.distance);\n                    if (weighted) {\n                        p += `\\n${help.stringReplacement(languages.current.WithWeightedCost, a.cost)}`;\n                    }\n                    p += \"\\n\\n\" + languages.current.UsingPath;\n\n                    p = help.htmlEncode(p);\n                    let graph = GraphState.getGraphData(GraphState.graph, false, true);\n                    let G = new GraphImmut(graph.nodes, graph.edges, graph.directed, graph.weighted);\n                    a.path.forEach((v: number, i: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                        if (i > 0) {\n                            G = G.editEdge(a.path[i - 1], v, null, null, \"#FF0000\") as GraphImmut;\n                        }\n                    });\n                    GraphState.graph = G;\n                    window.main.setData(GraphState.getGraphData(G), false, false, false);\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title,\n        languages.current.Go, languages.current.Cancel,\n        [\n            {\n                label: languages.current.StartNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            },\n            {\n                label: languages.current.EndNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\n\nconst makeAndPrintGreedyColoring = (): void => {\n    const myName = languages.current.GraphColoringGreedy;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    const possibleColorModes = {\n        [languages.current.IncNodeLabel]: 1,\n        [languages.current.DecNodeLabel]: 2,\n        [languages.current.IncDegree]: 3,\n        [languages.current.DecDegree]: 4\n    }\n    \n    const possibleColorModesArray = [\"\", languages.current.IncNodeLabel, languages.current.DecNodeLabel, languages.current.IncDegree, languages.current.DecDegree];\n    \n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const orderingMode = values[0];\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                GraphState.graphProperties.colormode = 2;\n                GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n                (GraphState.state.graphColoringGreedy as {}) = a.colors;\n\n                let p = help.stringReplacement(languages.current.GreedyWorkedOrder, possibleColorModesArray[orderingMode] + \"\") + \"\\n\";\n\n                const order : number[] = a.vertexOrder;\n\n                order.forEach((v, i) => {\n                    p += GraphState.nodeIDToLabel(v) + \", \";\n                })\n\n                p += \"\\n\\n\";\n\n                p += help.stringReplacement(languages.current.ApproxChromaticNumberIs, a.chromaticNumber + \"\");\n\n                p += \"\\n\";\n\n                const colors = help.flatten(a.colors);\n                \n                const historyToPrint: {nodeToColor: number, colorsOfNeighbors: {[key: number]: number} }[] = a.history;\n\n                let p2 = \"\";\n\n                if (historyToPrint != null && window.settings.getOption(\"stepByStepInfo\")) {\n                    \n                    \n                    for (let step = 0; step < historyToPrint.length; step++) {\n\n                        const curNode: number = historyToPrint[step].nodeToColor;\n                        const colAdjList: { [key: number]: number } = historyToPrint[step].colorsOfNeighbors as {};\n\n                        p2 += languages.current.Step + (step+1) + \" : \" + (step < 10 ? \"\\t\\t\": \"\\t\") + \"AL(\" + GraphState.nodeIDToLabel(curNode) + \") : \\t\";\n\n                        for (let neighbor in colAdjList) {\n                            const nb: number = (neighbor as unknown) as number;\n                            p2 += GraphState.nodeIDToLabel(nb) + languages.current.Has + colAdjList[neighbor] + \"; \\t\";\n                        }\n\n                        p2 += \"\\u2192 \" + help.stringReplacement(languages.current.VertexGetsThereforeColor, GraphState.nodeIDToLabel(curNode), colors[curNode] + \"\");\n                        p2 += \"\\n\";\n\n                    }\n\n                    p2  = `<hr><h6>${languages.current.StepByStepOutput}</h6>${help.htmlEncode(p2)}`;\n\n                    \n\n                }\n                else {\n                    p2 += `<hr>${languages.current.IfDesiredActiveStepByStep}${help.htmlEncode(p2)}`;\n                }\n\n                p = `<h3>${languages.current.GraphColoringGreedyTitle}</h3><hr>${help.htmlEncode(p)}` + p2;\n                \n\n\n                if (a.chromaticNumber > 6) {\n                    p += `<hr>${languages.current.RecolorAddColors}` + \"\\n\";\n                    p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n                }\n\n                help.printout(p);\n                window.main.applyColors();\n\n            });\n            w.send({\n                type: \"colorNetworkGreedy\",\n                args: [orderingMode],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        languages.current.GraphColoringGreedy,\n        languages.current.Go, languages.current.Cancel,\n        [\n            {\n                type: \"select\",\n                label: languages.current.ColoringMode, \n                optionText: Object.keys(possibleColorModes), \n                optionValues: Object.values(possibleColorModes), \n                initialValue: 0\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\n\nconst makeAndPrintkColoringExact = (mode: number, constrainedColoring: boolean): void => {\n    \n    const myName = (mode === 0) ? languages.current.kColoringBruteForce : (constrainedColoring ? languages.current.kColoringConstrainedBacktracking : languages.current.kColoringBacktracking);\n\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    const options: ModalFormRow[] = [\n        {\n        type: \"numeric\", initialValue: 1, label: languages.current.NumberOfColors, validationFunc: (v) => {\n            return v > 0 || languages.current.NumberOfColorsPositiveError;}\n        }\n    ]\n    if (window.settings.getOption(\"stepByStepInfo\")) {\n        options.push(\n            { \n                type: \"numeric\", initialValue: 10, label: languages.current.NumberOfSteps, validationFunc: (v) => {\n                    return v > 0 || languages.current.NumberOfColorsPositiveError;}\n            }\n        );\n    }\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const kColor = values[0];\n            let numberOfSteps = -1;\n\n            if (window.settings.getOption(\"stepByStepInfo\")) {\n                numberOfSteps = values[1];\n            }            \n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                \n                a = a as kColorResult;\n\n                GraphState.graphProperties.colormode = 1;\n\n                \n\n                if (GraphState.state.kColorable === null || GraphState.getProperty(\"Most recent k-color check\") == null) {\n                    GraphState.graphProperties[\"Most recent k-color check\"] = -1;\n                    GraphState.state.kColorable = {};\n                }\n\n                GraphState.graphProperties[\"Most recent k-color check\"] = a.kColor;\n                (GraphState.state.kColorable[kColor] as {}) = a.color;\n\n                let p = \"\";\n                GraphState.setUpToDate(true, [\"Most recent k-color check\", \"kColorable\"]); // TODO: What about kColor dictionary if changing the graph?\n                \n\n                if (constrainedColoring) {\n                    p += languages.current.FollowingConstraints + \"\\n\";\n                    for (let i = 0; i < a.color.length; i++) {\n                        if (a.given[i]) {\n                            p += GraphState.nodeIDToLabel(i) + languages.current.MustBe + a.color[i].toString() + \"\\t\";\n                        }\n                    };\n                    p += \"\\n\\n\";\n\n                }\n\n                if (a.kColorable) {\n                    \n                    const bestChrNumber = GraphState.graphProperties[\"Current best guess of chromatic number\"];\n                    if (bestChrNumber === null) {\n                        GraphState.graphProperties[\"Current best guess of chromatic number\"] = a.kColor;\n                    }\n                    else {\n                        GraphState.graphProperties[\"Current best guess of chromatic number\"] = Math.min(a.kColor, bestChrNumber);\n                    }\n                    GraphState.setUpToDate(true, [\"Current best guess of chromatic number\"]);\n\n\n                    \n\n                    p += help.stringReplacement(languages.current.kColoringSuccess, a.kColor + \"\") + \"\\n\";\n\n                    p += help.stringReplacement(languages.current.kColoringTerminated, a.totalSteps + \"\");\n                    \n                    // p = (mode === 0) ? `<h3>${languages.current.kColoringBruteForceTitle}</h3><hr>${help.htmlEncode(p)}` : `<h3>${languages.current.kColoringBacktrackingTitle}</h3><hr>${help.htmlEncode(p)}`;\n                    \n                    // if (a.kColor > 6) {\n                    //     p += languages.current.ReColorInfo;\n                    //     p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n                    // }\n\n                }\n                else {\n                    p += help.stringReplacement(languages.current.kColoringFail, a.kColor + \"\") + \"\\n\";\n                    p += help.stringReplacement(languages.current.kColoringCheckedAll, a.totalSteps + \"\");\n\n                    GraphState.state.kColorable[kColor] = [];\n\n                }\n\n                let p2 = \"\";\n\n                if (numberOfSteps > 0) {\n                    p2 += help.stringReplacement(languages.current.kColoringDocStep1, numberOfSteps + \"\") + \"\\n\";\n                    p2 += languages.current.kColoringDocStep2 + \"\\n\";\n                    \n                    p2 += languages.current.Vertex + \"\\t\\t\";\n\n                    for (let i = 0; i < a.color.length; i++) {\n                        p2 += GraphState.nodeIDToLabel(i) + \"\\t\";\n                    };\n                    p2 += \"\\n\";\n                                     \n\n                    for (let step = 0; step < a.history.length; step++) {\n                        p2 += languages.current.Step + (step+1) + \": \" + (step > 100 ? \"\": \"\\t\") + a.history[step].toString().replace(/,/g, '\\t') + \"\\n\";\n                    }\n                    \n\n                    p2  = `<hr><h6>${languages.current.StepByStepOutput}</h6>${help.htmlEncode(p2)}`;\n\n                }\n                else {\n                    p2 += `<hr>${languages.current.IfDesiredActiveStepByStep}${help.htmlEncode(p2)}`;\n                }\n\n                if (mode === 0) {\n                    p = `<h3>${languages.current.kColoringBruteForceTitle}</h3><hr>${help.htmlEncode(p)}` + p2;\n                }\n                else if (mode === 1 && !constrainedColoring) {\n                    p = `<h3>${languages.current.kColoringBacktrackingTitle}</h3><hr>${help.htmlEncode(p)}` + p2;\n                }\n                else if (mode === 1 && constrainedColoring) {\n                    p = `<h3>${languages.current.kColoringConstrainedTitle}</h3><hr>${help.htmlEncode(p)}` + p2;\n                }\n\n                if (a.kColor > 6) {\n                    p += `<hr>${languages.current.RecolorAddColors}` + \"\\n\";\n                    p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n                }\n\n                help.printout(p);\n\n                if (! (constrainedColoring && !a.kColorable)) {\n                    window.main.applyColors();\n                }\n\n            });\n            w.send({\n                type: \"kColoringExact\",\n                args: [mode, constrainedColoring, kColor, numberOfSteps],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n        },\n        (mode === 0) ? languages.current.kColoringBruteForce : languages.current.kColoringBacktracking,\n        languages.current.Go, languages.current.Cancel,\n        options,\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = languages.current.ConnectedComponents;\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = languages.current.StronglyConnectedComponents;\n        componentKey = \"stronglyConnectedComponents\";\n    } else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if (UIInteractions.isRunning[cc]) {\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(languages.current.TaskAlreadyRunning);\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible(e => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = help.stringReplacement(languages.current.NumberOfConnectedComponents, cc, a.count);\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += help.stringReplacement(languages.current.VertexIsInConnectedComponentNumber, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if (iStartedProgress) {\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({ type: \"id\", id });\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({ data: e.data.data });\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: { [index: string]: boolean } = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: languages.current.GraphColoringGreedy,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintGreedyColoring();\n                },\n                display: true\n            },\n            {\n                name: languages.current.kColoringBruteForce,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintkColoringExact(0, false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.kColoringBacktracking,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintkColoringExact(1, false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.kColoringConstrainedBacktracking,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintkColoringExact(1, true);\n                },\n                display: true\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector)!.addEventListener(\"click\", e => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-about-link\", UIInteractions.printAbout);\n        makeSimpleClickListener(\"#stop-allworker-link\", UIInteractions.terminateAllWebWorkers);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-cycle-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Cycle();\n        });\n        makeSimpleClickListener(\"#load-wheel-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Wheel();\n        });\n        makeSimpleClickListener(\"#load-random-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.RandomGraph();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#load-default-color-link\", async () => {\n            GraphState.resetColor();\n        });\n        makeSimpleClickListener(\"#get-vertex-degrees-link\", async () => {\n            UIInteractions.getAllDegrees();\n        });\n        makeSimpleClickListener(\"#check-coloring-link\", async () => {\n            UIInteractions.checkGraphColoring();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModalJSON();\n        });\n        makeSimpleClickListener(\"#import-graph-g1\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(0);\n        });\n        makeSimpleClickListener(\"#import-graph-g2\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(1);\n        });\n        makeSimpleClickListener(\"#import-graph-g3\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(2);\n        });\n        makeSimpleClickListener(\"#import-graph-g4\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(3);\n        });\n        makeSimpleClickListener(\"#import-graph-g5\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(4);\n        });\n        makeSimpleClickListener(\"#import-graph-g6\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(5);\n        });\n        makeSimpleClickListener(\"#import-graph-g7\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(6);\n        });\n        makeSimpleClickListener(\"#import-graph-g8\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(7);\n        });\n        makeSimpleClickListener(\"#import-graph-g9\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(8);\n        });\n        makeSimpleClickListener(\"#import-graph-g10\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(9);\n        });\n        makeSimpleClickListener(\"#import-graph-gch\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(10);\n        });\n        makeSimpleClickListener(\"#import-graph-g4x4\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(11);\n        });\n        makeSimpleClickListener(\"#blank-background\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(0);\n        });\n        makeSimpleClickListener(\"#import-verkehrskreuzung\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(1);\n        });\n        makeSimpleClickListener(\"#import-schweiz\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(2);\n        });\n        makeSimpleClickListener(\"#import-sudoku-3x3\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(3);\n        });\n        makeSimpleClickListener(\"#import-sudoku-4x4\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(4);\n        });\n        makeSimpleClickListener(\"#import-sudoku-5x5\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(5);\n        });\n\n        (document.querySelector(\"#fileDropdown\") as HTMLAnchorElement).innerText = languages.current.File;\n        (document.querySelector(\"#graphDropdown\") as HTMLAnchorElement).innerText = languages.current.BuildGraphs;\n        (document.querySelector(\"#import-file-link\") as HTMLAnchorElement).innerText = languages.current.ImportFile;\n        (document.querySelector(\"#export-file-link\") as HTMLAnchorElement).innerText = languages.current.ExportFile;\n\n        (document.querySelector(\"#graphloadDropdown\") as HTMLAnchorElement).innerText = languages.current.LoadGraphs;\n        (document.querySelector(\"#import-graph-g1\") as HTMLAnchorElement).innerText = \"Graph G1\";\n        (document.querySelector(\"#import-graph-g2\") as HTMLAnchorElement).innerText = \"Graph G2\";\n        (document.querySelector(\"#import-graph-g3\") as HTMLAnchorElement).innerText = \"Graph G3\";\n        (document.querySelector(\"#import-graph-g4\") as HTMLAnchorElement).innerText = \"Graph G4\";\n        (document.querySelector(\"#import-graph-g5\") as HTMLAnchorElement).innerText = \"Graph G5\";\n        (document.querySelector(\"#import-graph-g6\") as HTMLAnchorElement).innerText = \"Graph G6\";\n        (document.querySelector(\"#import-graph-g7\") as HTMLAnchorElement).innerText = \"Graph G7\";\n        (document.querySelector(\"#import-graph-g8\") as HTMLAnchorElement).innerText = \"Graph G8\";\n        (document.querySelector(\"#import-graph-g9\") as HTMLAnchorElement).innerText = \"Graph G9\";\n        (document.querySelector(\"#import-graph-g10\") as HTMLAnchorElement).innerText = \"Graph G10\";\n        (document.querySelector(\"#import-graph-gch\") as HTMLAnchorElement).innerText = \"Graph CH\";\n        (document.querySelector(\"#import-graph-g4x4\") as HTMLAnchorElement).innerText = \"Graph 4x4\";\n\n        (document.querySelector(\"#setBackgroundDropdown\") as HTMLAnchorElement).innerText = languages.current.SetBackground;\n        (document.querySelector(\"#blank-background\") as HTMLAnchorElement).innerText = \"Reset\";\n        (document.querySelector(\"#import-verkehrskreuzung\") as HTMLAnchorElement).innerText = \"Verkehrskreuzung\";\n        (document.querySelector(\"#import-schweiz\") as HTMLAnchorElement).innerText = \"Karte der Schweiz\";\n        (document.querySelector(\"#import-sudoku-3x3\") as HTMLAnchorElement).innerText = \"Sudoku 3x3\";\n        (document.querySelector(\"#import-sudoku-4x4\") as HTMLAnchorElement).innerText = \"Sudoku 4x4\";\n        (document.querySelector(\"#import-sudoku-5x5\") as HTMLAnchorElement).innerText = \"Sudoku 5x5\";\n\n        (document.querySelector(\"#new-graph-layout-link\") as HTMLAnchorElement).innerText = languages.current.NewGraphLayout;\n        (document.querySelector(\"#load-default-color-link\") as HTMLAnchorElement).innerText = languages.current.LoadDefaultColor;\n        (document.querySelector(\"#get-vertex-degrees-link\") as HTMLAnchorElement).innerText = languages.current.GetAllDegrees;\n        (document.querySelector(\"#check-coloring-link\") as HTMLAnchorElement).innerText = languages.current.CheckColoring;\n\n        (document.querySelector(\"#graph-options-link\") as HTMLAnchorElement).innerText = languages.current.Options;\n        (document.querySelector(\"#stop-allworker-link\") as HTMLAnchorElement).innerText = languages.current.StopTasks;\n        (document.querySelector(\"#print-about-link\") as HTMLAnchorElement).innerText = languages.current.AboutShort;\n\n        (document.querySelector(\"#graph-tool-label\") as HTMLHeadingElement).innerText = languages.current.GraphTools;\n        (document.querySelector(\"#load-complete-link\") as HTMLAnchorElement).innerText = languages.current.LoadComplete;\n        (document.querySelector(\"#load-cycle-link\") as HTMLAnchorElement).innerText = languages.current.LoadCycle;\n        (document.querySelector(\"#load-wheel-link\") as HTMLAnchorElement).innerText = languages.current.LoadWheel;\n        (document.querySelector(\"#load-hypercube-link\") as HTMLAnchorElement).innerText = languages.current.LoadHypercube;\n        (document.querySelector(\"#load-custom-link\") as HTMLAnchorElement).innerText = languages.current.LoadCustom;\n        (document.querySelector(\"#load-random-link\") as HTMLAnchorElement).innerText = languages.current.LoadRandom;\n\n        (document.querySelector(\"#algorithms-label\") as HTMLHeadElement).innerText = languages.current.Algorithms;\n\n        (document.querySelector(\"#graph-properties-label\") as HTMLHeadElement).innerText = languages.current.GraphProperties;\n        (document.querySelector(\"#results-label\") as HTMLHeadElement).innerText = languages.current.Results;\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\n            languages.current.Help,\n            languages.current.IssuesHTML\n        );\n    }\n\n    static printAbout(): void {\n        help.showSimpleModal(\n            languages.current.About,\n            languages.current.AboutHTML\n        );\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"smoothEdges\") !== vals[1]) {\n                    window.settings.changeOption(\"smoothEdges\", vals[1]);\n\n                    window.network.setOptions({ edges: { smooth: vals[1] } });\n                    let G = GraphState.graph;\n                    window.main.setData(GraphState.getGraphData(G));\n                    \n                }\n\n                if (window.settings.getOption(\"fastColorChange\") !== vals[2]) {\n                    window.settings.changeOption(\"fastColorChange\", vals[2]);                  \n                }\n\n                if (window.settings.getOption(\"stepByStepInfo\") !== vals[3]) {\n                    window.settings.changeOption(\"stepByStepInfo\", vals[3]);                  \n                }\n\n            },\n            languages.current.Options,\n            languages.current.Save, languages.current.Cancel,\n            [\n                {\n                    label: languages.current.GraphPhysics,\n                    initialValue: window.settings.getOption(\"nodePhysics\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.SmoothEdges,\n                    initialValue: window.settings.getOption(\"smoothEdges\"),\n                    type: \"checkbox\"\n                },\n                \n                {\n                    label: languages.current.FastColorChange,\n                    initialValue: window.settings.getOption(\"fastColorChange\"),\n                    type: \"checkbox\"\n                },\n\n                {\n                    label: languages.current.StepByStepInfo,\n                    initialValue: window.settings.getOption(\"stepByStepInfo\"),\n                    type: \"checkbox\"\n                }\n\n            ],\n            null\n        );\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (const v of GraphState.workerPool) {\n            if (v !== null && v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        // Cleanup state\n        GraphState.workerPool = [];\n        UIInteractions.stopLoadingAnimation();\n        UIInteractions.isRunning = {};\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex(v => {\n            return v === null || typeof v === \"undefined\";\n        });\n        if (nextIndex === -1) {\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"flex\") {\n            prog.style.display = \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"none\") {\n            prog.style.display = \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string) {\n        let n = languages.current.ThisTask;\n        if (name) {\n            n = name;\n        }\n        help.showSimpleModal(\n            languages.current.TaskAlreadyRunning,\n            \"<p>\" + help.stringReplacement(languages.current.TaskAlreadyRunningBody, n) + \"</p>\"\n        );\n    }\n\n    static getAllDegrees(): Promise<void> {\n        const myName = languages.current.GetAllDegrees;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            let a = { degrees: [], maxDegree: 0 };\n\n            \n\n            const printGAD = () => {\n            \n                const degrees = a.degrees;\n                const maxDegrees = a.maxDegree;\n\n                let p = \"\";\n                \n                degrees.forEach((v,i) => {\n                    p += help.stringReplacement(languages.current.VertexHasDegree, GraphState.nodeIDToLabel(i) + \"\", v + \"\") + \"\\n\";\n                });\n\n\n                p += \"\\n\" + help.stringReplacement(languages.current.GraphHasVertexDegree, maxDegrees + \"\");\n\n                p = `<h3>${languages.current.GetAllDegreesTitle}</h3><hr>${help.htmlEncode(p)}`;\n\n                help.printout(p);\n                \n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            \n            const w = UIInteractions.getWorkerIfPossible(e => {\n                a = e.data;\n                printGAD();\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n            w.send({\n                type: \"getAllDegreesWrapper\",\n                args: [],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n            \n        });\n    }\n\n    static checkGraphColoring(): Promise<void> {\n        const myName = languages.current.CheckColoring;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            let a = { from: [], to: [],  num: -1, confList: []};\n\n            const printCC = () => {\n                let p = help.stringReplacement(languages.current.NumberOfConflicts, a.num + \"\");\n\n                const conflist = a.confList;\n                \n                p += \"\\n\\n\";\n\n                conflist.forEach((v,i) => {\n                    p += help.stringReplacement(languages.current.NodeIsInConflictWith, (i+1).toString(), GraphState.nodeIDToLabel(v[0]), GraphState.nodeIDToLabel(v[1]) + \"\") + \"\\n\";\n                });\n\n                p = `<h3>${languages.current.CheckColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n\n                help.printout(p);\n                \n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            \n            const w = UIInteractions.getWorkerIfPossible(e => {\n                a = e.data;\n                printCC();\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n            w.send({\n                type: \"checkColoringByString\",\n                args: [],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n            \n        });\n    }\n\n    static resetgraphColoringGreedy(): Promise<void> {\n\n        return new Promise<void>(async resolve => {\n            GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = null;\n            GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n            GraphState.state.graphColoringGreedy = null;\n        });\n\n    }\n\n    static makeAndPrintgraphColoringWelsh(): Promise<void> {\n        const myName = languages.current.GraphColoringWelsh;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Approx. Chromatic Greedy\")) as number,\n                colors: GraphState.state.graphColoringGreedy as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties.colormode = 2;\n                GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n                (GraphState.state.graphColoringGreedy as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n\n                // p += `\\nApprox. Chromatic Number from Welsh algorithm: ${a.chromaticNumber}`;\n\n                let p = help.stringReplacement(languages.current.NumberOfVertices, colors.length + \"\");\n                p += \"\\n\" + help.stringReplacement(languages.current.ChromaticNumberIs, a.chromaticNumber + \"\");\n\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n                });\n\n                /*help.printout(p)\n                if (!confirm(\"Do you want to continue\")) {\n                    window.main.applyColors();\n                    return;    \n                }*/\n                \n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>${languages.current.GraphColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n                p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoringGreedy\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetworkWelsh\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            } else {\n                printGC();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n            }\n        });\n    }\n\n    \n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            if (ignoreDuplicate) {\n                return Promise.resolve();\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({\n                type: \"hasEulerianCircuit\",\n                args: [GraphState.graph.getAllOutDegrees(), cc]\n            });\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = languages.current.FordFulkerson;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(\n            async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: boolean | FlowResult | null = null;\n\n                const cb = () => {\n                    let p = `<h3>${languages.current.FordFulkerson}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                        help.htmlEncode(GraphState.nodeIDToLabel(source)), help.htmlEncode(GraphState.nodeIDToLabel(sink)))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `${languages.current.FordFulkersonMaxFlowMinCut} ${help.stringReplacement(languages.current.MaxFlowFromAToB,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.maxFlow + \"\")}`;\n                    p += `\\n\\n${languages.current.UsingCapacities}\\n\\n`;\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach(v => {\n                        p += help.stringReplacement(languages.current.FlowWithCapacity, GraphState.nodeIDToLabel(v.from),\n                            GraphState.nodeIDToLabel(v.to), v.flow + \"\", v.capacity + \"\");\n                        p += \"\\n\";\n                    });\n                    p = p.trim();\n                    p = `<h3>${languages.current.FordFulkersonMaxFlowMinCut}</h3><hr>` + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            languages.current.FordFulkersonMaxFlowMinCut,\n            languages.current.Go, languages.current.Cancel,\n            [\n                {\n                    label: languages.current.SourceNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                },\n                {\n                    label: languages.current.SinkNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                }\n            ],\n            ($modal) => {\n                UIInteractions.isRunning[myName] = false;\n                $modal.modal(\"hide\");\n            }\n        );\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = languages.current.KruskalMST;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = help.stringReplacement(languages.current.KruskalMSTTotalWeight, a.totalWeight + \"\");\n            p += `\\n\\n${languages.current.UsingEdges}\\n\\n`;\n            p = help.htmlEncode(p);\n            a.mst.forEach(v => {\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getFrom())}&rarr;`;\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>${languages.current.KruskalMST}</h3><hr>${p}`;\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return Promise.resolve();\n        }\n\n        const myName = languages.current.Cyclic;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(resolve => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = languages.current.TopoSort;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(languages.current.TopoSortErrorHTML);\n                return;\n            }\n\n            let p = languages.current.TopoSort + \":\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach(v => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>${languages.current.TopoSort}</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    // display only the graph algorithms that are suited for directional, weighted graphs\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\")!;\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement(\"a\");\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", e => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach(alg => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            } else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\n\nimport \"bootstrap\";\nimport { Network } from \"vis-network\";\nimport { default as main, MainI } from \"./main\";\nimport Settings from \"./settings\";\nimport UI from \"./UIInteractions\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\ndeclare global {\n    interface Window {\n        main: MainI;\n        network: Network;\n        settings: typeof Settings;\n        ui: typeof UI;\n        Worker: Function;\n    }\n}\n\nwindow.main = main;\nwindow.settings = Settings;\n\nlanguages.setLanguage().then(() => {\n    window.ui = UI;\n    window.ui.registerListeners();\n\n    main.visOptions.locales = languages.current.VisLocale;\n    main.visOptions.locale = \"\";\n    window.network = new Network(main.container, {}, main.visOptions);\n    Settings.loadSettings();\n\n    main.addNetworkListeners(window.network);\n\n    let loadDefault = true;\n    if (Settings.checkForLocalStorage()) {\n        const s = localStorage.getItem(\"graphPlayground.lastState\");\n        if (s !== null) {\n            const jsonGraph: any = JSON.parse(s);\n            if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\n                loadDefault = false;\n                main.applyState(false, jsonGraph as { graph: GraphPlain });\n            }\n        }\n    }\n    if (loadDefault) {\n        (async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            main.setData(predefined.WheelDefault(), false, true, true);\n        })();\n    }\n});\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number;\n\n    [key: string]: any;\n\n    [key: number]: any;\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n    private readonly attributes: any;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: number | string = 1, extraAttrs: any = null) {\n        if (typeof from === \"object\") {\n            extraAttrs = Object.keys(from)\n                .filter(key => ![\"from\", \"to\", \"weight\"].includes(key))\n                .reduce((obj: any, key: string) => {\n                    obj[key] = (<EdgeImmutPlain>from)[key];\n                    return obj;\n                }, {});\n\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to!);\n        this.weight = Object.freeze(parseFloat(weight as string));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    toPlain(): EdgeImmutPlain {\n        const toReturn: EdgeImmutPlain = { from: this.from, to: this.to, weight: this.weight };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    editEdge(newWeight: number | null, extraAttrs: any = {}): EdgeImmut {\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach(key => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new EdgeImmut(\n            this.getFrom(),\n            this.getTo(),\n            newWeight === null ? this.getWeight() : newWeight,\n            attributes\n        );\n    }\n}\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterExtraAttr = (data: any, labels: any) => {\n    return Object.keys(data)\n        .filter((key) => !(labels).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst filterNodeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"label\", \"id\"]);\n};\n\nconst filterEdgeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"from\", \"to\", \"weight\"]);\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n            let extraAttrs = {};\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n            if (\"attributes\" in edge) {\n                extraAttrs = filterEdgeExtraAttr(edge.attributes);\n            }\n            else {\n                extraAttrs = filterEdgeExtraAttr(edge);\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | Readonly<List<NodeImmut>> | NodeImmutPlain[],\n                edges: null | Readonly<List<EdgeImmut>> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        const node = this.nodes.get(id);\n        if(typeof node === \"undefined\"){\n            return false;\n        }\n        if (rich) {\n            return node;\n        }\n        return node.toPlain();\n    }\n\n    getNodeForColor(id: number): NodeImmut | boolean {\n        const node = this.nodes.get(id);\n        if (typeof node === \"undefined\") {\n            return false;\n        }\n\n        return node;\n    }\n\n    getNonDefaultColor(): { [node: number] : number } {\n        \n        const customColorPalleteArrayNonDefault = [\"....\", \"#ff3f3f\", \"#ffbf64\", \"#ffff00\", \"#00ff80\", \"#66ccff\", \"#f964ff\"];\n\n        const constrainedColoring : { [node: number] : number } = {};\n\n        this.nodes.forEach((n) => {\n            let curNode = n.getID();\n            let currentColor = n.getAttribute('color');\n            \n            if ( !(currentColor === null || currentColor === undefined || currentColor === \"DEFAULT\" || currentColor ===\"#ffffff\") && customColorPalleteArrayNonDefault.includes(currentColor) ) {\n                constrainedColoring[curNode] = customColorPalleteArrayNonDefault.indexOf(currentColor);\n            }\n        });\n\n        return constrainedColoring;\n\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight(), edge.getAllAttributes());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null, color: string | null = null): GraphImmut | boolean {\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n\n            if (((edge.getFrom() === from && edge.getTo() === to)\n                || (!this.isDirected() && edge.getFrom() === to && edge.getTo() === from))\n                && (oldWeight === null || edge.getWeight() === oldWeight)) {\n\n                if (color !== null) {\n                    newEdges = newEdges.set(index,\n                        edge.editEdge(newWeight === null ? null : parseFloat(newWeight),\n                            {color: color}));\n                }\n                else {\n                    newEdges = newEdges.set(index, edge.editEdge(newWeight === null ? null : parseFloat(newWeight)));\n                }\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): Readonly<List<NodeImmut>> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): Readonly<List<EdgeImmut>> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            if (degrees.includes(edge.getFrom())) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    getAllInOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            if (degrees.includes(edge.getFrom())) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n            \n            if (degrees.includes(edge.getTo())) {\n                degrees[edge.getTo()]++;\n            }\n            else {\n                degrees[edge.getTo()] = 1;\n            }\n            \n\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight(), edge.getAllAttributes()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to < from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight(), edge.getAllAttributes()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = G.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = G.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = G.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = G.asUnweighted();\n        }\n\n        return G;\n    }\n\n    // MH: Adjacency matrix\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        if (id1 >= this.numNodes || id2 >= this.numNodes) {\n            return edgeList;\n        }\n\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number = Math.min, initialValue: any = Infinity): GraphImmut {\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n","\"use strict\";\n\nimport help from \"../../util/genericHelpers\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n    [key: string]: any;\n    [key: number]: any;\n}\n\nconst capitalLetters = help.deepFreeze([\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n]) as string[];\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: null | string = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            // MH: If the id is an integer number and between 0 and 25, than take a capital letter from the alphabet as label\n            if (typeof id === \"number\" && (id >= 0 && id <=25)) {\n                this.label = capitalLetters[id];\n            } else {\n                this.label = id.toString();\n            }\n            \n        } else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = { id: this.id, label: this.label };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        if (extraAttrs !== null) {\n            Object.keys(extraAttrs).forEach(key => {\n                attributes[key] = extraAttrs[key];\n            });\n        }\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nimport { DataSet } from 'vis-data';\nimport { Node, Edge } from 'vis-network';\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\n\ninterface UpToDateProperties {\n    name: string;\n    upToDate: boolean;\n    type: string;\n    always?: boolean;\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\n    [index: string]: undefined | string | boolean | ((ignoreDuplicate?: boolean) => any)\n}\n\ninterface GraphProperties {\n    vertices: number;\n    edges: number;\n    colormode: number;\n    \"Approx. Chromatic Greedy\": number | null;\n    \"Most recent k-color check\": number | null;\n    \"Current best guess of chromatic number\": number | null;\n    \n    [index: string]: boolean | number | null;\n}\n\ninterface GraphStateData {\n    stronglyConnectedComponents: null | { [key: number]: number };\n    connectedComponents: null | { [key: number]: number };\n    graphColoringGreedy: null | number[];\n    kColorable: null | { [key: number]: number[] };\n\n    [index: string]: null | number[] | { [key: number]: number } | { [key: number]: number[] };\n}\n\nexport interface AddNodeI {\n    id?: number\n    label: string;\n    x: number;\n    y: number;\n    color?: string;\n}\n\nexport interface GraphStateHistory {\n    upToDate: UpToDateProperties[];\n    state: GraphStateData;\n    graph: GraphImmut;\n    graphProperties: GraphProperties;\n    [index: string]: UpToDateProperties[] | GraphStateData | GraphImmut | GraphProperties;\n}\n\nconst getInt = (v: string | number): number => {\n    if (typeof v === 'number') {\n        return v;\n    }\n    return parseInt(v);\n};\n\nexport default class GraphState {\n    public static workerPool: (Worker | null)[] = [];\n    public static backHistory: GraphStateHistory[] = [];\n    public static forwardHistory: GraphStateHistory[] = [];\n    public static maxHistory = 10;\n    public static upToDate: UpToDateProperties[] = [\n        {\n            name: \"Approx. Chromatic Greedy\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.resetgraphColoringGreedy();\n                \n            }\n        },\n        {\n            name: \"graphColoringGreedy\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                return window.ui.resetgraphColoringGreedy();\n            }\n        },\n        {\n            name: \"Most recent k-color check\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"Current best guess of chromatic number\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"colormode\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"kColorable\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                return null;\n            }\n        },\n        { name: \"vertices\", upToDate: true, always: true, type: \"property\" },\n        { name: \"edges\", upToDate: true, always: true, type: \"property\" },\n    ];\n    public static state: GraphStateData = {\n        stronglyConnectedComponents: null,\n        connectedComponents: null,\n        graphColoringGreedy: null,\n        kColorable: null\n    };\n    public static graph: GraphImmut;\n    public static graphProperties: GraphProperties = {\n        vertices: 0,\n        edges: 0,\n        colormode: 0,\n        \"Approx. Chromatic Greedy\": null,\n        \"Most recent k-color check\": null,\n        \"Current best guess of chromatic number\": null,\n    };\n\n    static setUpToDate(value = false, listOptions?: string[]) {\n        const all = listOptions === null || typeof listOptions === \"undefined\";\n        let property = false;\n        GraphState.upToDate.forEach((v) => {\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions!.indexOf(v.name) > -1)) {\n                v.upToDate = value;\n                if (v.type === \"property\") {\n                    property = true;\n                }\n            }\n        });\n        if (property) {\n            GraphState.makeAndPrintProperties();\n        }\n    }\n\n    static async getProperty(property: keyof GraphProperties, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\n        const a = GraphState.upToDate.find((v) => {\n            return (\"name\" in v && v.name === property);\n        })!;\n        if (!a.upToDate) {\n            if (\"applyFunc\" in a && typeof a.applyFunc === \"function\" && updateIfNotUpdated) {\n                await a.applyFunc(ignoreDuplicate);\n            }\n            else {\n                return null;\n            }\n        }\n        if (a.type === \"state\") {\n            return Promise.resolve(GraphState.state[property]);\n        }\n        return Promise.resolve(GraphState.graphProperties[property]);\n    }\n\n    static async makeAndPrintProperties(recalcLong = false) {\n        const directional = window.settings.getOption(\"direction\");\n\n        // console.log(\"Hi, I'm makeAndPrintProperties\");\n\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\n\n        // if (!directional) {\n        //     await GraphState.getProperty(\"eulerian\", true, true);\n        // }\n\n        const p = Object.keys(GraphState.graphProperties);\n\n        // console.log(p);\n\n        if (recalcLong) {\n            p.forEach(async (v) => {\n                await GraphState.getProperty(v, true);\n            });\n        }\n\n        const printableProperties: any = {};\n        await Promise.all(p.map(async (v) => {\n            printableProperties[v] = await GraphState.getProperty(v);\n        }));\n\n        // GraphState.printGraphProperties(printableProperties);\n        GraphState.printGraphPropertiesSimple(printableProperties);\n    }\n\n    static printGraphPropertiesSimple(properties: any) {\n        let p = \"\";\n        if (properties[\"vertices\"] !== null) {\n            p +=`${help.toTitleCase(\"Knoten\")}: ${properties[\"vertices\"]}\\n`\n        }\n        if (properties[\"edges\"] !== null) {\n            p +=`${help.toTitleCase(\"Kanten\")}: ${properties[\"edges\"]}\\n`\n        }\n        p = p.trim();\n        p = help.htmlEncode(p);\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\n    }\n\n    static printGraphProperties(properties: any) {\n        let p = \"\";\n        console.log(Object.keys(properties));\n\n        Object.keys(properties).forEach((k) => {\n            if (properties[k] !== null) {\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\n            }\n        });\n        p = p.trim();\n        p = help.htmlEncode(p);\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\n    }\n\n    private static updateGraph(graph = GraphState.graph) {\n        let nodes = graph.getAllNodes() as NodeImmutPlain[];\n        let edges = graph.getAllEdges() as EdgeImmutPlain[];\n        if (!window.settings.getOption(\"customColors\")) {\n            nodes = GraphState.clearColorFromNodes(nodes);\n            edges = GraphState.clearColorFromEdges(edges);\n        }\n        window.main.setData({ nodes, edges });\n    }\n\n    static resetColor() {\n        const saveState = window.settings.getOption(\"customColors\");\n        window.settings.changeOption(\"customColors\", false);\n        this.updateGraph();\n        window.settings.changeOption(\"customColors\", saveState);\n    }\n\n    static repaint() {\n        this.updateGraph();\n    }\n\n    static addEdge(from: number | string, to: number | string, weight = 0, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\n        this.updateGraph(graph);\n    }\n\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\n        graph = graph.addNode({ label: data.label, x: data.x, y: data.y, color: data.color });\n        this.updateGraph(graph);\n    }\n\n    static editNode(id: number | string, label: string, color?: string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        graph = graph.editNode(iId, { label, color });\n        window.main.setData(GraphState.getGraphData(graph), false, false);\n    }\n\n    static editEdge(from: number | string, to: number | string,\n        newWeight: number, oldWeight: number, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\n        if (newGraph instanceof GraphImmut) {\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\n        }\n    }\n\n    static deleteEdge(from: number | string, to: number | string, weight: (undefined | null | number) = null, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\n        this.updateGraph(graph);\n    }\n\n    static deleteNode(id: number | string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        const newGraph = graph.deleteNode(iId);\n        if (newGraph instanceof GraphImmut) {\n            this.updateGraph(newGraph);\n        }\n    }\n\n    static checkAdjacency(from: number | string, to: number | string , graph = GraphState.graph): boolean {\n        const nodeFrom = getInt(from);\n        const nodeTo = getInt(to);\n        return graph.areAdjacent(nodeFrom, nodeTo);\n    }\n\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\n        nodes.forEach((v) => {\n            v.color = null;\n        });\n        return nodes;\n    }\n\n    static clearColorFromEdges(edges: EdgeImmutPlain[]): EdgeImmutPlain[] {\n        edges.forEach((v) => {\n            delete v.color;\n        });\n        return edges;\n    }\n\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\n        const n = graph.getNode(id, true);\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\n            return n.getLabel().trim();\n        }\n\n        return id.toString();\n    }\n\n    // Preferentially search by ID, label, and case-insensitive label\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\n        let n = graph.getAllNodes(true) as NodeImmut[];\n        n = n.filter((node) => {\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\n        });\n\n        if (n.length === 0) {\n            return -1;\n        }\n        else if (n.length === 1) {\n            return n[0].getID();\n        }\n\n        let rID = -1;\n        let found = false;\n\n        n.forEach((node) => {\n            if (!found && node.getID().toString() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        return rID;\n    }\n\n    // Return graph as a Vis compatible dataset\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<Node>; edges: DataSet<Edge> } {\n        const d = GraphState.getGraphData(graph);\n        if (graph.isWeighted()) {\n            d.edges.forEach((e) => {\n                e.label = e.weight.toString();\n            });\n        }\n        d.edges.forEach((e) => {\n            if ('color' in e) {\n                e.color = { color: e.color };\n            }\n        });\n\n        return { nodes: new DataSet(d.nodes as Node[]), edges: new DataSet(d.edges as Edge[]) };\n    }\n\n    static setLocations(locations: { [key: string]: { x: number; y: number } }, graph = GraphState.graph): GraphImmut {\n        let newNodes = graph.getAllNodesAsImmutableList();\n        Object.keys(locations).forEach((i) => {\n            const v = locations[i];\n            const node = newNodes.get(parseInt(i))!;\n            // Only change when there is actually a new position\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\n                // Batch up all changes that we'll be making\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), { x: v.x, y: v.y }));\n            }\n        });\n\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\n    }\n\n    static getGraphData(graph = GraphState.graph, clearNodeColors = false, clearEdgeColors = false): GraphPlain {\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\n        const edges = graph.getAllEdges() as EdgeImmutPlain[];\n        return {\n            nodes: clearNodeColors ? GraphState.clearColorFromNodes(nodes) : nodes,\n            edges: clearEdgeColors ? GraphState.clearColorFromEdges(edges) : edges,\n            directed: graph.isDirected(),\n            weighted: graph.isWeighted()\n        };\n    }\n}\n","import DE from \"src/DE\";\n\nexport enum Languages {\n    DE = \"DE\",\n\n}\n\nexport let current = {} as typeof DE;\n\n\nexport const setLanguage = async () => {\n    current = (await import(`../${window.settings.getOption(\"language\") || Languages.DE}.ts`)).default;\n};\n","\"use strict\";\n\nimport gHelp from './util/graphHelpers';\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport randomColor from 'randomcolor';\nimport GraphState, { AddNodeI, GraphStateHistory } from './graphState';\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport { Network, Node as VisNode, Edge } from \"vis-network\";\nimport { DataSet } from \"vis-data\";\nimport * as languages from \"./languages\";\n\n\nexport interface MainI {\n    graphState: typeof GraphState;\n    container: HTMLElement;\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\n    visOptions: {\n        edges: { smooth: boolean, color: {inherit: boolean}};\n        nodes: { color: { border: string, background: string, \n                            highlight: { border: string, background: string}, \n                            hover : { border: string, background: string}\n                        }\n                };\n        interaction: { hover: boolean };\n        manipulation: {\n            addNode: (data: AddNodeI, callback: Function) => void;\n            editNode: (data: AddNodeI, callback: Function) => void;\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\n        },\n        locale?: string,\n        locales?: any,\n    };\n    cancelEdit: (callback: Function) => void;\n    saveData: (data: any, callback: Function, operation: string, label: string, color: string) => Promise<void>;\n    nodeLabelIDValidator: (v: string) => (boolean | string);\n    applyColors: () => Promise<void>;\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\n    saveState: () => void;\n    getStateForSaving: () => GraphStateHistory;\n    undo: () => void;\n    redo: () => void;\n    applyState: (undo?: boolean, newState?: any) => void;\n    saveStateLocalStorage: () => void;\n    shuffleNetworkLayout: () => void;\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\n    addNetworkListeners: (network: Network) => void\n}\n\ninterface VisNetworkEvent {\n    edges: DataSet<Edge>;\n    nodes: DataSet<VisNode>;\n}\n\ninterface VisNetworkInternals extends Network {\n    layoutEngine: {\n        randomSeed: number,\n        initialRandomSeed: number\n    }\n}\n\ninterface VisEditEdgeInternal {\n    from: { id: string | number };\n    to: { id: string | number };\n    label?: string\n}\n\ninterface VisEdgeInternal {\n    from: string | number;\n    to: string | number;\n    id: string;\n    label?: string\n}\n\nconst self: MainI = {\n    graphState: GraphState,\n    container: document.getElementById('network')!,\n    // Function used to overwrite the edge edit functionality when weights are active\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\n        help.showFormModal(($modal, vals) => {\n            callback(null);\n            $modal.modal(\"hide\");\n            const value = parseFloat(vals[0]);\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label!));\n        }, languages.current.EditEdge, languages.current.Save, languages.current.Cancel, [\n            {\n                type: \"numeric\",\n                label: languages.current.WeightCapacity,\n                initialValue: parseFloat(data.label!)\n            }\n        ]);\n    },\n    visOptions: {\n        edges: { smooth: false, color: {inherit: false}},\n        nodes: { color: { border: \"#000000\", background: \"#ffffff\",\n                            highlight: { border: \"#000000\", background: \"#e6e6e6\" }, \n                            hover : { border: \"#000000\", background: \"#e6e6e6\"}\n                }},\n        interaction: { hover: true },\n        manipulation: {\n            addNode: async (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n           \n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, await GraphState.getProperty(\"vertices\"))}</p>`\n                    },\n\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: gHelp.generateLabelFromNumber(await GraphState.getProperty(\"vertices\")) }\n\n                ];\n                if (customColors) {\n                    const customColorPallete = {\n                        [languages.current.Color0]: \"DEFAULT\",\n                        [languages.current.Color1]: \"#ff3f3f\",\n                        [languages.current.Color2]: \"#ffbf64\",\n                        [languages.current.Color3]: \"#ffff00\",\n                        [languages.current.Color4]: \"#00ff80\",\n                        [languages.current.Color5]: \"#66ccff\",\n                        [languages.current.Color6]: \"#f964ff\"\n                    }; \n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete) });\n                }\n                const $popup = help.makeFormModal(languages.current.AddNode, languages.current.Save, languages.current.Cancel, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            editNode: (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const initialColor = Object.getOwnPropertyNames(data.color).includes(\"background\") ? (data.color as any).background : \"white\";\n\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, data.id + \"\")}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: data.label },\n\n                ];\n                if (customColors) {\n                    const customColorPallete = {\n                            [languages.current.Color0]: \"DEFAULT\",\n                            [languages.current.Color1]: \"#ff3f3f\",\n                            [languages.current.Color2]: \"#ffbf64\",\n                            [languages.current.Color3]: \"#ffff00\",\n                            [languages.current.Color4]: \"#00ff80\",\n                            [languages.current.Color5]: \"#66ccff\",\n                            [languages.current.Color6]: \"#f964ff\"\n                    };  \n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete), initialValue: initialColor });\n                }\n                const $popup = help.makeFormModal(languages.current.EditNode, languages.current.Save, languages.current.Cancel, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                    window.network.addEdgeMode();\n                };\n                if (data.from === data.to) {\n                    alert(languages.current.ConnectNodeToItselfAlert);\n                    return;\n                }\n                else if (GraphState.checkAdjacency(data.from, data.to)) {\n                    alert(languages.current.AlreadyConnectedNodes);\n                    return;\n                }\n\n                apply();\n            },\n            /*addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                };\n                if (data.from === data.to) {\n                    if (confirm(languages.current.ConnectNodeToItselfConfirmation)) {\n\n                        apply();\n                    }\n                    return;\n                }\n\n                apply();\n            },*/\n            editEdge: (data, callback) => {\n                callback(null);\n                self.visOptions.manipulation.deleteEdge({ edges: [data.id] });\n                self.visOptions.manipulation.addEdge(data);\n            },\n            deleteEdge: (data, callback) => {\n                if (typeof callback === \"function\") {\n                    callback(null);\n                }\n                data.edges.forEach((v: any) => {\n                    let weight = null;\n                    const edge = (window.network as any).body.data.edges.get(v);\n                    const weightFromLabel = edge.label;\n                    if (typeof weightFromLabel !== \"undefined\") {\n                        weight = parseFloat(weightFromLabel);\n                    }\n\n                    GraphState.deleteEdge(edge.from, edge.to, weight);\n                });\n            },\n            deleteNode: (data, callback) => {\n                callback(null);\n                data.nodes.forEach((v: string) => {\n                    GraphState.deleteNode(v);\n                });\n            },\n        },\n    },\n\n    cancelEdit: (callback) => {\n        if (typeof callback === \"function\") {\n            callback(null);\n        }\n    },\n\n    saveData: async (data, callback, operation, label, color) => {\n        callback(null);\n\n        data.label = label;\n        data.color = color;\n        if (color === \"DEFAULT\") {\n            data.color = undefined;\n        }\n        if (operation === \"add\") {\n            GraphState.addNode(data);\n        }\n        else if (operation === \"editNode\") {\n            GraphState.editNode(data.id, data.label, data.color);\n        }\n    },\n\n    nodeLabelIDValidator: (v) => {\n        if (GraphState.nodeLabelToID(v) > -1) {\n            return true;\n        }\n        return languages.current.InvalidLabelOrId;\n    },\n\n    applyColors: async () => {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const coloring = GraphState.graphProperties.colormode;\n\n        let graphColors : any;\n        let chromaticNumber : any;\n\n        if (coloring == 1) {\n            chromaticNumber = await GraphState.getProperty(\"Most recent k-color check\");\n            const graphKColorable = await GraphState.getProperty(\"kColorable\", true);\n            graphColors = graphKColorable[chromaticNumber];\n            \n        }\n        else if (coloring === 2) {\n            graphColors = await GraphState.getProperty(\"graphColoringGreedy\", true);\n            chromaticNumber = await GraphState.getProperty(\"Approx. Chromatic Greedy\", true);\n        }\n        else {\n            alert(\"No correct colormode\");\n            return;\n        }\n\n        \n            // \"not colored\": \"DEFAULT\", --> white \"#ffffff\"\n            // \"1: red\": \"#ff3f3f\",\n            // \"2: orange\": \"#ffbf64\",\n            // \"3: yellow\": \"#ffff00\",\n            // \"4: green\": \"#00ff80\",\n            // \"5: blue\": \"#66ccff\",\n            // \"6: violet\": \"#f964ff\"\n        \n\n        const basicColors = ['#ffffff', '#ff3f3f', '#ffbf64', '#ffff00', '#00ff80', \"#66ccff\", '#f964ff'];\n        const addColors = randomColor({ count: chromaticNumber > 6 ? chromaticNumber - 6 : 1, luminosity: \"light\" });\n\n        const colors = [...basicColors, ...addColors];\n\n        let G = GraphState.graph;\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\n            G = G.editNode(v.id, { color: colors[graphColors[v.id]] });\n        });\n        self.setData(GraphState.getGraphData(G), false, false);\n    },\n\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\n        \n        // Store existing positions in the data if we're supposed to keep the layout\n        if (rearrangeGraph) {\n            data.nodes.forEach((v) => {\n                delete v.x;\n                delete v.y;\n            });\n        }\n\n        if (graphChanged) {\n            self.saveState();\n        }\n\n        if (\"directed\" in data && typeof data.directed !== \"undefined\") {\n            window.settings.changeOption(\"direction\", data.directed);\n        }\n        if (\"weighted\" in data && typeof data.weighted !== \"undefined\") {\n            window.settings.changeOption(\"weights\", data.weighted);\n        }\n        const directional = window.settings.getOption(\"direction\") as boolean;\n        const weighted = window.settings.getOption(\"weights\") as boolean;\n\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\n        GraphState.graph = g;\n\n        // Set a new random seed so that the layout will be different\n        self.randomizeNetworkLayoutSeed(window.network as unknown as VisNetworkInternals);\n        window.network.setData(GraphState.getGraphAsDataSet(g));\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\n\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        if (graphChanged) {\n            window.ui.stopLoadingAnimation();\n            window.ui.isRunning = {};\n            window.ui.terminateAllWebWorkers();\n            window.ui.printGraphAlgorithms();\n            help.printout(\"\");\n            GraphState.setUpToDate();\n            GraphState.makeAndPrintProperties(recalcProps);\n        }\n\n        self.saveStateLocalStorage();\n    },\n\n    saveState: () => {\n        if (GraphState.graph === null) {\n            return;\n        }\n\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\n            GraphState.backHistory.shift();\n        }\n\n        GraphState.backHistory.push(self.getStateForSaving());\n        GraphState.forwardHistory = [];\n        document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n    },\n\n    getStateForSaving: () => {\n        const state: any = {};\n        Object.keys(GraphState).forEach((k: string) => {\n            const v: any = (GraphState as any)[k];\n            if (typeof v !== \"function\") {\n                if (typeof v !== \"object\") {\n                    state[k] = v;\n                }\n                else {\n                    if (k === \"graph\" && v !== null) {\n                        state[k] = v;\n                    }\n                    if (!k.toLowerCase().includes(\"history\")) {\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\n                    }\n                }\n            }\n        });\n\n        return state as GraphStateHistory;\n    },\n\n    undo: () => {\n        if (GraphState.backHistory.length > 0) {\n            self.applyState(true);\n        }\n    },\n\n    redo: () => {\n        if (GraphState.forwardHistory.length > 0) {\n            self.applyState(false);\n        }\n    },\n\n    applyState: (undo = true, newState: null | GraphStateHistory = null) => {\n        const firstLoad = newState !== null;\n        const currentState = self.getStateForSaving();\n\n        if (!firstLoad) {\n            if (undo) {\n                newState = GraphState.backHistory.pop()!;\n            }\n            else {\n                newState = GraphState.forwardHistory.pop()!;\n            }\n        }\n\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\n\n        window.settings.changeOption(\"direction\", newState!.graph.isDirected());\n        window.settings.changeOption(\"weights\", newState!.graph.isWeighted());\n\n        GraphState.graph = newState!.graph;\n\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        window.ui.printGraphAlgorithms();\n        help.printout(\"\");\n\n        Object.keys(newState!).forEach((k: string) => {\n            const v = newState![k];\n            if (typeof v !== \"object\") {\n                (GraphState as any)[k] = v;\n            }\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\n                if (k.toLowerCase() === \"uptodate\") {\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\n                    });\n                }\n                else {\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\n                }\n            }\n        });\n\n        GraphState.makeAndPrintProperties().then(() => {\n            if (undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.backHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.forwardHistory.push(currentState);\n            }\n            else if (!undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.forwardHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.backHistory.push(currentState);\n            }\n\n            self.saveStateLocalStorage();\n        });\n    },\n\n    saveStateLocalStorage: () => {\n        if (window.settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\n        }\n    },\n\n    shuffleNetworkLayout: () => {\n        self.setData({\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\n        }, false, false, true);\n    },\n\n    randomizeNetworkLayoutSeed: (network) => {\n        const r = Math.round(Math.random() * 1000000);\n        network.layoutEngine.randomSeed = r;\n        network.layoutEngine.initialRandomSeed = r;\n    },\n\n    addNetworkListeners: (network) => {\n        // Enable edit node/edge when double clicking\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\n                network.editEdgeMode();\n            }\n            if (\"nodes\" in p && p.nodes.length === 1 && window.settings.getOption(\"fastColorChange\")) {\n                \n                \n                const chosenNode = p.nodes as unknown as number[];\n                const nodeId = chosenNode[0];\n\n                const data = GraphState.graph.getNodeForColor(nodeId);\n\n                if (typeof data !== 'boolean') {\n                    const newColor = gHelp.toggleNodeColor(data);\n                    GraphState.editNode(data.getID(), data.getLabel(), newColor);\n                }\n                else {\n                    alert(\"Double-click selection of node doesn't work.\")\n                }\n\n            }\n            if (\"nodes\" in p && p.nodes.length === 1 && !window.settings.getOption(\"fastColorChange\")) {\n                network.editNode();\n            }\n        });\n\n        // Save locations of nodes after dragging\n        network.on(\"dragEnd\", () => {\n            GraphState.graph = GraphState.setLocations(network.getPositions());\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\n        });\n\n        // Delete nodes/edges when hit \"Delete\"\n        let lastNetworkClickEvent: Event | null = null;\n        network.on('click', (event) => {\n            lastNetworkClickEvent = event;\n        });\n\n        // Delete key to delete node or edge\n        document.addEventListener('keyup', (key) => {\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\n                        network.deleteSelected();\n                    }\n                }\n            }\n        });\n\n        // Undo/Redo keyboard commands\n        document.addEventListener(\"keydown\", (e) => {\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\n                self.redo();\n            }\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\n                self.undo();\n            }\n        });\n\n        // When clicking off of the network, remove the Delete functionality\n        document.addEventListener(\"click\", (e) => {\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\n                lastNetworkClickEvent = null;\n            }\n        });\n    },\n\n};\n\nexport default self;\n","\"use strict\";\ninterface SettingsList {\n    nodePhysics: boolean;\n    direction: boolean;\n    weights: boolean;\n    smoothEdges: boolean;\n    fastColorChange: boolean;\n    stepByStepInfo: boolean;\n\n    [index: string]: boolean;\n}\n\nexport default class Settings {\n    private static readonly defaults: SettingsList = {\n        nodePhysics: false,\n        direction: false,\n        weights: false,\n        smoothEdges: false,\n        fastColorChange: false,\n        stepByStepInfo: false\n    };\n    private static current: any = {};\n\n    public static checkForLocalStorage() {\n        try {\n            const x = \"__storage_test__\";\n            localStorage.setItem(x, x);\n            localStorage.removeItem(x);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    public static saveSettings() {\n        if (Settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\n        }\n    }\n\n    public static loadSettings() {\n        if (Settings.checkForLocalStorage()) {\n            const settings = localStorage.getItem(\"graphPlayground.settings\");\n            if (settings === null) {\n                Settings.current = settings;\n            } else {\n                Settings.current = JSON.parse(settings);\n            }\n        }\n        if (Settings.current === null) {\n            Settings.current = {};\n        }\n        Settings.setAll();\n    }\n\n    public static setAll() {\n        window.network.setOptions({ nodes: { physics: Settings.getOption(\"nodePhysics\") as boolean } });\n        window.network.setOptions({ edges: { arrows: { to: Settings.getOption(\"direction\") as boolean } } });\n        if (Settings.getOption(\"weights\")) {\n            window.network.setOptions({\n                manipulation: {\n                    editEdge: {\n                        editWithoutDrag: window.main.visWeightEdgeEdit\n                    }\n                }\n            });\n        } else {\n            window.network.setOptions({ manipulation: { editEdge: window.main.visOptions.manipulation.editEdge } });\n        }\n    }\n\n    public static changeOption(option: string, value: string | boolean): void {\n        Settings.current[option] = value;\n        Settings.saveSettings();\n        Settings.setAll();\n    }\n\n    public static getOption(option: string): string | boolean {\n        if (option in Settings.current) {\n            return Settings.current[option];\n        }\n        return Settings.defaults[option];\n    }\n}\n","\"use strict\";\n\nimport * as $ from \"jquery\";\n\nexport declare interface ModalFormRow {\n    type: string;\n    label?: string;\n    initialValue?: any;\n    id?: string | number;\n    extraAttrs?: any;\n    validationFunc?: (value: any, container: JQuery) => boolean | string;\n    clickDismiss?: boolean;\n    onclick?: (...args: any[]) => void;\n    optionText?: any[];\n    optionValues?: any[];\n}\n\ndeclare interface BasicMapType {\n    class: string;\n    id: string;\n    value: any;\n\n    [key: number]: any;\n\n    [key: string]: any;\n}\n\nconst defaultCancelCb = ($modal: JQuery) => {\n    $modal.modal(\"hide\");\n};\n\nconst self = {\n    deepCopy(deep: boolean, clone: any, copy: any) {\n        const isPlainObject = (obj: any) => {\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\n                return false;\n            }\n\n            let proto = Object.getPrototypeOf(obj);\n\n            if (!proto) {\n                return true;\n            }\n\n            // Objects with prototype are plain iff they were constructed by a global Object function\n            let Ctor = {}.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n            return (\n                typeof Ctor === \"function\" &&\n                {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n            );\n        };\n\n        let options,\n            name,\n            src,\n            copyIsArray,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length;\n\n        // Handle a deep copy situation\n        if (typeof target === \"boolean\") {\n            deep = target;\n\n            // Skip the boolean and the target\n            target = arguments[i] || {};\n            i++;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\n            target = {};\n        }\n\n        if (i === length) {\n            target = this;\n            i--;\n        }\n\n        for (; i < length; i++) {\n            // Only deal with non-null/undefined values\n            if ((options = arguments[i]) != null) {\n                // Extend the base object\n                for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && Array.isArray(src) ? src : [];\n                        } else {\n                            clone = src && isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[name] = self.deepCopy(deep, clone, copy);\n\n                        // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n                        target[name] = copy;\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n    },\n\n    deepFreeze: <T extends Object>(o: T): Readonly<T> => {\n        Object.freeze(o);\n\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\n            if (\n                o.hasOwnProperty(prop) &&\n                (o as any)[prop] !== null &&\n                (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\") &&\n                !Object.isFrozen((o as any)[prop])\n            ) {\n                self.deepFreeze((o as any)[prop]);\n            }\n        });\n\n        return o;\n    },\n\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\n        return [...arr].sort(compareFunction);\n    },\n\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\n        const r: any[] = [];\n        ds.forEach((v: { [index: string]: any }) => {\n            r.push(v[key]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\n        arr = arr.slice();\n        arr.forEach((v: any) => {\n            const k = Object.keys(v);\n            k.forEach(key => {\n                if (keys.indexOf(key) < 0) {\n                    delete v[key];\n                }\n            });\n        });\n        return self.deepFreeze(arr);\n    },\n\n    getFileExtension: (filename: string): string => {\n        return filename.split(\".\").splice(-1)[0];\n    },\n\n    htmlEncode: (string: string): string => {\n        const t = document.createElement(\"textarea\");\n        t.textContent = string;\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\n        return string;\n    },\n\n    printout: (text: string, escape?: string): void => {\n        if (escape) {\n            text = self.htmlEncode(escape);\n        }\n        document.getElementById(\"printout\")!.innerHTML = text;\n    },\n\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\n        const r: T[] = [];\n        Object.keys(map).forEach(i => {\n            r.push(map[i]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    rotate: (map: { [key: string]: any }): Readonly<any> => {\n        const r: any = {};\n        Object.keys(map).forEach(i => {\n            if (map[i] in r) {\n                r[map[i]].push(i);\n            } else {\n                r[map[i]] = [i];\n            }\n        });\n        return self.deepFreeze(r);\n    },\n\n    max: (iterable: any[]): number => {\n        return iterable.reduce((a, b) => {\n            return Math.max(a, b);\n        });\n    },\n\n    toTitleCase: (str: string): string => {\n        return str.replace(/(?:^|\\s)\\w/g, match => {\n            return match.toUpperCase();\n        });\n    },\n\n    stringReplacement: (str: string, ...replacements: string[]) => {\n        return replacements.reduce((val, replacement, i) => {\n            return val.replace(`$${i + 1}`, replacement);\n        }, str);\n    },\n\n    showSimpleModal: (title: string, body: string): void => {\n        self.showFormModal(null, title, null, null, [{ type: \"html\", initialValue: body }], null, false);\n    },\n\n    makeFormModal: (title: string, successText: string | null, cancelText: string | null, form: ModalFormRow[], footer = true): JQuery => {\n        const f = $(\"<div>\", { class: \"modal-body form-group\" });\n        form.forEach((formRow, i) => {\n            if (!(\"initialValue\" in formRow)) {\n                formRow.initialValue = \"\";\n            }\n\n            let id = \"form-modal-\" + i;\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\n                id = formRow.id;\n            }\n\n            const basicMap: BasicMapType = { class: \"form-control\", id, value: formRow.initialValue };\n\n            if (\"extraAttrs\" in formRow) {\n                Object.keys(formRow.extraAttrs).forEach(attrname => {\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\n                    }\n                });\n            }\n\n            let validFunc: typeof formRow[\"validationFunc\"] = () => true;\n            if (\"validationFunc\" in formRow && typeof formRow.validationFunc === \"function\") {\n                validFunc = formRow.validationFunc;\n            }\n\n            const generalValidator = (event: any, valueMutator: null | ((v: any) => any) = null) => {\n                const $v = $(event.target);\n                let val = $v.val();\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\n                    val = valueMutator(val);\n                }\n                const valid = validFunc!(val, $v);\n\n                if (valid === true) {\n                    $v.removeClass(\"is-invalid\")\n                        .next(\"#feedback-\" + i)\n                        .remove();\n                } else {\n                    $v.addClass(\"is-invalid\");\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\n                        $v.after($(\"<div>\", { class: \"invalid-feedback\", id: \"feedback-\" + i }).text(valid));\n                    }\n                }\n            };\n\n            if (formRow.type === \"html\") {\n                f.append($(formRow.initialValue));\n            } else if (formRow.type === \"checkbox\") {\n                basicMap.type = \"checkbox\";\n                basicMap.class = \"form-check-input\";\n                delete basicMap.value;\n                if (formRow.initialValue) {\n                    basicMap.checked = \"\";\n                }\n\n                f.append(\n                    $(\"<div>\", { class: \"form-check\" }).append(\n                        $(\"<label>\", { for: id, class: \"form-check-label\" })\n                            .text(formRow.label!)\n                            .prepend($(\"<input>\", basicMap))\n                    )\n                );\n            } else {\n                f.append($(\"<label>\", { for: id, class: \"col-form-label\" }).text(formRow.label!));\n\n                if (formRow.type === \"button\") {\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\n                        basicMap.class += \" btn-dismiss\";\n                    }\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\n                        $b.on(\"click\", formRow.onclick);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"numeric\") {\n                    basicMap.type = \"number\";\n                    f.append(\n                        $(\"<input>\", basicMap).on(\"blur validate\", e => {\n                            generalValidator(e, parseFloat);\n                        })\n                    );\n                } else if (formRow.type === \"text\") {\n                    basicMap.type = \"text\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"file\") {\n                    basicMap.type = \"file\";\n                    basicMap.class = \"form-control-file form-control\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"textarea\") {\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\n                    if (\"onclick\" in formRow) {\n                        $b.on(\"click\", formRow.onclick!);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"select\") {\n                    const $options = $(\"<select>\", basicMap);\n                    formRow.optionText!.forEach((oText, oIndex) => {\n                        if (oIndex < formRow.optionValues!.length) {\n                            let selected = false;\n                            if (formRow.initialValue === formRow.optionValues![oIndex]) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { value: formRow.optionValues![oIndex], selected }).text(oText));\n                        } else {\n                            let selected = false;\n                            if (formRow.initialValue === oText) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { selected }).text(oText));\n                        }\n                    });\n                    f.append($options.on(\"blur validate\", generalValidator));\n                }\n            }\n        });\n\n        let $footer: JQuery<HTMLElement> | null = $(\"<div>\", { class: \"modal-footer\" })\n            .append($(\"<button>\", { class: \"btn btn-success\", type: \"button\" }).text(successText!))\n            .append($(\"<button>\", { class: \"btn btn-danger btn-cancel\", type: \"button\" }).text(cancelText!));\n\n        if (footer === false) {\n            $footer = null;\n        }\n\n        const $modal = $(\"<div>\", { class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\" });\n        $modal.append(\n            $(\"<div>\", { class: \"modal-dialog\" }).append(\n                $(\"<div>\", { class: \"modal-content\" })\n                    .append(\n                        $(\"<div>\", { class: \"modal-header\" })\n                            .append($(\"<h5>\", { class: \"modal-title\" }).text(title))\n                            .append(\n                                $(\"<button>\", {\n                                    class: \"close\",\n                                    \"data-dismiss\": \"modal\",\n                                    \"aria-label\": \"close\"\n                                }).append($(\"<span>\", { \"aria-hidden\": \"true\" }).html(\"&times;\"))\n                            )\n                    )\n                    .append(f)\n                    .append($footer!)\n            )\n        );\n        $modal\n            .find(\"input, textarea\")\n            .off(\"keyup\")\n            .on(\"keyup\", e => {\n                if (e.key === \"Enter\") {\n                    $(\".btn-success\")\n                        .last()\n                        .trigger(\"click\");\n                }\n            });\n        $modal.on(\"shown.bs.modal\", () => {\n            $modal\n                .find(\"input[type='text'], input[type='number'], textarea\")\n                .first()\n                .trigger(\"focus\");\n        });\n\n        return $modal;\n    },\n\n    showFormModal: (\n        successCb: null | (($modal: JQuery, vals: any[]) => void),\n        title: string,\n        successText: string | null,\n        cancelText: string | null,\n        form: ModalFormRow[],\n        cancelCb: null | (($modal: JQuery) => void) = defaultCancelCb,\n        footer = true\n    ) => {\n        const $modal = self.makeFormModal(title, successText, cancelText, form, footer);\n\n        $modal\n            .on(\"click\", \".btn-cancel\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                } else {\n                    $modal.modal(\"hide\");\n                }\n            })\n            .on(\"click\", \".btn-dismiss\", () => {\n                $modal.modal(\"hide\");\n            })\n            .on(\"click\", \".btn-success\", () => {\n                const vals: any[] = [];\n                let hasErrors = false;\n\n                $modal.find(\"input, textarea, select\").each((i, v) => {\n                    const $v = $(v);\n\n                    if (($v as any).tagName === \"SELECT\") {\n                        vals.push($v.find(\":selected\").val());\n                    } else if ($v.attr(\"type\") === \"checkbox\") {\n                        vals.push($v.prop(\"checked\"));\n                    } else if ($v.attr(\"type\") === \"file\") {\n                        vals.push(($v.get(0) as any).files);\n                    } else if ($v.attr(\"type\") === \"number\") {\n                        vals.push(parseFloat($v.val() as string));\n                    } else {\n                        vals.push($v.val());\n                    }\n\n                    if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\n                        hasErrors = true;\n                    }\n                });\n\n                if (!hasErrors && typeof successCb === \"function\") {\n                    successCb($modal, vals);\n                }\n            })\n            .on(\"hidden.bs.modal\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                }\n                $modal.remove();\n            })\n            .modal(\"show\");\n    }\n};\n\nexport default self;\n","\"use strict\";\n\nimport gHelp from './graphHelpers';\nimport help from './genericHelpers';\nimport {EdgeImmutPlain} from \"../classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, {NodeImmutPlain} from \"../classes/GraphImmut/NodeImmut\";\nimport GraphImmut from '../classes/GraphImmut/GraphImmut';\n\ninterface Degree {\n    in: number;\n    out: number;\n}\n\nconst capitalLetters = help.deepFreeze([\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n]) as string[];\n\nexport default {\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\n        // Adjacency stores IDs of edges TO\n        const degrees: Degree[] = [];\n        adjacencyMatrix.forEach((v, i) => {\n            if (i in degrees) {\n                degrees[i].out += v.length;\n            }\n            else {\n                degrees[i] = {out: v.length, in: 0};\n            }\n            v.forEach((outV) => {\n                if (outV in degrees) {\n                    degrees[outV].in += 1;\n                }\n                else {\n                    degrees[outV] = {in: 1, out: 0};\n                }\n            });\n        });\n\n        return degrees;\n    },\n\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\n        const nodes: NodeImmutPlain[] = [];\n\n        // MH: TODO NOT REALLY CLEAN\n        window.settings.changeOption(\"customColors\", true);\n\n        edges.forEach((v) => {\n            nodes[v.from] = {id: v.from, label: gHelp.generateLabelFromNumber(v.from)};\n            nodes[v.to] = {id: v.to, label: gHelp.generateLabelFromNumber(v.to)};\n        });\n\n        return nodes;\n    },\n\n    generateLabelFromNumber : (prelabel: number) : string => {\n        if (typeof prelabel === \"number\" && (prelabel >= 0 && prelabel <=25)) {\n            return capitalLetters[prelabel];\n        } else {\n            return prelabel.toString();\n        }\n    },\n\n    compareColor : (color1: string | undefined | null, color2: string | undefined | null) => {\n        if (color1 === null || color1 === undefined) {\n            color1 = \"DEFAULT\";\n        }\n        if (color2 === null || color2 === undefined) {\n            color2 = \"DEFAULT\";\n        }\n\n        return color1 === color2;\n\n    },\n\n    // \"not colored\": \"DEFAULT\",\n    // \"1: red\": \"#ff3f3f\",\n    // \"2: orange\": \"#ffbf64\",\n    // \"3: yellow\": \"#ffff00\",\n    // \"4: green\": \"#00ff80\",\n    // \"5: blue\": \"#66ccff\",\n    // \"6: violet\": \"#f964ff\"\n\n    toggleNodeColor : (node: NodeImmut) : string | undefined => {\n        \n        const customColorPalleteArray = [\"DEFAULT\", \"#ff3f3f\", \"#ffbf64\", \"#ffff00\", \"#00ff80\", \"#66ccff\", \"#f964ff\"]; //'  ', '#97c2fc'];\n\n        const currentColor = node.getAttribute('color');\n\n        let currentIndex = 0;        \n\n        if (currentColor === null || currentColor === undefined) {\n            currentIndex = 0;\n        }\n        else {\n            const currentColorString = currentColor as string;\n            currentIndex = customColorPalleteArray.indexOf(currentColorString);\n        }\n\n        if (currentIndex === 6 || currentIndex < 0) {\n            return undefined;\n        }\n\n        if (currentIndex === 7) {\n            currentIndex = 0;\n        }\n\n        return customColorPalleteArray[(currentIndex+1)%7];\n    },\n\n    checkColoringByNumber : (color: number[], G: GraphImmut): boolean => {\n\n        const nodes = G.getAllNodes(true) as NodeImmut[];\n\n        const V = G.getNumberOfNodes();\n        for (let v = 0; v < V; v++) {\n            const vertexAdjacency = G.getNodeAdjacency(v);\n            const currentColor = color[v];\n\n            for (const i of vertexAdjacency) {\n                const conflict  = (currentColor === color[i]);\n                if (conflict && i > v) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n\n    },\n\n    nextColorIsSafe : (curNode: number, G: GraphImmut, color : number[], curColor: number): boolean => {\n        const V = G.getNumberOfNodes();\n        const vertexAdjacency = G.getNodeAdjacency(curNode);\n\n        for (let i = 0; i < vertexAdjacency.length; i++) {\n            if (color[vertexAdjacency[i]] === curColor) {\n                return false\n            }\n        }\n\n        return true;\n\n    }\n\n    \n\n};\n","var map = {\n\t\"./DE.ts\": [\n\t\t12,\n\t\t9,\n\t\t12\n\t],\n\t\"./EN_US.ts\": [\n\t\t216,\n\t\t9,\n\t\t872\n\t],\n\t\"./custom.d.ts\": [\n\t\t883,\n\t\t7,\n\t\t883\n\t],\n\t\"./js/GraphAlgorithms.ts\": [\n\t\t446,\n\t\t9,\n\t\t446\n\t],\n\t\"./js/UIInteractions.ts\": [\n\t\t825,\n\t\t9\n\t],\n\t\"./js/app.ts\": [\n\t\t238,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/EdgeImmut.ts\": [\n\t\t268,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/GraphImmut.ts\": [\n\t\t536,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/NodeImmut.ts\": [\n\t\t729,\n\t\t9\n\t],\n\t\"./js/classes/SpanningTree.ts\": [\n\t\t866,\n\t\t9,\n\t\t866\n\t],\n\t\"./js/dataImportExport.ts\": [\n\t\t346,\n\t\t9,\n\t\t346\n\t],\n\t\"./js/graphState.ts\": [\n\t\t669,\n\t\t9\n\t],\n\t\"./js/languages.ts\": [\n\t\t119,\n\t\t9\n\t],\n\t\"./js/main.ts\": [\n\t\t863,\n\t\t9\n\t],\n\t\"./js/settings.ts\": [\n\t\t660,\n\t\t9\n\t],\n\t\"./js/util/genericHelpers.ts\": [\n\t\t485,\n\t\t9\n\t],\n\t\"./js/util/graphHelpers.ts\": [\n\t\t641,\n\t\t9\n\t],\n\t\"./js/util/predefinedGraphs.ts\": [\n\t\t133,\n\t\t9,\n\t\t981\n\t],\n\t\"./js/workers/GraphAlgorithmWorker.ts\": [\n\t\t69,\n\t\t9,\n\t\t69\n\t],\n\t\"./js/workers/pwaServiceWorker.ts\": [\n\t\t304,\n\t\t7,\n\t\t304\n\t],\n\t\"./overloadTypes.d.ts\": [\n\t\t595,\n\t\t7,\n\t\t595\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 529;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \"-\" + {\"12\":\"e60bae7fd6bed3865ebd\",\"69\":\"c0468391939b2ccbf25d\",\"304\":\"ccc6e4cf8218ed5136d7\",\"346\":\"94a9129298a2b1f10d21\",\"446\":\"c1075e313d82c1bae242\",\"595\":\"ab0534da15976842763e\",\"866\":\"9b7761053fcdd8f59adf\",\"872\":\"8add46b88fdff8be15ec\",\"883\":\"c85793bacdb38e138bcf\",\"981\":\"ab2c84f50cd9de665798\"}[chunkId] + \".min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t296: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgraphPlayground\"] = self[\"webpackChunkgraphPlayground\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(238)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","Worker_fn","Worker","makeAndPrintGreedyColoring","myName","UIInteractions","isRunning","printAlreadyRunning","possibleColorModes","possibleColorModesArray","$modal","values","modal","orderingMode","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","e","a","data","cleanup","stopLoadingAnimation","chromaticNumber","colors","p","vertexOrder","forEach","v","i","historyToPrint","history","p2","window","settings","getOption","step","length","curNode","nodeToColor","colAdjList","colorsOfNeighbors","neighbor","nb","main","applyColors","send","type","args","convertToGraphImmut","graph","graphState","getGraphData","label","optionText","Object","keys","optionValues","initialValue","makeAndPrintkColoringExact","mode","constrainedColoring","options","validationFunc","push","kColor","numberOfSteps","color","given","toString","kColorable","bestChrNumber","Math","min","totalSteps","replace","id","listener","this","worker","postMessage","onmessage","terminate","getAlgorithms","name","directional","applyFunc","display","registerListeners","makeSimpleClickListener","selector","fn","document","querySelector","addEventListener","preventDefault","printAbout","terminateAllWebWorkers","printOptions","default","Complete","Cycle","Wheel","RandomGraph","Hypercube","Custom","getAllDegrees","checkGraphColoring","undo","redo","shuffleNetworkLayout","makeImportFileModal","makeExportFileModalJSON","makeImportGraphExercise","setGraphBackground","innerText","printHelp","vals","changeOption","network","setOptions","edges","smooth","G","setData","nextIndex","WorkerProxy","prog","getElementById","style","n","Promise","reject","resolve","degrees","maxDegree","printGAD","maxDegrees","from","to","num","confList","printCC","conflist","resetgraphColoringGreedy","makeAndPrintgraphColoringWelsh","printGC","JSON","stringify","makeAndPrintDirectionalEulerian","scc","makeAndPrintEulerian","ignoreDuplicate","cc","makeAndPrintFFMCMF","source","sink","cb","maxFlow","flowPath","flow","capacity","trim","nodeLabelIDValidator","makeAndPrintKruskal","totalWeight","mst","EdgeImmut","getFrom","getTo","makeAndPrintIsCyclic","makeAndPrintTopologicalSort","slice","printGraphAlgorithms","$div","innerHTML","weighted","addAlgoToPane","alg","navlink","createElement","classList","add","setAttribute","appendChild","then","ui","Network","loadDefault","s","localStorage","getItem","jsonGraph","parse","predefined","WheelDefault","weight","extraAttrs","filter","key","includes","reduce","obj","attributes","freeze","parseFloat","getWeight","getAttribute","attribute","getAllAttributes","toPlain","toReturn","editEdge","newWeight","assign","filterExtraAttr","labels","filterNodeExtraAttr","nodes","directed","nodeMap","Error","newNodes","floor","set","map","genericNodesToImmutNodes","numNodes","size","newEdges","edge","genericEdgesToImmutEdges","numEdges","GraphImmut","getNode","rich","node","get","getNodeForColor","getNonDefaultColor","customColorPalleteArrayNonDefault","getID","currentColor","indexOf","addNode","editNode","has","getLabel","deleteNode","nodeCount","addEdge","deleteEdge","deleteAll","foundOneEdge","oldWeight","foundFirst","index","isDirected","getAllNodes","toArray","getAllNodesAsImmutableList","getAllEdgesAsImmutableList","getAllEdges","getNumberOfNodes","getNumberOfEdges","getAllOutDegrees","_","getAllInOutDegrees","asWeighted","asUnweighted","asDirected","doubleEdges","asUndirected","addedEdges","asChangedDirectedWeighted","getNodeAdjacency","adj","getFullAdjacency","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","multiEdges","uniques","Set","acc","keep","duplicateEdge","isWeighted","capitalLetters","NodeImmut","getInt","parseInt","setUpToDate","value","listOptions","all","property","GraphState","upToDate","always","makeAndPrintProperties","getProperty","updateIfNotUpdated","find","state","graphProperties","recalcLong","vertices","printableProperties","printGraphPropertiesSimple","properties","printGraphProperties","console","log","k","updateGraph","clearColorFromNodes","clearColorFromEdges","resetColor","saveState","repaint","edgeFrom","edgeTo","x","y","iId","newGraph","checkAdjacency","nodeFrom","nodeTo","nodeIDToLabel","nodeLabelToID","toLowerCase","rID","found","getGraphAsDataSet","d","DataSet","setLocations","locations","clearNodeColors","clearEdgeColors","workerPool","backHistory","forwardHistory","maxHistory","stronglyConnectedComponents","connectedComponents","graphColoringGreedy","colormode","Languages","current","setLanguage","DE","self","container","visWeightEdgeEdit","callback","visOptions","inherit","border","background","highlight","hover","interaction","manipulation","customColors","stringReplacement","generateLabelFromNumber","customColorPallete","$popup","on","saveData","first","val","cancelEdit","remove","initialColor","getOwnPropertyNames","alert","addEdgeMode","body","weightFromLabel","operation","undefined","coloring","graphKColorable","graphColors","basicColors","addColors","count","luminosity","recalcProps","graphChanged","rearrangeGraph","g","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","saveStateLocalStorage","getStateForSaving","getElementsByClassName","item","parentElement","Array","isArray","applyState","newState","firstLoad","currentState","oldKey","checkForLocalStorage","setItem","r","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","nodeId","newColor","lastNetworkClickEvent","event","contains","target","deleteSelected","ctrlKey","shiftKey","removeItem","saveSettings","Settings","loadSettings","setAll","physics","arrows","editWithoutDrag","option","defaults","nodePhysics","direction","weights","smoothEdges","fastColorChange","stepByStepInfo","defaultCancelCb","deepCopy","deep","clone","copy","src","copyIsArray","isPlainObject","call","proto","getPrototypeOf","Ctor","hasOwnProperty","constructor","arguments","deepFreeze","o","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","keepOnlyKeys","getFileExtension","filename","split","splice","htmlEncode","string","t","textContent","printout","text","escape","flatten","rotate","max","iterable","b","toTitleCase","str","match","toUpperCase","replacements","replacement","showSimpleModal","title","showFormModal","makeFormModal","successText","cancelText","form","footer","f","class","formRow","basicMap","attrname","validFunc","generalValidator","valueMutator","$v","valid","removeClass","next","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","oText","oIndex","selected","$footer","tabindex","role","html","off","last","trigger","successCb","cancelCb","hasErrors","each","tagName","attr","files","hasClass","findVertexDegreesDirectional","adjacencyMatrix","out","in","outV","interpolateNodesFromEdges","prelabel","compareColor","color1","color2","toggleNodeColor","customColorPalleteArray","currentIndex","currentColorString","checkColoringByNumber","V","vertexAdjacency","nextColorIsSafe","curColor","webpackAsyncContext","req","__webpack_require__","code","ids","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","result","chunkIds","priority","notFulfilled","fulfilled","j","every","getter","__esModule","ns","create","def","definition","defineProperty","enumerable","chunkId","promises","u","globalThis","Function","prototype","l","url","done","script","needAttach","scripts","getElementsByTagName","charset","timeout","nc","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","Symbol","toStringTag","nmd","paths","children","installedChunks","installedChunkData","promise","error","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}