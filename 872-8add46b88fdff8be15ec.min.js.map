{"version":3,"file":"872-8add46b88fdff8be15ec.min.js","mappings":"8IAAA,SAEIA,cAAe,iBACfC,cAAe,qBACfC,oBAAqB,wBACrBC,aAAc,0DACdC,mBAAoB,iCACpBC,oBAAqB,wBACrBC,sBAAuB,0BACvBC,iCAAkC,yBAClCC,oBAAqB,uBACrBC,4BAA6B,gCAC7BC,IAAK,8BACLC,SAAU,yBACVC,YAAa,6BACbC,cAAe,iBACfC,2BAA4B,gCAC5BC,WAAY,gCACZC,OAAQ,SACRC,SAAU,mBACVC,SAAU,WACVC,OAAQ,SAERC,aAAc,gBACdC,cAAe,iBACfC,kBAAmB,qPAInBC,iBAAkB,qBAClBC,qBAAsB,8IAEtBC,kBAAmB,uGAEnBC,eAAgB,+BAChBC,gBAAiB,6BACjBC,qBAAsB,uBACtBC,iBAAkB,yBAClBC,UAAW,eACXC,WAAY,eACZC,gBAAiB,oBACjBC,iBAAkB,8BAClBC,4BAA6B,mBAC7BC,kBAAmB,0BACnBC,qBAAsB,sDACtBC,mCAAoC,0CACpCC,gBAAiB,0BACjBC,qBAAsB,qCACtBC,YAAa,mBACbC,WAAY,uBACZC,cAAe,kBACfC,WAAY,cACZC,UAAW,aAEXC,aAAc,qCACdC,aAAc,qCACdC,UAAW,iCACXC,UAAW,iCAEXC,OAAQ,cACRC,OAAQ,SACRC,OAAQ,YACRC,OAAQ,YACRC,OAAQ,WACRC,OAAQ,UACRC,OAAQ,YAERC,SAAU,WACVC,MAAO,QAEPC,iBAAkB,yBAClBC,kBAAmB,uBACnBC,wBAAyB,gDACzBC,kBAAmB,6FACnBC,0BAA2B,8FAC3BC,iBAAkB,yDAClBC,gBAAiB,0BACjBC,yBAA0B,+BAC1BC,iBAAkB,uIAClBC,mBAAoB,8CACpBC,yBAA0B,wCAC1BC,yBAA0B,sDAC1BC,2BAA4B,uDAC5BC,0BAA2B,uFAC3BC,mBAAoB,gCACpBC,iBAAkB,oDAClBC,oBAAqB,oEACrBC,qBAAsB,8EACtBC,IAAK,QACLC,OAAQ,YACRC,oBAAqB,oEACrBC,kBAAmB,0FACnBC,kBAAmB,yHACnBC,cAAe,wDACfC,KAAM,QACNC,eAAgB,mBAChBC,cAAe,kDACfC,iBAAkB,yCAClBC,4BAA6B,0QAC7BC,mBAAoB,sDACpBC,mBAAoB,0CACpBC,sBAAuB,mDAGvBC,UAAW,aACXC,QAAS,WACTC,WAAY,cACZC,SAAU,YACVC,GAAI,KACJC,KAAM,OACNC,WAAY,QACZC,MAAO,kCACPC,mBAAoB,uBACpBC,uBAAwB,6DACxBC,QAAS,UACTC,KAAM,OACNC,OAAQ,SACRC,WAAY,wRAIZC,UAAW,8UAIXC,aAAc,gBACdC,QAAS,iBACTC,cAAe,iBACfC,iBAAkB,wBAClBC,YAAa,eACbC,gBAAiB,sCACjBC,eAAgB,gDAChBC,SAAU,YACVC,QAAS,mCACTC,YAAa,mJACbC,KAAM,gBACNC,WAAY,cACZC,WAAY,cACZC,WAAY,cACZC,WAAY,cACZC,uBAAwB,2BACxBC,eAAgB,mBAChBC,iBAAkB,mBAClBC,cAAe,eACfC,aAAc,sBACdC,eAAgB,gCAChBC,aAAc,uBACdC,UAAW,oBACXC,UAAW,oBACXC,cAAe,wBACfC,WAAY,qBACZC,WAAY,qBACZC,WAAY,aACZC,gBAAiB,mBACjBC,QAAS,UACTC,QAAS,WACTC,SAAU,YACVC,SAAU,YACVC,eAAgB,kBAChBC,WAAY,QACZC,OAAQ,cACRC,MAAO,QACPC,gCAAiC,6CACjCC,yBAA0B,2CAC1BC,sBAAuB,yCACvBC,iBAAkB,sBAIlBC,gBAAiB,oBACjBC,oBAAqB,qEACrBC,eAAgB,mBAChBC,mBAAoB,iDACpBC,iBAAkB,qBAClBC,qBAAsB,qEACtBC,0BAA2B,yBAC3BC,uBAAwB,4BACxBC,oBAAqB,yBACrBC,oBAAqB,yBACrBC,OAAQ,SACRC,aAAc,iBACdC,eAAgB,mBAChBC,kBAAmB,uBACnBC,kBAAmB,uBACnBC,OAAQ,SACRC,UAAW,aACXC,WAAY,cACZC,oBAAqB,+BAGrBC,0BAA2B,8BAC3BC,uBAAwB,2BACxBC,uBAAwB,2BACxBC,sBAAuB,qBACvBC,2BAA4B,2BAC5BC,iCAAkC,0CAClCC,4BAA6B,6CAC7BC,2BAA4B,uDAC5BC,wBAAyB,4BACzBC,0BAA2B,wDAC3BC,kBAAmB,qBACnBC,2BAA4B,+BAC5BC,wBAAyB,uBACzBC,mCAAoC,4CACpCC,wBAAyB,yCAGzBC,UAAW,CACP,GAAM,GAEN,GAAI,CACAC,KAAM,OACNC,IAAK,kBACLC,KAAM,OACNC,QAAS,WACTC,QAAS,WACTC,SAAU,YACVC,SAAU,YACVC,eAAgB,+CAChBC,gBAAiB,qEACjBC,oBAAqB,wEACrBC,gBAAiB,kCACjBC,mBAAoB,8BACpBC,iBAAkB","sources":["webpack://graphPlayground/./src/EN_US.ts"],"sourcesContent":["export default {\n    // Algorithms\n    CheckColoring: \"Check Coloring\",\n    GetAllDegrees: \"Get Vertex Degrees\",\n    GraphColoringGreedy: \"Graph Coloring Greedy\",\n    ColoringMode: \"Select the mode, in which the nodes should get colored:\",\n    GraphColoringWelsh: \"Graph Coloring by Welsh-Powell\",\n    kColoringBruteForce: \"k-Coloring Bruteforce\",\n    kColoringBacktracking: \"k-Coloring Backtracking\",\n    kColoringConstrainedBacktracking: \"Constrained k-Coloring\",\n    ConnectedComponents: \"Connected Components\",\n    StronglyConnectedComponents: \"Strongly Connected Components\",\n    BFS: \"Breadth-First Shortest Path\",\n    Dijkstra: \"Dijkstra Shortest Path\",\n    BellmanFord: \"Bellman-Ford Shortest Path\",\n    FordFulkerson: \"Ford-Fulkerson\",\n    FordFulkersonMaxFlowMinCut: \"Ford-Fulkerson MaxFlow-MinCut\",\n    KruskalMST: \"Kruskal Minimum Spanning Tree\",\n    Cyclic: \"Cyclic\",\n    TopoSort: \"Topological Sort\",\n    Eulerian: \"Eulerian\",\n    Vertex: \"Vertex\",\n\n    ShortestPath: \"Shortest Path\",\n    DijkstraError: \"Dijkstra Error\",\n    DijkstraErrorHTML: \"<p>The Dijkstra algorithm only works on graphs\" +\n        \" with totally non-negative edge weights. Please fix the graph so that there are no\" +\n        \" negative edge weights.</p><p>Alternatively, try the Bellman-Ford algorithm which solves\" +\n        \" exactly this problem.</p>\",\n    BellmanFordError: \"Bellman-Ford Error\",\n    BellmanFordErrorHTML: \"<p>The Bellman-Ford algorithm only works on graphs\" +\n        \" with no negative edge-weight cycles. Please remove the negative cycle and try again.</p>\",\n    TopoSortErrorHTML: \"<h3>Topological Sorting Failed</h3><hr>Topological sorting failed because the graph contains a cycle\",\n\n    NoPathFromAToB: \"No path exists from $1 to $2\",\n    MaxFlowFromAToB: \"Max flow from $1 to $2: $3\",\n    ShortestPathFromAToB: \"$1 From $2 to $3: $4\",\n    WithWeightedCost: \"With weighted cost: $1\",\n    UsingPath: \"Using path: \",\n    UsingEdges: \"Using edges:\",\n    UsingCapacities: \"Using capacities:\",\n    FlowWithCapacity: \"$1 &rarr; $2 using $3 of $4\",\n    NumberOfConnectedComponents: \"Number of $1: $2\",\n    NumberOfConflicts: \"Number of conflicts: $1\",\n    NodeIsInConflictWith: \"$1.) Colors of node $2 and node $3 are in conflict.\",\n    VertexIsInConnectedComponentNumber: \"Vertex $1 is in connected component #$2\",\n    VertexHasDegree: \"Vertex $1 has degree $2\",\n    GraphHasVertexDegree: \"Graph has maximal vertex degree $1\",\n    BuildGraphs: \"Build New Graphs\",\n    LoadGraphs: \"Load Exercise Graphs\",\n    SetBackground: \"Load Background\",\n    GraphTools: \"Graph Tools\",\n    StopTasks: \"Stop Tasks\",\n\n    IncNodeLabel: \"Ordered by Node Label (increasing)\",\n    DecNodeLabel: \"Ordered by Node Label (decreasing)\",\n    IncDegree: \"Ordered by Degree (increasing)\",\n    DecDegree: \"Ordered by Degree (decreasing)\",\n\n    Color0: \"not colored\",\n    Color1: \"1: red\",\n    Color2: \"2: orange\",\n    Color3: \"3: yellow\",\n    Color4: \"4: green\",\n    Color5: \"5: blue\",\n    Color6: \"6: violet\",\n\n    Vertices: \"Vertices\",\n    Edges: \"Edges\",\n    \n    NumberOfVertices: \"Number of Vertices: $1\",\n    ChromaticNumberIs: \"Chromatic Number: $1\",\n    ApproxChromaticNumberIs: \"Approx. Chromatic Number (as upper bound): $1\",\n    GreedyWorkedOrder: \"Greedy algorithm working in the mode '$1' resulting in the following ordering of vertices:\",\n    IfDesiredActiveStepByStep: \"If desired, activate 'Step-by-Step Info' in the 'Options' and rerun the coloring algorithm.\",\n    StepByStepOutput: \"Step-by-Step output: ('color 0' means not yet colored)\",\n    VertexGetsColor: \"Vertex $1 gets color $2\",\n    VertexGetsThereforeColor: \"Vertex $1 gets thus color $2\",\n    RecolorAddColors: \"The coloring needs more than the six standard colors. Choose randomly new variantes of the additional colors by pressing the button.\",\n    GraphColoringTitle: \"Graph Coloring Using Welsh-Powell Algorithm\",\n    GraphColoringGreedyTitle: \"Graph Coloring Using Greedy Algorithm\",\n    kColoringBruteForceTitle: \"Check if the graph is k-colorable using Brute Force\",\n    kColoringBacktrackingTitle: \"Check if the graph is k-colorable using Backtracking\",\n    kColoringConstrainedTitle: \"Check if the graph is k-colorable constrained by some given color using Backtracking\",\n    kColoringParameter: \"Check k-colorability for k = \",\n    kColoringSuccess: \"Positive answer: The given graph is $1-colorable.\",\n    kColoringTerminated: \"The coloring algorithm terminated after $1 tested configurations.\",\n    FollowingConstraints: \"The following constraints on the colors of vertices where made by the user:\",\n    Has: \" has \",\n    MustBe: \" must be \",\n    kColoringCheckedAll: \"The coloring algorithm checked $1 configurations without success.\",\n    kColoringDocStep1: \"Documentation of the maximally the first $1 configurations (step-by-step) as requested:\",\n    kColoringDocStep2: \"List indicates the colors of all vertices: 0 = not colored; 1 = Color 1; 2 = Color 2; ...) sorted by their IDs, i.e., \",\n    kColoringFail: \"Negative answer: The given graph is NOT $1-colorable.\",\n    Step: \"Step \",\n    NumberOfColors: \"Number of colors\",\n    NumberOfSteps: \"Number of steps documented by step-by-step info\",\n    CompleteColoring: \"Complete the manually started coloring\",\n    CompleteColoringExplanation: \"If you have already chosen manually the color of some vertices (red, orange, yellow, green or violet (BUT NOT blue), the backtracking algorithm can try to find a coloring, while not changing the already colored vertices. AGAIN: In this mode BLUE means NOT COLORED\",\n    CheckColoringTitle: \"Checked admissibilty of the current vertex coloring\",\n    GetAllDegreesTitle: \"The vertices have the following degree:\",\n    KruskalMSTTotalWeight: \"Kruskal's Minimum Spanning Tree Total Weight: $1\",\n\n    // UI\n    StartNode: \"Start Node\",\n    EndNode: \"End Node\",\n    SourceNode: \"Source Node\",\n    SinkNode: \"Sink Node\",\n    Go: \"Go\",\n    Help: \"Help\",\n    AboutShort: \"About\",\n    About: \"About Graph Coloring Playground\",\n    TaskAlreadyRunning: \"Task Already Running\",\n    TaskAlreadyRunningBody: \"$1 is already running, please wait for it to finish first.\",\n    Options: \"Options\",\n    Save: \"Save\",\n    Cancel: \"Cancel\",\n    IssuesHTML: \"<h4>For support see the \" +\n        \"<a href='https://github.com/MikeDombo/graphPlayground' target='_blank'>GitHub repository</a>\" +\n        \" for guides</h4> <h4>See <a href='https://github.com/MikeDombo/graphPlayground/issues' target='_blank'>\" +\n        \"GitHub issues</a> to submit bugs or feature requests.</h4>\",\n    AboutHTML: \"<i>Electronic tool for learning Graph coloring, based on <a href='https://github.com/MikeDombo/graphPlayground' target='_blank'>GraphPlayground</a>\" + \n        \" by Michael Dombrowski. For school material see \" +\n        \"<a href='https://www.abz.inf.ethz.ch/maturitatsschulen/unterrichtsmaterialien/' target='_blank'>ABZ Webpage</a>. </i>\" +\n        \" Martin Huber, 2022\",\n    GraphPhysics: \"Graph Physics\",\n    DiGraph: \"Directed Graph\",\n    WeightedGraph: \"Weighted Graph\",\n    CustomNodeColors: \"Customize Node Colors\",\n    SmoothEdges: \"Smooth Edges\",\n    FastColorChange: \"Change vertex color by double click\",\n    StepByStepInfo: \"Get step-by-step info for coloring algorithms\",\n    ThisTask: \"This task\",\n    ReColor: \"Generate new non-standard colors\",\n    ReColorInfo: \"As the coloring needs more than the six standard colors additional randomly chosen colors are used. To change their appearence press the button.\",\n    File: \"Import/Export\",\n    ImportFile: \"Import File\",\n    ImportText: \"Import Text\",\n    ExportFile: \"Export File\",\n    ExportText: \"Export Text\",\n    CalculateAllProperties: \"Calculate All Properties\",\n    NewGraphLayout: \"New Graph Layout\",\n    LoadDefaultColor: \"Reset Node Color\",\n    ExampleGraphs: \"Build Graphs\",\n    LoadPetersen: \"Load Petersen Graph\",\n    LoadKonigsberg: \"Load Königsberg Bridges Graph\",\n    LoadComplete: \"Build Complete Graph\",\n    LoadCycle: \"Build Cycle Graph\",\n    LoadWheel: \"Build Wheel Graph\",\n    LoadHypercube: \"Build Hypercube Graph\",\n    LoadCustom: \"Build Custom Graph\",\n    LoadRandom: \"Build Random Graph\",\n    Algorithms: \"Algorithms\",\n    GraphProperties: \"Graph Properties\",\n    Results: \"Results\",\n    AddNode: \"Add Node\",\n    EditEdge: \"Edit Edge\",\n    EditNode: \"Edit Node\",\n    WeightCapacity: \"Weight/Capacity\",\n    LabelLabel: \"Label\",\n    NodeId: \"Node ID: $1\",\n    Color: \"Color\",\n    ConnectNodeToItselfConfirmation: \"Do you want to connect the node to itself?\",\n    ConnectNodeToItselfAlert: \"Connect a node to itself is not allowed!\",\n    AlreadyConnectedNodes: \"These two nodes are already connected.\",\n    InvalidLabelOrId: \"Invalid Label or ID\",\n\n\n    // Import/Export\n    DataImportError: \"Data Import Error\",\n    DataImportErrorText: \"The provided input does not conform the the import specifications.\",\n    JsonParseError: \"JSON Parse Error\",\n    JsonParseErrorText: \"There was an error parsing your input as JSON.\",\n    DimacsParseError: \"DIMACS Parse Error\",\n    DimacsParseErrorText: \"Sorry, but I only know how to parse \\\"edge\\\" formatted DIMACS files.\",\n    DimacsParseErrorNoProgram: \"No program line found!\",\n    UnrecognizedInputError: \"Unrecognized Input Format\",\n    ImportGraphFromText: \"Import Graph From Text\",\n    ImportGraphFromFile: \"Import Graph From File\",\n    Import: \"Import\",\n    ExportToJson: \"Export to JSON\",\n    ExportToDimacs: \"Export to DIMACS\",\n    ExportGraphToFile: \"Export Graph To File\",\n    ExportGraphToText: \"Export Graph To Text\",\n    Format: \"Format\",\n    InputText: \"Input Text\",\n    UploadFile: \"Upload File\",\n    MustChooseFileError: \"You must choose a file first\",\n\n    // Predefined Graphs\n    ConfigurableCompleteGraph: \"Configurable Complete Graph\",\n    ConfigurableCycleGraph: \"Configurable Cycle Graph\",\n    ConfigurableWheelGraph: \"Configurable Wheel Graph\",\n    NumberOfVerticesLabel: \"Number of Vertices\",\n    NumberOfOuterVerticesLabel: \"Number of Outer Vertices\",\n    NumberOfVerticesNonNegativeError: \"Number of vertices must be non-negative\",\n    NumberOfColorsPositiveError: \"Number of colors must be strictly positive\",\n    NumberOfStepsPositiveError: \"Number of documented steps must be strictly positive\",\n    ConfigurableRandomGraph: \"Configurable Random Graph\",\n    PercentageOfVerticesLabel: \"Probability in percents for an edge between two nodes\",\n    ConfigurableGraph: \"Configurable Graph\",\n    ConfigurableHypercubeGraph: \"Configurable Hypercube Graph\",\n    NumberOfDimensionsLabel: \"Number of Dimensions\",\n    NumberOfDimensionsNonNegativeError: \"Number of dimensions must be non-negative\",\n    NumberOfPercentageError: \"Percentage has to be between 0 and 100\",\n\n    // VisJS locale\n    VisLocale: {\n        \"en\": {}, // Required, even though we will not use it.\n        // Customize the text below...\n        \"\": {\n            edit: 'Edit',\n            del: 'Delete selected',\n            back: 'Back',\n            addNode: 'Add Node',\n            addEdge: 'Add Edge',\n            editNode: 'Edit Node',\n            editEdge: 'Edit Edge',\n            addDescription: 'Click in an empty space to place a new node.',\n            edgeDescription: 'Click on a node and drag the edge to another node to connect them.',\n            editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',\n            createEdgeError: 'Cannot link edges to a cluster.',\n            deleteClusterError: 'Clusters cannot be deleted.',\n            editClusterError: 'Clusters cannot be edited.'\n        }\n    }\n};\n"],"names":["CheckColoring","GetAllDegrees","GraphColoringGreedy","ColoringMode","GraphColoringWelsh","kColoringBruteForce","kColoringBacktracking","kColoringConstrainedBacktracking","ConnectedComponents","StronglyConnectedComponents","BFS","Dijkstra","BellmanFord","FordFulkerson","FordFulkersonMaxFlowMinCut","KruskalMST","Cyclic","TopoSort","Eulerian","Vertex","ShortestPath","DijkstraError","DijkstraErrorHTML","BellmanFordError","BellmanFordErrorHTML","TopoSortErrorHTML","NoPathFromAToB","MaxFlowFromAToB","ShortestPathFromAToB","WithWeightedCost","UsingPath","UsingEdges","UsingCapacities","FlowWithCapacity","NumberOfConnectedComponents","NumberOfConflicts","NodeIsInConflictWith","VertexIsInConnectedComponentNumber","VertexHasDegree","GraphHasVertexDegree","BuildGraphs","LoadGraphs","SetBackground","GraphTools","StopTasks","IncNodeLabel","DecNodeLabel","IncDegree","DecDegree","Color0","Color1","Color2","Color3","Color4","Color5","Color6","Vertices","Edges","NumberOfVertices","ChromaticNumberIs","ApproxChromaticNumberIs","GreedyWorkedOrder","IfDesiredActiveStepByStep","StepByStepOutput","VertexGetsColor","VertexGetsThereforeColor","RecolorAddColors","GraphColoringTitle","GraphColoringGreedyTitle","kColoringBruteForceTitle","kColoringBacktrackingTitle","kColoringConstrainedTitle","kColoringParameter","kColoringSuccess","kColoringTerminated","FollowingConstraints","Has","MustBe","kColoringCheckedAll","kColoringDocStep1","kColoringDocStep2","kColoringFail","Step","NumberOfColors","NumberOfSteps","CompleteColoring","CompleteColoringExplanation","CheckColoringTitle","GetAllDegreesTitle","KruskalMSTTotalWeight","StartNode","EndNode","SourceNode","SinkNode","Go","Help","AboutShort","About","TaskAlreadyRunning","TaskAlreadyRunningBody","Options","Save","Cancel","IssuesHTML","AboutHTML","GraphPhysics","DiGraph","WeightedGraph","CustomNodeColors","SmoothEdges","FastColorChange","StepByStepInfo","ThisTask","ReColor","ReColorInfo","File","ImportFile","ImportText","ExportFile","ExportText","CalculateAllProperties","NewGraphLayout","LoadDefaultColor","ExampleGraphs","LoadPetersen","LoadKonigsberg","LoadComplete","LoadCycle","LoadWheel","LoadHypercube","LoadCustom","LoadRandom","Algorithms","GraphProperties","Results","AddNode","EditEdge","EditNode","WeightCapacity","LabelLabel","NodeId","Color","ConnectNodeToItselfConfirmation","ConnectNodeToItselfAlert","AlreadyConnectedNodes","InvalidLabelOrId","DataImportError","DataImportErrorText","JsonParseError","JsonParseErrorText","DimacsParseError","DimacsParseErrorText","DimacsParseErrorNoProgram","UnrecognizedInputError","ImportGraphFromText","ImportGraphFromFile","Import","ExportToJson","ExportToDimacs","ExportGraphToFile","ExportGraphToText","Format","InputText","UploadFile","MustChooseFileError","ConfigurableCompleteGraph","ConfigurableCycleGraph","ConfigurableWheelGraph","NumberOfVerticesLabel","NumberOfOuterVerticesLabel","NumberOfVerticesNonNegativeError","NumberOfColorsPositiveError","NumberOfStepsPositiveError","ConfigurableRandomGraph","PercentageOfVerticesLabel","ConfigurableGraph","ConfigurableHypercubeGraph","NumberOfDimensionsLabel","NumberOfDimensionsNonNegativeError","NumberOfPercentageError","VisLocale","edit","del","back","addNode","addEdge","editNode","editEdge","addDescription","edgeDescription","editEdgeDescription","createEdgeError","deleteClusterError","editClusterError"],"sourceRoot":""}