{"version":3,"file":"69-f5855291187ac96a9b87.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/GraphAlgorithms.ts","webpack://graphPlayground/./src/js/classes/SpanningTree.ts","webpack://graphPlayground/./src/js/workers/GraphAlgorithmWorker.ts"],"sourcesContent":["\"use strict\";\n\nimport genericH from \"./util/genericHelpers\";\nimport graphH from \"./util/graphHelpers\";\nimport SpanningTree from \"./classes/SpanningTree\";\nimport EdgeImmut, { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport GraphState from \"./graphState\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport graphHelpers from \"./util/graphHelpers\";\n\ntype EdgeFlowProp = { from: number; to: number; capacity: number; flow: number };\nexport type MSTResult = { mst: EdgeImmutPlain[]; totalWeight: number };\nexport type FlowResult = { maxFlow: number; flowPath: EdgeFlowProp[] };\nexport type ShortestPathResult = {\n    pathExists: boolean;\n    path: number[];\n    distance: number;\n    cost?: number;\n    weight?: number;\n};\nexport type ConnectedComponentResult = { components: { [key: number]: number }; count: number };\n\nexport type CheckingColorResult = { from: number[]; to: number[]; num: number; confList: number[][]};\n\nexport type GetDegreesResult = { degrees: number[] };\n\nexport type kColorResult = { kColor: number; kColorable: boolean; color: number[]; totalSteps: number; history: number[][]};\n\nexport type kColorResultRecursive = { kColorable: boolean; color: number[]; totalSteps: number; history: number[][]};\n\nexport default class GraphAlgorithms {\n    public static graphPlainToGraphImmut = (gp: GraphPlain): GraphImmut => {\n        return new GraphImmut(gp.nodes, gp.edges, gp.directed, gp.weighted);\n    };\n\n\n    // // Coloring with brute force\n    // public static colorBruteForce = (G: GraphImmut = GraphState.graph) : {colors: {}; chromaticNumber: number} => {\n\n    //     // start with degree + 1\n\n    //     // check if k-colorable with brute force\n\n    // }\n\n    // Check, if a coloring is admissible\n    public static checkColoringByString = (G: GraphImmut = GraphState.graph): CheckingColorResult => {\n\n        const nodes = G.getAllNodes(true) as NodeImmut[];\n\n        const conflictStartID: number[] = [];\n        const conflictEndID: number[] = [];\n        const conflictList : number[][] = [];\n\n\n        const V = G.getNumberOfNodes();\n        for (let v = 0; v < V; v++) {\n            const vertexAdjacency = G.getNodeAdjacency(v);\n            const currentColor = nodes[v].getAttribute('color');\n\n            //console.log(\"Vertex with ID\" + v);\n            //console.log(\"has adjacency: \" + vertexAdjacency);\n\n            for (const i of vertexAdjacency) {\n                const conflict  = graphH.compareColor(currentColor, nodes[i].getAttribute('color'));\n                if (conflict && i > v) {\n                    conflictStartID.push(v);\n                    conflictEndID.push(i);\n                    conflictList.push([v, i]);\n                }\n            }\n        }\n        \n        const numOfConflicts = conflictStartID.length;\n\n        return { from: conflictStartID, to: conflictEndID,  num: numOfConflicts, confList: conflictList};\n\n    }\n\n    public static getAllDegreesWrapper = (G: GraphImmut = GraphState.graph): GetDegreesResult => {\n        \n        const arr1 = G.getAllInOutDegrees();\n        // const arr = [...arr1];\n\n        // // console.log(arr1);\n        // console.log(arr);\n        \n        return { degrees: arr1 };\n    }\n\n    public static colorNetworkGreedy = (orderingMode: string, G: GraphImmut = GraphState.graph): { colors: {}; vertexOrder: number[]; chromaticNumber: number; history: { nodeToColor: number; colorsOfNeighbors: { [key: number]: number; }; }[]} => {\n        \n        const V = G.getNumberOfNodes();\n        \n        // Get node ID's only\n        const nodeArr: number[] = genericH.datasetToArray(G.getAllNodes(), \"id\") as number[];\n\n        const degrees = G.getAllInOutDegrees();\n        const nodeArrLabel: string[] = genericH.datasetToArray(G.getAllNodes(), \"label\") as string[];\n\n        // console.log(nodeArr);\n        // console.log(degrees);\n\n        // Put vertices in array in decreasing order of degree\n        \n        // console.log(orderingMode);\n        // console.log(nodeArr);\n        // console.log(nodeArrLabel);\n\n        let vertexOrder: number[] = [];\n\n        if (orderingMode === \"1\") {\n            // Put vertices in the increasing order of their label.\n            vertexOrder = genericH.sort(nodeArr, (a, b) => {\n                return (nodeArrLabel[a].toLowerCase()).localeCompare(nodeArrLabel[b].toLowerCase());\n            });\n            // console.log(\"Ordering 1\");\n        }\n        else if (orderingMode === \"2\") {\n            // Put vertices in the decreasing order of their id.\n            vertexOrder = genericH.sort(nodeArr, (a, b) => {\n                return (-1)* (nodeArrLabel[a].toLowerCase()).localeCompare(nodeArrLabel[b].toLowerCase());\n            });\n            // console.log(\"Ordering 2\");\n        }\n        else if (orderingMode === \"3\") {\n            // Put vertices in array in decreasing order of degree            \n            vertexOrder = genericH.sort(nodeArr, (a, b) => {\n                return degrees[a] > degrees[b] ? 1 : (degrees[a] === degrees[b] ? 0 : -1);\n            });\n            \n            // console.log(\"Ordering 3\");\n        }\n        else if (orderingMode === \"4\") {\n            // Put vertices in array in decreasing order of degree\n            vertexOrder = genericH.sort(nodeArr, (a, b) => {\n                return degrees[a] < degrees[b] ? 1 : (degrees[a] === degrees[b] ? 0 : -1);\n            });\n            // console.log(\"Ordering 4\");\n        }\n        else {\n            console.log(\"No valid orderingMode\");\n            // console.log(typeof orderingMode);\n            // console.log(orderingMode);\n        }\n        // console.log(vertexOrder);\n        \n\n        const history = [];\n        const colors = {};\n\n        const colorIndex: { [key: number]: number } = {};\n\n        // initalize vertices as unassigned\n        for (let i=0; i < V; i++) {\n            colorIndex[i] = -1;\n        }\n\n        // only for history\n        const vertexAdjacency = G.getNodeAdjacency(vertexOrder[0]);\n        const coloredAdjacencyList: { [key: number]: number } = {};\n        for (const index in vertexAdjacency) {\n            coloredAdjacencyList[vertexAdjacency[index]] = colorIndex[vertexAdjacency[index]];\n        }\n        history.push({nodeToColor: vertexOrder[0], colorsOfNeighbors: coloredAdjacencyList});\n\n        // set color for first node to 0\n        colorIndex[vertexOrder[0]] = 0;\n\n        for (let curPos=1; curPos < V; curPos++){\n\n            const vertexAdjacency = G.getNodeAdjacency(vertexOrder[curPos]);\n            const coloredAdjacencyList: { [key: number]: number } = {};\n            for (const index in vertexAdjacency) {\n                coloredAdjacencyList[vertexAdjacency[index]] = colorIndex[vertexAdjacency[index]];\n            }\n            // create history\n            history.push({nodeToColor: vertexOrder[curPos], colorsOfNeighbors: coloredAdjacencyList});\n\n            //\n            const allUsedColors= Object.values(coloredAdjacencyList);\n            const ref :{ [key: number]: boolean } = {};\n    \n            let minimalMissingColor  = 0;\n            \n            for (const value of allUsedColors) {\n                if (value < minimalMissingColor) {\n                    continue;\n                }\n                ref[value] = true;\n\n                while (ref[minimalMissingColor]) {\n                    minimalMissingColor++;\n                }\n            }\n            // console.log(\"==============\");\n            // console.log(\"Current Node: \" + curPos);\n            // console.log(vertexAdjacency);\n            // console.log(coloredAdjacencyList);\n            // console.log(allUsedColors);\n            // console.log(\"Minimal missing color: \" + minimalMissingColor);\n\n            colorIndex[vertexOrder[curPos]] = minimalMissingColor;\n\n            // console.log(colorIndex);\n\n        }\n\n        const chromaticNumber = genericH.max(genericH.flatten(colorIndex) as any[]) + 1;\n        // return { colors: colorIndex, chromaticNumber, history};\n        return { colors: colorIndex, vertexOrder, chromaticNumber, history };\n    };\n\n    // Welsh-Powell Algorithm\n    public static colorNetworkWelsh = (G: GraphImmut = GraphState.graph): { colors: {}; chromaticNumber: number} => {\n        // Get node ID's only\n        const nodeArr: number[] = genericH.datasetToArray(G.getAllNodes(), \"id\") as number[];\n\n        // Put vertices in array in decreasing order of degree\n        const degrees = G.getAllOutDegrees();\n        const vertexOrder = genericH.sort(nodeArr, (a, b) => {\n            return degrees[a] < degrees[b] ? 1 : degrees[a] === degrees[b] ? 0 : -1;\n        });\n\n        const colorIndex: { [key: number]: number } = {};\n        let currentColor = 0;\n        while (vertexOrder.length > 0) {\n            const root = vertexOrder.shift()!;\n            colorIndex[root] = currentColor;\n\n            const myGroup = [];\n            myGroup.push(root);\n\n            for (let i = 0; i < vertexOrder.length; ) {\n                const p = vertexOrder[i];\n                let conflict = false;\n                \n                for (let j = 0; j < myGroup.length; j++) {\n                    if (G.areAdjacent(p, myGroup[j])) {\n                        i++;\n                        conflict = true;\n                        break;\n                    }\n                }\n                if (conflict) {\n                    continue;\n                }\n\n                colorIndex[p] = currentColor;\n                myGroup.push(p);\n                vertexOrder.splice(i, 1);\n            }\n\n            currentColor++;\n        }\n\n        const chromaticNumber = genericH.max(genericH.flatten(colorIndex) as any[]) + 1;\n        return { colors: colorIndex, chromaticNumber};\n    };\n\n    \n\n    public static kColoringBruteForce = (kColor: number, numberOfSteps: number, G: GraphImmut = GraphState.graph): kColorResult => {\n\n        const kColoringBruteForceRecursive = (kColor: number, curNode: number, color: number[], G: GraphImmut, totalSteps: number, maxHist: number, history: number[][]): kColorResultRecursive => {\n            \n            const V = G.getNumberOfNodes();\n            \n            // console.log(\"CurNode: \" + curNode + \" with colors \" + color);\n\n            if (curNode === V) {\n                const check = graphHelpers.checkColoringByNumber(color, G);\n                totalSteps += 1;\n                if (totalSteps <= maxHist) {\n                    history.push([...color]);\n                }\n                if (check) {            \n                    return { kColorable: true, color, totalSteps, history};\n                }\n                else {\n                    return { kColorable: false, color: [], totalSteps, history};\n                }\n            }\n    \n            for (let j=0; j < kColor; j++) {\n                color[curNode] = j;\n    \n                const recAnswer = kColoringBruteForceRecursive(kColor, curNode+1, color, G, totalSteps, maxHist, history);\n    \n                if (recAnswer.kColorable) {\n                    return recAnswer;\n                }\n    \n                color[curNode] = -1;\n                totalSteps = recAnswer.totalSteps;\n                history = recAnswer.history;\n    \n            }\n    \n            return { kColorable: false, color: [], totalSteps, history};\n    \n        }\n\n        // console.log(\"Graph \" + G);\n\n        const V = G.getNumberOfNodes();\n\n        // console.log(V);\n\n        const color = new Array(V).fill(-1);\n\n        const history : number[][] = [];\n\n\n        const recAnswer = kColoringBruteForceRecursive(kColor, 0, color, G, 0, numberOfSteps, history);\n\n        if (recAnswer.kColorable) {\n            return { kColor, kColorable: true, color: recAnswer.color, totalSteps: recAnswer.totalSteps, history };\n        }\n\n        return { kColor, kColorable: false, color: [], totalSteps: recAnswer.totalSteps, history };\n    }\n\n    public static kColoringBacktracking = (kColor: number, numberOfSteps: number, G: GraphImmut = GraphState.graph): kColorResult => {\n\n        const kColoringBacktrackingRecursive = (kColor: number, curNode: number, color: number[], G: GraphImmut, totalSteps: number, maxHist: number, history: number[][]): kColorResultRecursive => {\n            \n            const V = G.getNumberOfNodes();\n            \n            // console.log(\"CurNode: \" + curNode + \" with colors \" + color);\n\n            if (curNode === V) {\n                return { kColorable: true, color, totalSteps, history};\n            }\n\n            for (let j = 0; j < kColor; j++) {\n                \n                totalSteps++;\n\n                const check = graphHelpers.nextColorIsSafe(curNode, G, color, j);\n                let colorHistory = [...color];\n                colorHistory[curNode] = j;\n\n                if (totalSteps <= maxHist) {\n                    history.push([...colorHistory]);\n                }\n\n                if (check) {\n                    color[curNode] = j;\n\n                    const recAnswer = kColoringBacktrackingRecursive(kColor, curNode+1, color, G, totalSteps, maxHist, history);\n\n                    if (recAnswer.kColorable) {\n                        return recAnswer;\n                    }\n\n                    totalSteps = recAnswer.totalSteps;\n                    history = recAnswer.history;\n\n                }\n                    \n                color[curNode] = -1;\n\n            }\n\n            // for (let j=1; j <= kColor; j++) {\n            //     color[curNode] = j;\n    \n            //     const recAnswer = kColoringBacktrackingRecursive(kColor, curNode+1, color, G, totalSteps, maxHist, history);\n    \n            //     if (recAnswer.kColorable) {\n            //         return recAnswer;\n            //     }\n    \n            //     color[curNode] = 0;\n            //     totalSteps = recAnswer.totalSteps;\n            //     history = recAnswer.history;\n    \n            // }\n    \n            return { kColorable: false, color: [], totalSteps, history};\n    \n        }\n\n        // console.log(\"Graph \" + G);\n\n        const V = G.getNumberOfNodes();\n\n        // console.log(V);\n\n        const color = new Array(V).fill(-1);\n\n        const history : number[][] = [];\n\n\n        const recAnswer = kColoringBacktrackingRecursive(kColor, 0, color, G, 0, numberOfSteps, history);\n\n        console.log(\"Finished Backtracking Algorithm\");\n\n        if (recAnswer.kColorable) {\n            return { kColor, kColorable: true, color: recAnswer.color, totalSteps: recAnswer.totalSteps, history };\n        }\n\n        return { kColor, kColorable: false, color: [], totalSteps: recAnswer.totalSteps, history };\n    }\n    \n\n\n    public static connectedComponents = (G: GraphImmut = GraphState.graph): ConnectedComponentResult => {\n        \n        // console.log(\"Hi, I'm connectedComponents\");\n        \n        const components: { [key: number]: number } = {};\n        let componentCount = 0;\n        const setComponentNum = (v: number) => {\n            components[v] = componentCount;\n        };\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\n            if (!(i in components)) {\n                const visited = GraphAlgorithms.depthFirstSearch(i, G);\n                visited.forEach(setComponentNum);\n                componentCount++;\n            }\n        }\n\n        return { components, count: componentCount };\n    };\n\n    public static depthFirstSearch = (start: number, G = GraphState.graph): number[] => {\n        const visisted: number[] = [];\n        const Stack: number[] = [];\n        Stack.push(start);\n        while (Stack.length > 0) {\n            const v = Stack.pop()!;\n            if (!visisted.includes(v)) {\n                visisted.push(v);\n                G.getNodeAdjacency(v).forEach(nodeID => {\n                    Stack.push(nodeID);\n                });\n            }\n        }\n\n        return visisted;\n    };\n\n    // Tarjan's algorithm\n    public static stronglyConnectedComponents = (G: GraphImmut = GraphState.graph): ConnectedComponentResult => {\n        let index = 0;\n        const indices: { [key: number]: number } = {};\n        const lowlink: { [key: number]: number } = {};\n        const S: number[] = [];\n        const components: { [key: number]: number } = {};\n        let componentCount = 0;\n\n        const strongConnect = (v: number) => {\n            indices[v] = index;\n            lowlink[v] = index++;\n            S.push(v);\n\n            G.getNodeAdjacency(v).forEach(w => {\n                if (!(w in indices)) {\n                    strongConnect(w);\n                    lowlink[v] = Math.min(lowlink[v], lowlink[w]);\n                } else if (S.includes(w)) {\n                    lowlink[v] = Math.min(lowlink[v], indices[w]);\n                }\n            });\n\n            if (lowlink[v] === indices[v]) {\n                let w = -1;\n                if (S.length > 0) {\n                    do {\n                        w = S.pop()!;\n                        components[w] = componentCount;\n                    } while (w !== v);\n                    componentCount++;\n                }\n            }\n        };\n\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\n            if (!(i in indices)) {\n                strongConnect(i);\n            }\n        }\n\n        return { components, count: componentCount };\n    };\n\n    public static breadthFirstSearch = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult => {\n        // Perform the BFS\n        const visisted: number[] = [];\n        const Q: number[] = []; // Use Push and Shift for Queue operations\n        const edgeTo: { [key: number]: number } = {};\n\n        Q.push(startNodeID);\n        while (Q.length > 0) {\n            const x = Q.shift()!;\n            if (!visisted.includes(x)) {\n                visisted.push(x);\n                G.getNodeAdjacency(x).forEach(y => {\n                    if (!visisted.includes(y)) {\n                        edgeTo[y] = x;\n                        Q.push(y);\n                    }\n                });\n            }\n        }\n\n        if (visisted.includes(targetNodeID)) {\n            // Build the path\n            const path = [];\n            for (let x = targetNodeID; x !== startNodeID; x = edgeTo[x]) {\n                path.push(x);\n            }\n            path.push(startNodeID);\n            path.reverse();\n\n            // Get the path weight\n            let weight = 0;\n            for (let i = 0; i < path.length - 1; i++) {\n                weight += G.getMinWeightEdgeBetween(path[i], path[i + 1]);\n            }\n\n            return { pathExists: true, path, distance: path.length, weight };\n        }\n\n        return { pathExists: false, path: [], distance: -1, weight: -1 };\n    };\n\n    public static dijkstraSearch = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult | boolean => {\n        if (!G.isDirected()) {\n            G = G.asDirected(true);\n        }\n        if (!G.isWeighted()) {\n            G = G.asWeighted();\n        }\n\n        const nonNegative = (G.getAllEdges(true) as EdgeImmut[]).find(edge => {\n            return edge.getWeight() < 0;\n        });\n        if (typeof nonNegative !== \"undefined\") {\n            return false;\n        }\n\n        // Priority Queue implementation for Dijkstra\n        class PriorityQueue {\n            private readonly _nodes: { key: number | string; priority: number }[] = [];\n\n            enqueue(priority: number, key: number): void {\n                this._nodes.push({ key, priority });\n                this.sort();\n            }\n\n            dequeue(): number | string {\n                return this._nodes.shift()!.key;\n            }\n\n            sort(): void {\n                this._nodes.sort((a: { priority: number }, b: { priority: number }) => {\n                    return a.priority - b.priority;\n                });\n            }\n\n            isEmpty(): boolean {\n                return !this._nodes.length;\n            }\n        }\n\n        const queue = new PriorityQueue();\n        const distances: { [key: number]: number } = {};\n        const previous: { [key: number]: number | null } = {};\n        let path = [];\n\n        // Initialize Queue and distances\n        (G.getAllNodes(true) as NodeImmut[]).forEach(node => {\n            let dist = Infinity;\n            if (node.getID() === startNodeID) {\n                dist = 0;\n            }\n\n            distances[node.getID()] = dist;\n            queue.enqueue(dist, node.getID());\n            previous[node.getID()] = null;\n        });\n\n        while (!queue.isEmpty()) {\n            let smallest = queue.dequeue() as number;\n\n            if (smallest === targetNodeID) {\n                path = [];\n                while (previous[smallest] !== null) {\n                    path.push(smallest);\n                    smallest = previous[smallest]!;\n                }\n                break;\n            }\n\n            if (distances[smallest] === Infinity) {\n                continue;\n            }\n\n            G.getNodeAdjacency(smallest).forEach(neighbor => {\n                const alt = distances[smallest] + G.getMinWeightEdgeBetween(smallest, neighbor);\n\n                if (alt < distances[neighbor]) {\n                    distances[neighbor] = alt;\n                    previous[neighbor] = smallest;\n\n                    queue.enqueue(alt, neighbor);\n                }\n            });\n        }\n\n        path.push(startNodeID);\n        path.reverse();\n\n        if (distances[targetNodeID] !== Infinity) {\n            return { pathExists: true, path, distance: path.length, cost: distances[targetNodeID] };\n        }\n\n        return { pathExists: false, path: [], distance: -1, cost: 0 };\n    };\n\n    public static bellmanFord = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult | boolean => {\n        const distances: number[] = [];\n        const parents: (number | null)[] = [];\n\n        // Initialize\n        (G.getAllNodes(true) as NodeImmut[]).forEach(node => {\n            distances[node.getID()] = Infinity;\n            parents[node.getID()] = null;\n        });\n\n        // Relax Edges\n        distances[startNodeID] = 0;\n        for (let i = 0; i < G.getNumberOfNodes() - 1; i++) {\n            (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n                if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\n                    distances[edge.getTo()] = distances[edge.getFrom()] + edge.getWeight();\n                    parents[edge.getTo()] = edge.getFrom();\n                }\n            });\n        }\n\n        // Check for negative weight cycles\n        let negativeCylce = false;\n        (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n            if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\n                negativeCylce = true;\n            }\n        });\n\n        if (distances[targetNodeID] !== Infinity) {\n            const path: number[] = [targetNodeID];\n            while (!path.includes(startNodeID)) {\n                path.push(parents[path.slice().pop()!] as number);\n            }\n            path.reverse();\n\n            return { pathExists: true, path, distance: path.length, cost: distances[targetNodeID] };\n        }\n\n        if (negativeCylce) {\n            return false;\n        }\n\n        return { pathExists: false, path: [], distance: -1, cost: 0 };\n    };\n\n    public static fordFulkerson = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): boolean | FlowResult => {\n        // Must be a directed graph\n        if (!G.isDirected()) {\n            return false;\n        }\n\n        // Source == sink\n        if (startNodeID === targetNodeID) {\n            return false;\n        }\n\n        const bfs = GraphAlgorithms.breadthFirstSearch(startNodeID, targetNodeID, G);\n        // No path from source to sink\n        if (!bfs.pathExists) {\n            return false;\n        }\n\n        // If we have a multigraph, then reduce the graph to have single edges with the sum of the capacities\n        G = G.reduceMultiGraph((a, b) => {\n            return a + b;\n        }, 0);\n\n        const V = G.getNumberOfNodes();\n        let value = 0;\n        let marked: boolean[] = [];\n        let edgeTo: (string | null)[] = [];\n\n        const edgeProperties: { [key: string]: EdgeFlowProp } = {};\n        (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n            edgeProperties[`${edge.getFrom()}_${edge.getTo()}`] = {\n                from: edge.getFrom(),\n                to: edge.getTo(),\n                capacity: edge.getWeight(),\n                flow: 0\n            };\n        });\n\n        const other = (e: string, x: number) => {\n            const edge = e.split(\"_\");\n            const a = parseInt(edge[0]);\n            const b = parseInt(edge[1]);\n            return x === a ? b : a;\n        };\n\n        const residualCapacity = (e: string, x: number) => {\n            const edge = e.split(\"_\");\n            const a = parseInt(edge[0]);\n            if (x === a) {\n                return edgeProperties[e].flow;\n            }\n            return edgeProperties[e].capacity - edgeProperties[e].flow;\n        };\n\n        const addResidualFlow = (e: string, x: number, deltaFlow: number) => {\n            const edge = e.split(\"_\");\n            const v = parseInt(edge[0]);\n            if (x === v) {\n                edgeProperties[e].flow -= deltaFlow;\n            } else {\n                edgeProperties[e].flow += deltaFlow;\n            }\n        };\n\n        const hasAugmentedPath = () => {\n            marked = [];\n            edgeTo = [];\n            for (let v = 0; v < V; ++v) {\n                marked.push(false);\n                edgeTo.push(null);\n            }\n\n            const queue = [];\n            queue.push(startNodeID);\n\n            marked[startNodeID] = true;\n            while (queue.length > 0) {\n                const v = queue.shift()!;\n                const vertexAdjacency = G.getNodeAdjacency(v);\n                for (const i of vertexAdjacency) {\n                    const e = `${v}_${i}`;\n                    const w = other(e, v);\n                    if (!marked[w] && residualCapacity(e, w) > 0) {\n                        edgeTo[w] = e;\n                        marked[w] = true;\n                        if (w === targetNodeID) {\n                            return true;\n                        }\n\n                        queue.push(w);\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        while (hasAugmentedPath()) {\n            let bottleneckValue = Infinity;\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x]!, x)) {\n                bottleneckValue = Math.min(bottleneckValue, residualCapacity(edgeTo[x]!, x));\n            }\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x]!, x)) {\n                addResidualFlow(edgeTo[x]!, x, bottleneckValue);\n            }\n            value += bottleneckValue;\n        }\n\n        const getFlows = (): EdgeFlowProp[] => {\n            const f: EdgeFlowProp[] = [];\n            for (let v = 0; v < V; v++) {\n                const vertexAdjacency = G.getNodeAdjacency(v);\n                for (const i of vertexAdjacency) {\n                    const e = `${v}_${i}`;\n                    if (edgeProperties[e].flow > 0) {\n                        f.push(edgeProperties[e]);\n                    }\n                }\n            }\n\n            return f;\n        };\n\n        return { maxFlow: value, flowPath: getFlows() };\n    };\n\n    public static kruskal = (G: GraphImmut = GraphState.graph): MSTResult => {\n        // If we have a multigraph, reduce it by using the minimum edge weights\n        G.reduceMultiGraph();\n\n        const Q: EdgeImmut[] = G.getAllEdges(true) as EdgeImmut[];\n\n        // Sort edges by weight so that they are added to the tree in the order of lowest possible weight\n        Q.sort((a, b) => {\n            return a.getWeight() - b.getWeight();\n        });\n\n        const kruskal: EdgeImmut[] = [];\n        const set = new SpanningTree(G.getNumberOfNodes());\n        while (Q.length > 0 && kruskal.length < G.getNumberOfNodes() - 1) {\n            const e = Q.shift()!;\n            if (!set.connected(e.getFrom(), e.getTo())) {\n                set.union(e.getFrom(), e.getTo());\n                kruskal.push(e);\n            }\n        }\n\n        // Get the total cost of the MST\n        const weight = kruskal.reduce((acc, e) => {\n            return acc + e.getWeight();\n        }, 0);\n\n        return { mst: (kruskal as any) as EdgeImmutPlain[], totalWeight: weight };\n    };\n\n    public static topologicalSort = (G: GraphImmut = GraphState.graph): boolean | NodeImmut[] => {\n        const adjacency = G.getFullAdjacency();\n        const degrees = graphH.findVertexDegreesDirectional(adjacency);\n\n        const L: NodeImmut[] = [];\n        const S: NodeImmut[] = (G.getAllNodes(true) as NodeImmut[]).filter(n => {\n            return degrees[n.getID()].in === 0;\n        });\n        let edges = G.getAllEdges(true) as EdgeImmut[];\n\n        while (S.length !== 0) {\n            const nodeN = S.pop()!;\n            L.push(nodeN);\n\n            const nodeNConnectedTo = adjacency[nodeN.getID()];\n\n            // Remove n to m edges for all nodes m\n            edges = edges.filter(edge => {\n                if (edge.getFrom() === nodeN.getID() && nodeNConnectedTo.includes(edge.getTo())) {\n                    degrees[edge.getTo()].in--;\n                    adjacency[nodeN.getID()] = adjacency[nodeN.getID()].filter(v => {\n                        return v !== edge.getTo();\n                    });\n                    return false;\n                }\n                return true;\n            });\n\n            // If m has no more incoming edges, add it to S\n            nodeNConnectedTo.forEach(mID => {\n                if (degrees[mID].in === 0) {\n                    S.push(G.getNode(mID, true) as NodeImmut);\n                }\n            });\n        }\n\n        return edges.length > 0 || L;\n    };\n\n    public static isGraphCyclic = (G: GraphImmut = GraphState.graph): boolean => {\n        // If the topological sorting returns true, then it failed, so the graph has a cycle\n        return GraphAlgorithms.topologicalSort(G) === true;\n    };\n\n    public static directionalEulerian = (directionalDegrees: { in: number; out: number }[], scc: number[]): boolean => {\n        let eulerian = true;\n        let component = -1;\n        directionalDegrees.forEach((deg, id) => {\n            if (deg.in !== deg.out) {\n                eulerian = false;\n            }\n            if (deg.in > 0) {\n                if (component === -1) {\n                    component = scc[id];\n                }\n                if (component !== scc[id]) {\n                    eulerian = false;\n                }\n            }\n        });\n\n        return eulerian;\n    };\n\n    public static hasEulerianCircuit = (degrees: number[], cc: number[]): boolean => {\n        const oddDegree = degrees.filter(v => {\n            return v % 2 !== 0;\n        });\n\n        // If any nodes have odd degree, we can short-circuit the algorithm because it cannot be Eulerian\n        if (oddDegree.length !== 0) {\n            return false;\n        }\n\n        let eulerian = true;\n        let component = -1;\n        degrees.forEach((v, i) => {\n            if (v !== 0) {\n                if (component === -1) {\n                    component = cc[i];\n                }\n                if (component !== cc[i]) {\n                    eulerian = false;\n                }\n            }\n        });\n\n        return eulerian;\n    };\n}\n","\"use strict\";\n\nexport default class SpanningTree {\n    private readonly id: number[];\n\n    constructor(V: number) {\n        this.id = [];\n        for (let v = 0; v < V; v++) {\n            this.id.push(v);\n        }\n    }\n\n    union(v: number, w: number) {\n        const q = this.root(v);\n        const p = this.root(w);\n\n        if (p !== q) {\n            this.id[p] = q;\n        }\n    }\n\n    root(q: number) {\n        while (this.id[q] !== q) {\n            q = this.id[q];\n        }\n        return q;\n    }\n\n    connected(v: number, w: number) {\n        return this.root(v) === this.root(w);\n    }\n}\n","import GraphAlgorithms from \"../GraphAlgorithms\";\nconst ctx: Worker = self as any;\n\nlet myID: number;\n\nfunction sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nctx.addEventListener(\"message\", async e => {\n    if (e.data.type === \"id\") {\n        myID = e.data.id;\n        return;\n    }\n    const args: any[] = e.data.args;\n    if (e.data.type === \"test\") {\n        await sleep(e.data.waitTime);\n        ctx.postMessage({ id: myID, data: \"DONE\" });\n        return;\n    }\n    if (\"convertToGraphImmut\" in e.data && e.data.convertToGraphImmut) {\n        args.push(GraphAlgorithms.graphPlainToGraphImmut(e.data.graph));\n        ctx.postMessage({ id: myID, data: (GraphAlgorithms as any)[e.data.type].apply(null, args) });\n    } else {\n        ctx.postMessage({ id: myID, data: (GraphAlgorithms as any)[e.data.type].apply(null, args) });\n    }\n});\n"],"names":["graphPlainToGraphImmut","gp","nodes","edges","directed","weighted","checkColoringByString","G","getAllNodes","conflictStartID","conflictEndID","conflictList","V","getNumberOfNodes","v","vertexAdjacency","getNodeAdjacency","currentColor","getAttribute","i","push","from","to","num","length","confList","getAllDegreesWrapper","degrees","getAllInOutDegrees","colorNetworkGreedy","orderingMode","nodeArr","nodeArrLabel","vertexOrder","a","b","toLowerCase","localeCompare","console","log","history","colorIndex","coloredAdjacencyList","index","nodeToColor","colorsOfNeighbors","curPos","ref","minimalMissingColor","Object","values","value","colors","chromaticNumber","colorNetworkWelsh","getAllOutDegrees","root","shift","myGroup","p","conflict","j","areAdjacent","splice","kColoringBruteForce","kColor","numberOfSteps","kColoringBruteForceRecursive","curNode","color","totalSteps","maxHist","check","kColorable","Array","fill","recAnswer","kColoringBacktracking","kColoringBacktrackingRecursive","colorHistory","connectedComponents","components","componentCount","setComponentNum","GraphAlgorithms","depthFirstSearch","forEach","count","start","visisted","Stack","pop","includes","nodeID","stronglyConnectedComponents","indices","lowlink","S","strongConnect","w","Math","min","breadthFirstSearch","startNodeID","targetNodeID","Q","edgeTo","x","y","path","reverse","weight","getMinWeightEdgeBetween","pathExists","distance","dijkstraSearch","isDirected","asDirected","isWeighted","asWeighted","getAllEdges","find","edge","getWeight","queue","_nodes","enqueue","priority","key","this","sort","dequeue","isEmpty","distances","previous","node","dist","Infinity","getID","smallest","neighbor","alt","cost","bellmanFord","parents","getFrom","getTo","negativeCylce","slice","fordFulkerson","reduceMultiGraph","marked","edgeProperties","capacity","flow","other","e","split","parseInt","residualCapacity","addResidualFlow","deltaFlow","hasAugmentedPath","bottleneckValue","maxFlow","flowPath","f","getFlows","kruskal","set","connected","union","reduce","acc","mst","totalWeight","topologicalSort","adjacency","getFullAdjacency","L","filter","n","in","nodeN","nodeNConnectedTo","mID","getNode","isGraphCyclic","directionalEulerian","directionalDegrees","scc","eulerian","component","deg","id","out","hasEulerianCircuit","cc","q","myID","ctx","self","addEventListener","data","type","args","ms","waitTime","Promise","resolve","setTimeout","postMessage","convertToGraphImmut","graph","apply"],"sourceRoot":""}