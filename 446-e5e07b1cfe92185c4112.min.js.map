{"version":3,"file":"446-e5e07b1cfe92185c4112.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/GraphAlgorithms.ts","webpack://graphPlayground/./src/js/classes/SpanningTree.ts"],"sourcesContent":["\"use strict\";\n\nimport genericH from \"./util/genericHelpers\";\nimport graphH from \"./util/graphHelpers\";\nimport SpanningTree from \"./classes/SpanningTree\";\nimport EdgeImmut, { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport GraphState from \"./graphState\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport graphHelpers from \"./util/graphHelpers\";\n\ntype EdgeFlowProp = { from: number; to: number; capacity: number; flow: number };\nexport type MSTResult = { mst: EdgeImmutPlain[]; totalWeight: number };\nexport type FlowResult = { maxFlow: number; flowPath: EdgeFlowProp[] };\nexport type ShortestPathResult = {\n    pathExists: boolean;\n    path: number[];\n    distance: number;\n    cost?: number;\n    weight?: number;\n};\nexport type ConnectedComponentResult = { components: { [key: number]: number }; count: number };\n\nexport type CheckingColorResult = { from: number[]; to: number[]; num: number; confList: number[][]};\n\nexport type kColorResult = { kColor: number; kColorable: boolean; color: number[]};\n\nexport type kColorResultRecursive = { kColorable: boolean; color: number[]};\n\nexport default class GraphAlgorithms {\n    public static graphPlainToGraphImmut = (gp: GraphPlain): GraphImmut => {\n        return new GraphImmut(gp.nodes, gp.edges, gp.directed, gp.weighted);\n    };\n\n\n    // // Coloring with brute force\n    // public static colorBruteForce = (G: GraphImmut = GraphState.graph) : {colors: {}; chromaticNumber: number} => {\n\n    //     // start with degree + 1\n\n    //     // check if k-colorable with brute force\n\n    // }\n\n    // Check, if a coloring is admissible\n    public static checkColoringByString = (G: GraphImmut = GraphState.graph): CheckingColorResult => {\n\n        const nodes = G.getAllNodes(true) as NodeImmut[];\n\n        const conflictStartID: number[] = [];\n        const conflictEndID: number[] = [];\n        const conflictList : number[][] = [];\n\n\n        const V = G.getNumberOfNodes();\n        for (let v = 0; v < V; v++) {\n            const vertexAdjacency = G.getNodeAdjacency(v);\n            const currentColor = nodes[v].getAttribute('color');\n\n            //console.log(\"Vertex with ID\" + v);\n            //console.log(\"has adjacency: \" + vertexAdjacency);\n\n            for (const i of vertexAdjacency) {\n                const conflict  = graphH.compareColor(currentColor, nodes[i].getAttribute('color'));\n                if (conflict && i > v) {\n                    conflictStartID.push(v);\n                    conflictEndID.push(i);\n                    conflictList.push([v, i]);\n                }\n            }\n        }\n        \n        const numOfConflicts = conflictStartID.length;\n\n        return { from: conflictStartID, to: conflictEndID,  num: numOfConflicts, confList: conflictList};\n\n    }\n\n    public static colorNetworkGreedy = (orderingMode: string, G: GraphImmut = GraphState.graph): { colors: {}; chromaticNumber: number; history: { nodeToColor: number; colorsOfNeighbors: { [key: number]: number; }; }[]} => {\n        \n        const V = G.getNumberOfNodes();\n        \n        // Get node ID's only\n        const nodes = G.getAllNodes(true) as NodeImmut[];\n        const nodeArr: number[] = genericH.datasetToArray(G.getAllNodes(), \"id\") as number[];\n\n        const degrees = G.getAllOutDegrees();\n        const nodeArrLabel: string[] = genericH.datasetToArray(G.getAllNodes(), \"label\") as string[];\n\n        // Put vertices in array in decreasing order of degree\n        \n        // console.log(orderingMode);\n        // console.log(nodeArr);\n        // console.log(nodeArrLabel);\n\n        let vertexOrder: number[] = [];\n\n        if (orderingMode === \"1\") {\n            // Put vertices in the increasing order of their label.\n            vertexOrder = genericH.sort(nodeArr, (a, b) => {\n                return (nodeArrLabel[a].toLowerCase()).localeCompare(nodeArrLabel[b].toLowerCase());\n            });\n            // console.log(\"Ordering 1\");\n        }\n        else if (orderingMode === \"2\") {\n            // Put vertices in the decreasing order of their id.\n            vertexOrder = genericH.sort(nodeArr, (a, b) => {\n                return (-1)* (nodeArrLabel[a].toLowerCase()).localeCompare(nodeArrLabel[b].toLowerCase());\n            });\n            // console.log(\"Ordering 2\");\n        }\n        else if (orderingMode === \"3\") {\n            // Put vertices in array in decreasing order of degree\n            \n            vertexOrder = genericH.sort(nodeArr, (a, b) => {\n                return degrees[a] < degrees[b] ? 1 : degrees[a] === degrees[b] ? 0 : -1;\n            });\n            // console.log(\"Ordering 3\");\n        }\n        else if (orderingMode === \"4\") {\n            // Put vertices in array in decreasing order of degree\n            const degrees = G.getAllOutDegrees();\n            vertexOrder = genericH.sort(nodeArr, (a, b) => {\n                return degrees[a] > degrees[b] ? 1 : degrees[a] === degrees[b] ? 0 : -1;\n            });\n            // console.log(\"Ordering 4\");\n        }\n        else {\n            console.log(\"No valid orderingMode\");\n            // console.log(typeof orderingMode);\n            // console.log(orderingMode);\n        }\n        // console.log(vertexOrder);\n        \n\n        const history = [];\n        const colors = {};\n\n        const colorIndex: { [key: number]: number } = {};\n\n        // initalize vertices as unassigned\n        for (let i=0; i < V; i++) {\n            colorIndex[i] = -1;\n        }\n\n        // only for history\n        const vertexAdjacency = G.getNodeAdjacency(vertexOrder[0]);\n        const coloredAdjacencyList: { [key: number]: number } = {};\n        for (const index in vertexAdjacency) {\n            coloredAdjacencyList[vertexAdjacency[index]] = colorIndex[vertexAdjacency[index]];\n        }\n        history.push({nodeToColor: vertexOrder[0], colorsOfNeighbors: coloredAdjacencyList});\n\n        // set color for first node to 0\n        colorIndex[vertexOrder[0]] = 0;\n\n        for (let curPos=1; curPos < V; curPos++){\n\n            const vertexAdjacency = G.getNodeAdjacency(vertexOrder[curPos]);\n            const coloredAdjacencyList: { [key: number]: number } = {};\n            for (const index in vertexAdjacency) {\n                coloredAdjacencyList[vertexAdjacency[index]] = colorIndex[vertexAdjacency[index]];\n            }\n            // create history\n            history.push({nodeToColor: vertexOrder[curPos], colorsOfNeighbors: coloredAdjacencyList});\n\n            //\n            const allUsedColors= Object.values(coloredAdjacencyList);\n            const ref :{ [key: number]: boolean } = {};\n    \n            let minimalMissingColor  = 0;\n            \n            for (const value of allUsedColors) {\n                if (value < minimalMissingColor) {\n                    continue;\n                }\n                ref[value] = true;\n\n                while (ref[minimalMissingColor]) {\n                    minimalMissingColor++;\n                }\n            }\n            // console.log(\"==============\");\n            // console.log(\"Current Node: \" + curPos);\n            // console.log(vertexAdjacency);\n            // console.log(coloredAdjacencyList);\n            // console.log(allUsedColors);\n            // console.log(\"Minimal missing color: \" + minimalMissingColor);\n\n            colorIndex[vertexOrder[curPos]] = minimalMissingColor;\n\n            // console.log(colorIndex);\n\n        }\n\n        // let currentColor = 0;\n        // while (vertexOrder.length > 0) {\n        //     const root = vertexOrder.shift()!;\n        //     colorIndex[root] = currentColor;\n\n        //     const myGroup = [];\n        //     myGroup.push(root);\n\n        //     // START: only generate step by step info\n        //     const vertexAdjacency = G.getNodeAdjacency(root);\n        //     const coloredAdjacencyList: { [key: number]: number } = {};\n        //     for (const neighbor in vertexAdjacency) {\n        //         coloredAdjacencyList[neighbor] = nodes[neighbor].getAttribute('color');\n        //     }\n        //     history.push({nodeToColor: root, colorsOfNeighbors: coloredAdjacencyList})\n        //     // END: only generate step by step info\n\n        //     for (let i = 0; i < vertexOrder.length; ) {\n        //         const p = vertexOrder[i];\n        //         let conflict = false;\n                \n        //         for (let j = 0; j < myGroup.length; j++) {\n        //             if (G.areAdjacent(p, myGroup[j])) {\n        //                 i++;\n        //                 conflict = true;\n        //                 break;\n        //             }\n        //         }\n        //         if (conflict) {\n        //             continue;\n        //         }\n\n        //         colorIndex[p] = currentColor;\n        //         myGroup.push(p);\n        //         vertexOrder.splice(i, 1);\n        //     }\n\n        //     currentColor++;\n        // }\n\n        const chromaticNumber = genericH.max(genericH.flatten(colorIndex) as any[]) + 1;\n        // return { colors: colorIndex, chromaticNumber, history};\n        return { colors: colorIndex, chromaticNumber, history };\n    };\n\n    // Welsh-Powell Algorithm\n    public static colorNetworkWelsh = (G: GraphImmut = GraphState.graph): { colors: {}; chromaticNumber: number} => {\n        // Get node ID's only\n        const nodeArr: number[] = genericH.datasetToArray(G.getAllNodes(), \"id\") as number[];\n\n        // Put vertices in array in decreasing order of degree\n        const degrees = G.getAllOutDegrees();\n        const vertexOrder = genericH.sort(nodeArr, (a, b) => {\n            return degrees[a] < degrees[b] ? 1 : degrees[a] === degrees[b] ? 0 : -1;\n        });\n\n        const colorIndex: { [key: number]: number } = {};\n        let currentColor = 0;\n        while (vertexOrder.length > 0) {\n            const root = vertexOrder.shift()!;\n            colorIndex[root] = currentColor;\n\n            const myGroup = [];\n            myGroup.push(root);\n\n            for (let i = 0; i < vertexOrder.length; ) {\n                const p = vertexOrder[i];\n                let conflict = false;\n                \n                for (let j = 0; j < myGroup.length; j++) {\n                    if (G.areAdjacent(p, myGroup[j])) {\n                        i++;\n                        conflict = true;\n                        break;\n                    }\n                }\n                if (conflict) {\n                    continue;\n                }\n\n                colorIndex[p] = currentColor;\n                myGroup.push(p);\n                vertexOrder.splice(i, 1);\n            }\n\n            currentColor++;\n        }\n\n        const chromaticNumber = genericH.max(genericH.flatten(colorIndex) as any[]) + 1;\n        return { colors: colorIndex, chromaticNumber};\n    };\n\n    \n\n    public static kColoringBruteForce = (kColor: number, G: GraphImmut = GraphState.graph): kColorResult => {\n        // export type kColorResult = { kColor: number; kColorable: boolean; color: number[]};\n    \n        // console.log(\"Hi there. I'm kColoringBruteForce\");\n        // console.log(GraphState.state);\n\n        const kColoringBruteForceRecursive = (kColor: number, curNode: number, color: number[], G: GraphImmut): kColorResultRecursive => {\n            //function graphColoring(graph,m,i,color)\n            // {\n            const V = G.getNumberOfNodes();\n            \n            // console.log(\"CurNode: \" + curNode + \" with colors \" + color);\n\n            if (curNode === V) {\n                const check = graphHelpers.checkColoringByNumber(color, G);\n                if (check) {            \n                    return { kColorable: true, color };\n                }\n                else {\n                    return { kColorable: false, color: [] };\n                }\n            }\n    \n            for (let j=1; j <= kColor; j++) {\n                color[curNode] = j;\n    \n                const recAnswer = kColoringBruteForceRecursive(kColor, curNode+1, color, G);\n    \n                if (recAnswer.kColorable) {\n                    return recAnswer;\n                }\n    \n                color[curNode] = 0;\n    \n            }\n    \n            return { kColorable: false, color: []};\n    \n        }\n\n        // console.log(\"Graph \" + G);\n\n        const V = G.getNumberOfNodes();\n\n        // console.log(V);\n\n        const color = new Array(V).fill(0);\n\n        // console.log(\"Soon starting the recursive algorithm. Start \")\n\n        const recAnswer = kColoringBruteForceRecursive(kColor, 0, color, G);\n\n        if (recAnswer.kColorable) {\n            return { kColor, kColorable: true, color: recAnswer.color };\n        }\n\n        return { kColor, kColorable: false, color: []};\n    }\n\n    // public static kColoringBruteForceRecursive = (kColor: number, curNode: number, color: number[], G: GraphImmut = GraphState.graph): kColorResultRecursive => {\n    //     //function graphColoring(graph,m,i,color)\n    //     // {\n    //     const V = G.getNumberOfNodes();\n        \n    //     if (curNode === V) {\n    //         const check = this.checkColoringByNumber(color);\n    //         if (check) {            \n    //             return { kColorable: true, color };\n    //         }\n    //         else {\n    //             return { kColorable: false, color: [] };\n    //         }\n    //     }\n\n    //     for (let j=1; j <= kColor; j++) {\n    //         color[curNode] = j;\n\n    //         const recAnswer = this.kColoringBruteForceRecursive(kColor, curNode+1, color);\n\n    //         if (recAnswer.kColorable) {\n    //             return recAnswer;\n    //         }\n\n    //         color[curNode] = 0;\n\n    //     }\n\n    //     return { kColorable: false, color: []};\n\n    // }\n    \n\n\n    public static connectedComponents = (G: GraphImmut = GraphState.graph): ConnectedComponentResult => {\n        \n        // console.log(\"Hi, I'm connectedComponents\");\n        \n        const components: { [key: number]: number } = {};\n        let componentCount = 0;\n        const setComponentNum = (v: number) => {\n            components[v] = componentCount;\n        };\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\n            if (!(i in components)) {\n                const visited = GraphAlgorithms.depthFirstSearch(i, G);\n                visited.forEach(setComponentNum);\n                componentCount++;\n            }\n        }\n\n        return { components, count: componentCount };\n    };\n\n    public static depthFirstSearch = (start: number, G = GraphState.graph): number[] => {\n        const visisted: number[] = [];\n        const Stack: number[] = [];\n        Stack.push(start);\n        while (Stack.length > 0) {\n            const v = Stack.pop()!;\n            if (!visisted.includes(v)) {\n                visisted.push(v);\n                G.getNodeAdjacency(v).forEach(nodeID => {\n                    Stack.push(nodeID);\n                });\n            }\n        }\n\n        return visisted;\n    };\n\n    // Tarjan's algorithm\n    public static stronglyConnectedComponents = (G: GraphImmut = GraphState.graph): ConnectedComponentResult => {\n        let index = 0;\n        const indices: { [key: number]: number } = {};\n        const lowlink: { [key: number]: number } = {};\n        const S: number[] = [];\n        const components: { [key: number]: number } = {};\n        let componentCount = 0;\n\n        const strongConnect = (v: number) => {\n            indices[v] = index;\n            lowlink[v] = index++;\n            S.push(v);\n\n            G.getNodeAdjacency(v).forEach(w => {\n                if (!(w in indices)) {\n                    strongConnect(w);\n                    lowlink[v] = Math.min(lowlink[v], lowlink[w]);\n                } else if (S.includes(w)) {\n                    lowlink[v] = Math.min(lowlink[v], indices[w]);\n                }\n            });\n\n            if (lowlink[v] === indices[v]) {\n                let w = -1;\n                if (S.length > 0) {\n                    do {\n                        w = S.pop()!;\n                        components[w] = componentCount;\n                    } while (w !== v);\n                    componentCount++;\n                }\n            }\n        };\n\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\n            if (!(i in indices)) {\n                strongConnect(i);\n            }\n        }\n\n        return { components, count: componentCount };\n    };\n\n    public static breadthFirstSearch = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult => {\n        // Perform the BFS\n        const visisted: number[] = [];\n        const Q: number[] = []; // Use Push and Shift for Queue operations\n        const edgeTo: { [key: number]: number } = {};\n\n        Q.push(startNodeID);\n        while (Q.length > 0) {\n            const x = Q.shift()!;\n            if (!visisted.includes(x)) {\n                visisted.push(x);\n                G.getNodeAdjacency(x).forEach(y => {\n                    if (!visisted.includes(y)) {\n                        edgeTo[y] = x;\n                        Q.push(y);\n                    }\n                });\n            }\n        }\n\n        if (visisted.includes(targetNodeID)) {\n            // Build the path\n            const path = [];\n            for (let x = targetNodeID; x !== startNodeID; x = edgeTo[x]) {\n                path.push(x);\n            }\n            path.push(startNodeID);\n            path.reverse();\n\n            // Get the path weight\n            let weight = 0;\n            for (let i = 0; i < path.length - 1; i++) {\n                weight += G.getMinWeightEdgeBetween(path[i], path[i + 1]);\n            }\n\n            return { pathExists: true, path, distance: path.length, weight };\n        }\n\n        return { pathExists: false, path: [], distance: -1, weight: -1 };\n    };\n\n    public static dijkstraSearch = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult | boolean => {\n        if (!G.isDirected()) {\n            G = G.asDirected(true);\n        }\n        if (!G.isWeighted()) {\n            G = G.asWeighted();\n        }\n\n        const nonNegative = (G.getAllEdges(true) as EdgeImmut[]).find(edge => {\n            return edge.getWeight() < 0;\n        });\n        if (typeof nonNegative !== \"undefined\") {\n            return false;\n        }\n\n        // Priority Queue implementation for Dijkstra\n        class PriorityQueue {\n            private readonly _nodes: { key: number | string; priority: number }[] = [];\n\n            enqueue(priority: number, key: number): void {\n                this._nodes.push({ key, priority });\n                this.sort();\n            }\n\n            dequeue(): number | string {\n                return this._nodes.shift()!.key;\n            }\n\n            sort(): void {\n                this._nodes.sort((a: { priority: number }, b: { priority: number }) => {\n                    return a.priority - b.priority;\n                });\n            }\n\n            isEmpty(): boolean {\n                return !this._nodes.length;\n            }\n        }\n\n        const queue = new PriorityQueue();\n        const distances: { [key: number]: number } = {};\n        const previous: { [key: number]: number | null } = {};\n        let path = [];\n\n        // Initialize Queue and distances\n        (G.getAllNodes(true) as NodeImmut[]).forEach(node => {\n            let dist = Infinity;\n            if (node.getID() === startNodeID) {\n                dist = 0;\n            }\n\n            distances[node.getID()] = dist;\n            queue.enqueue(dist, node.getID());\n            previous[node.getID()] = null;\n        });\n\n        while (!queue.isEmpty()) {\n            let smallest = queue.dequeue() as number;\n\n            if (smallest === targetNodeID) {\n                path = [];\n                while (previous[smallest] !== null) {\n                    path.push(smallest);\n                    smallest = previous[smallest]!;\n                }\n                break;\n            }\n\n            if (distances[smallest] === Infinity) {\n                continue;\n            }\n\n            G.getNodeAdjacency(smallest).forEach(neighbor => {\n                const alt = distances[smallest] + G.getMinWeightEdgeBetween(smallest, neighbor);\n\n                if (alt < distances[neighbor]) {\n                    distances[neighbor] = alt;\n                    previous[neighbor] = smallest;\n\n                    queue.enqueue(alt, neighbor);\n                }\n            });\n        }\n\n        path.push(startNodeID);\n        path.reverse();\n\n        if (distances[targetNodeID] !== Infinity) {\n            return { pathExists: true, path, distance: path.length, cost: distances[targetNodeID] };\n        }\n\n        return { pathExists: false, path: [], distance: -1, cost: 0 };\n    };\n\n    public static bellmanFord = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult | boolean => {\n        const distances: number[] = [];\n        const parents: (number | null)[] = [];\n\n        // Initialize\n        (G.getAllNodes(true) as NodeImmut[]).forEach(node => {\n            distances[node.getID()] = Infinity;\n            parents[node.getID()] = null;\n        });\n\n        // Relax Edges\n        distances[startNodeID] = 0;\n        for (let i = 0; i < G.getNumberOfNodes() - 1; i++) {\n            (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n                if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\n                    distances[edge.getTo()] = distances[edge.getFrom()] + edge.getWeight();\n                    parents[edge.getTo()] = edge.getFrom();\n                }\n            });\n        }\n\n        // Check for negative weight cycles\n        let negativeCylce = false;\n        (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n            if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\n                negativeCylce = true;\n            }\n        });\n\n        if (distances[targetNodeID] !== Infinity) {\n            const path: number[] = [targetNodeID];\n            while (!path.includes(startNodeID)) {\n                path.push(parents[path.slice().pop()!] as number);\n            }\n            path.reverse();\n\n            return { pathExists: true, path, distance: path.length, cost: distances[targetNodeID] };\n        }\n\n        if (negativeCylce) {\n            return false;\n        }\n\n        return { pathExists: false, path: [], distance: -1, cost: 0 };\n    };\n\n    public static fordFulkerson = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): boolean | FlowResult => {\n        // Must be a directed graph\n        if (!G.isDirected()) {\n            return false;\n        }\n\n        // Source == sink\n        if (startNodeID === targetNodeID) {\n            return false;\n        }\n\n        const bfs = GraphAlgorithms.breadthFirstSearch(startNodeID, targetNodeID, G);\n        // No path from source to sink\n        if (!bfs.pathExists) {\n            return false;\n        }\n\n        // If we have a multigraph, then reduce the graph to have single edges with the sum of the capacities\n        G = G.reduceMultiGraph((a, b) => {\n            return a + b;\n        }, 0);\n\n        const V = G.getNumberOfNodes();\n        let value = 0;\n        let marked: boolean[] = [];\n        let edgeTo: (string | null)[] = [];\n\n        const edgeProperties: { [key: string]: EdgeFlowProp } = {};\n        (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n            edgeProperties[`${edge.getFrom()}_${edge.getTo()}`] = {\n                from: edge.getFrom(),\n                to: edge.getTo(),\n                capacity: edge.getWeight(),\n                flow: 0\n            };\n        });\n\n        const other = (e: string, x: number) => {\n            const edge = e.split(\"_\");\n            const a = parseInt(edge[0]);\n            const b = parseInt(edge[1]);\n            return x === a ? b : a;\n        };\n\n        const residualCapacity = (e: string, x: number) => {\n            const edge = e.split(\"_\");\n            const a = parseInt(edge[0]);\n            if (x === a) {\n                return edgeProperties[e].flow;\n            }\n            return edgeProperties[e].capacity - edgeProperties[e].flow;\n        };\n\n        const addResidualFlow = (e: string, x: number, deltaFlow: number) => {\n            const edge = e.split(\"_\");\n            const v = parseInt(edge[0]);\n            if (x === v) {\n                edgeProperties[e].flow -= deltaFlow;\n            } else {\n                edgeProperties[e].flow += deltaFlow;\n            }\n        };\n\n        const hasAugmentedPath = () => {\n            marked = [];\n            edgeTo = [];\n            for (let v = 0; v < V; ++v) {\n                marked.push(false);\n                edgeTo.push(null);\n            }\n\n            const queue = [];\n            queue.push(startNodeID);\n\n            marked[startNodeID] = true;\n            while (queue.length > 0) {\n                const v = queue.shift()!;\n                const vertexAdjacency = G.getNodeAdjacency(v);\n                for (const i of vertexAdjacency) {\n                    const e = `${v}_${i}`;\n                    const w = other(e, v);\n                    if (!marked[w] && residualCapacity(e, w) > 0) {\n                        edgeTo[w] = e;\n                        marked[w] = true;\n                        if (w === targetNodeID) {\n                            return true;\n                        }\n\n                        queue.push(w);\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        while (hasAugmentedPath()) {\n            let bottleneckValue = Infinity;\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x]!, x)) {\n                bottleneckValue = Math.min(bottleneckValue, residualCapacity(edgeTo[x]!, x));\n            }\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x]!, x)) {\n                addResidualFlow(edgeTo[x]!, x, bottleneckValue);\n            }\n            value += bottleneckValue;\n        }\n\n        const getFlows = (): EdgeFlowProp[] => {\n            const f: EdgeFlowProp[] = [];\n            for (let v = 0; v < V; v++) {\n                const vertexAdjacency = G.getNodeAdjacency(v);\n                for (const i of vertexAdjacency) {\n                    const e = `${v}_${i}`;\n                    if (edgeProperties[e].flow > 0) {\n                        f.push(edgeProperties[e]);\n                    }\n                }\n            }\n\n            return f;\n        };\n\n        return { maxFlow: value, flowPath: getFlows() };\n    };\n\n    public static kruskal = (G: GraphImmut = GraphState.graph): MSTResult => {\n        // If we have a multigraph, reduce it by using the minimum edge weights\n        G.reduceMultiGraph();\n\n        const Q: EdgeImmut[] = G.getAllEdges(true) as EdgeImmut[];\n\n        // Sort edges by weight so that they are added to the tree in the order of lowest possible weight\n        Q.sort((a, b) => {\n            return a.getWeight() - b.getWeight();\n        });\n\n        const kruskal: EdgeImmut[] = [];\n        const set = new SpanningTree(G.getNumberOfNodes());\n        while (Q.length > 0 && kruskal.length < G.getNumberOfNodes() - 1) {\n            const e = Q.shift()!;\n            if (!set.connected(e.getFrom(), e.getTo())) {\n                set.union(e.getFrom(), e.getTo());\n                kruskal.push(e);\n            }\n        }\n\n        // Get the total cost of the MST\n        const weight = kruskal.reduce((acc, e) => {\n            return acc + e.getWeight();\n        }, 0);\n\n        return { mst: (kruskal as any) as EdgeImmutPlain[], totalWeight: weight };\n    };\n\n    public static topologicalSort = (G: GraphImmut = GraphState.graph): boolean | NodeImmut[] => {\n        const adjacency = G.getFullAdjacency();\n        const degrees = graphH.findVertexDegreesDirectional(adjacency);\n\n        const L: NodeImmut[] = [];\n        const S: NodeImmut[] = (G.getAllNodes(true) as NodeImmut[]).filter(n => {\n            return degrees[n.getID()].in === 0;\n        });\n        let edges = G.getAllEdges(true) as EdgeImmut[];\n\n        while (S.length !== 0) {\n            const nodeN = S.pop()!;\n            L.push(nodeN);\n\n            const nodeNConnectedTo = adjacency[nodeN.getID()];\n\n            // Remove n to m edges for all nodes m\n            edges = edges.filter(edge => {\n                if (edge.getFrom() === nodeN.getID() && nodeNConnectedTo.includes(edge.getTo())) {\n                    degrees[edge.getTo()].in--;\n                    adjacency[nodeN.getID()] = adjacency[nodeN.getID()].filter(v => {\n                        return v !== edge.getTo();\n                    });\n                    return false;\n                }\n                return true;\n            });\n\n            // If m has no more incoming edges, add it to S\n            nodeNConnectedTo.forEach(mID => {\n                if (degrees[mID].in === 0) {\n                    S.push(G.getNode(mID, true) as NodeImmut);\n                }\n            });\n        }\n\n        return edges.length > 0 || L;\n    };\n\n    public static isGraphCyclic = (G: GraphImmut = GraphState.graph): boolean => {\n        // If the topological sorting returns true, then it failed, so the graph has a cycle\n        return GraphAlgorithms.topologicalSort(G) === true;\n    };\n\n    public static directionalEulerian = (directionalDegrees: { in: number; out: number }[], scc: number[]): boolean => {\n        let eulerian = true;\n        let component = -1;\n        directionalDegrees.forEach((deg, id) => {\n            if (deg.in !== deg.out) {\n                eulerian = false;\n            }\n            if (deg.in > 0) {\n                if (component === -1) {\n                    component = scc[id];\n                }\n                if (component !== scc[id]) {\n                    eulerian = false;\n                }\n            }\n        });\n\n        return eulerian;\n    };\n\n    public static hasEulerianCircuit = (degrees: number[], cc: number[]): boolean => {\n        const oddDegree = degrees.filter(v => {\n            return v % 2 !== 0;\n        });\n\n        // If any nodes have odd degree, we can short-circuit the algorithm because it cannot be Eulerian\n        if (oddDegree.length !== 0) {\n            return false;\n        }\n\n        let eulerian = true;\n        let component = -1;\n        degrees.forEach((v, i) => {\n            if (v !== 0) {\n                if (component === -1) {\n                    component = cc[i];\n                }\n                if (component !== cc[i]) {\n                    eulerian = false;\n                }\n            }\n        });\n\n        return eulerian;\n    };\n}\n","\"use strict\";\n\nexport default class SpanningTree {\n    private readonly id: number[];\n\n    constructor(V: number) {\n        this.id = [];\n        for (let v = 0; v < V; v++) {\n            this.id.push(v);\n        }\n    }\n\n    union(v: number, w: number) {\n        const q = this.root(v);\n        const p = this.root(w);\n\n        if (p !== q) {\n            this.id[p] = q;\n        }\n    }\n\n    root(q: number) {\n        while (this.id[q] !== q) {\n            q = this.id[q];\n        }\n        return q;\n    }\n\n    connected(v: number, w: number) {\n        return this.root(v) === this.root(w);\n    }\n}\n"],"names":["graphPlainToGraphImmut","gp","nodes","edges","directed","weighted","checkColoringByString","G","getAllNodes","conflictStartID","conflictEndID","conflictList","V","getNumberOfNodes","v","vertexAdjacency","getNodeAdjacency","currentColor","getAttribute","i","push","from","to","num","length","confList","colorNetworkGreedy","orderingMode","nodeArr","degrees","getAllOutDegrees","nodeArrLabel","vertexOrder","a","b","toLowerCase","localeCompare","console","log","history","colorIndex","coloredAdjacencyList","index","nodeToColor","colorsOfNeighbors","curPos","ref","minimalMissingColor","Object","values","value","colors","chromaticNumber","colorNetworkWelsh","root","shift","myGroup","p","conflict","j","areAdjacent","splice","kColoringBruteForce","kColor","kColoringBruteForceRecursive","curNode","color","kColorable","Array","fill","recAnswer","connectedComponents","components","componentCount","setComponentNum","GraphAlgorithms","depthFirstSearch","forEach","count","start","visisted","Stack","pop","includes","nodeID","stronglyConnectedComponents","indices","lowlink","S","strongConnect","w","Math","min","breadthFirstSearch","startNodeID","targetNodeID","Q","edgeTo","x","y","path","reverse","weight","getMinWeightEdgeBetween","pathExists","distance","dijkstraSearch","isDirected","asDirected","isWeighted","asWeighted","getAllEdges","find","edge","getWeight","queue","_nodes","enqueue","priority","key","this","sort","dequeue","isEmpty","distances","previous","node","dist","Infinity","getID","smallest","neighbor","alt","cost","bellmanFord","parents","getFrom","getTo","negativeCylce","slice","fordFulkerson","reduceMultiGraph","marked","edgeProperties","capacity","flow","other","e","split","parseInt","residualCapacity","addResidualFlow","deltaFlow","hasAugmentedPath","bottleneckValue","maxFlow","flowPath","f","getFlows","kruskal","set","connected","union","reduce","acc","mst","totalWeight","topologicalSort","adjacency","getFullAdjacency","L","filter","n","in","nodeN","nodeNConnectedTo","mID","getNode","isGraphCyclic","directionalEulerian","directionalDegrees","scc","eulerian","component","deg","id","out","hasEulerianCircuit","cc","q"],"sourceRoot":""}