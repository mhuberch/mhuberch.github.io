{"version":3,"file":"pwaPacked-51c2592feba7c279064b.min.js","mappings":";;;;;;;AAAA,IAAI,aAAa,GAAG,WAAW,CAAC;AAEhC,IAAI,YAAY,GAAG,CAAC,YAAY,CAAC,CAAC;AAElC,aAAa;AACb,IAAM,GAAG,GAA6B,IAAW,CAAC;AAElD,aAAa;AACb,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,KAAsB;IACnD,KAAK,CAAC,SAAS,CACX,MAAM;SACD,IAAI,CAAC,aAAa,CAAC;SACnB,IAAI,CAAC,eAAK,IAAI,YAAK,CAAC,MAAM,CAAC,YAAY,CAAC,EAA1B,CAA0B,CAAC;SACzC,IAAI,CAAC,cAAM,UAAG,CAAC,WAAW,EAAE,EAAjB,CAAiB,CAAC,CACrC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,gBAAgB,CAAC,UAAU,EAAE;IAC7B,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;AACxB,CAAC,CAAC,CAAC;AAEH,6EAA6E;AAC7E,aAAa;AACb,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,KAAiB;IAC5C,KAAK,CAAC,WAAW,CACb,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,kBAAQ;QACV,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,qBAAqB,CAAC,EAAE;YACnD,OAAO,QAAQ,CAAC;SACnB;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,eAAK;YACxC,IAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjC,2FAA2F;YAC3F,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;gBAClE,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aACrC;YACD,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;SACD,KAAK,CAAC;QACH,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAsB,CAAC;IAC5D,CAAC,CAAC,CACT,CAAC;AACN,CAAC,CAAC,CAAC","sources":["webpack://graphPlayground/./src/js/workers/pwaServiceWorker.ts"],"sourcesContent":["let dataCacheName = \"graphs-v1\";\n\nlet filesToCache = [\"index.html\"];\n\n// @ts-ignore\nconst ctx: ServiceWorkerGlobalScope = self as any;\n\n// @ts-ignore\nctx.addEventListener(\"install\", (event: ExtendableEvent) => {\n    event.waitUntil(\n        caches\n            .open(dataCacheName)\n            .then(cache => cache.addAll(filesToCache))\n            .then(() => ctx.skipWaiting())\n    );\n});\n\nctx.addEventListener(\"activate\", () => {\n    ctx.clients.claim();\n});\n\n// Get files from network first (cache if not cached already), then the cache\n// @ts-ignore\nctx.addEventListener(\"fetch\", (event: FetchEvent) => {\n    event.respondWith(\n        fetch(event.request)\n            .then(response => {\n                if (event.request.url.includes(\"chrome-extension://\")) {\n                    return response;\n                }\n\n                return caches.open(dataCacheName).then(cache => {\n                    const newResp = response.clone();\n                    // Check if the response is for a real URL, not base64 encoded data and it is a GET request\n                    if (!newResp.url.includes(\"data:\") && event.request.method === \"GET\") {\n                        cache.put(event.request, newResp);\n                    }\n                    return response;\n                });\n            })\n            .catch(() => {\n                return caches.match(event.request) as Promise<Response>;\n            })\n    );\n});\n"],"names":[],"sourceRoot":""}