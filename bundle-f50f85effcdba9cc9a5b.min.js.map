{"version":3,"file":"bundle-f50f85effcdba9cc9a5b.min.js","mappings":"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","sources":["webpack://graphPlayground/webpack/runtime/chunk loaded","webpack://graphPlayground/webpack/runtime/create fake namespace object","webpack://graphPlayground/webpack/runtime/load script","webpack://graphPlayground/./src/js/workers/GraphAlgorithmWorker.ts?dbca","webpack://graphPlayground/./src/js/UIInteractions.ts","webpack://graphPlayground/./src/js/app.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/EdgeImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/GraphImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/NodeImmut.ts","webpack://graphPlayground/./src/js/graphState.ts","webpack://graphPlayground/./src/js/languages.ts","webpack://graphPlayground/./src/js/main.ts","webpack://graphPlayground/./src/js/settings.ts","webpack://graphPlayground/./src/js/util/genericHelpers.ts","webpack://graphPlayground/./src/js/util/graphHelpers.ts","webpack://graphPlayground/./src/ lazy ^\\.\\/.*\\.ts$ namespace object","webpack://graphPlayground/webpack/bootstrap","webpack://graphPlayground/webpack/runtime/compat get default export","webpack://graphPlayground/webpack/runtime/define property getters","webpack://graphPlayground/webpack/runtime/ensure chunk","webpack://graphPlayground/webpack/runtime/get javascript chunk filename","webpack://graphPlayground/webpack/runtime/global","webpack://graphPlayground/webpack/runtime/hasOwnProperty shorthand","webpack://graphPlayground/webpack/runtime/make namespace object","webpack://graphPlayground/webpack/runtime/node module decorator","webpack://graphPlayground/webpack/runtime/publicPath","webpack://graphPlayground/webpack/runtime/jsonp chunk loading","webpack://graphPlayground/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"graphPlayground:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"GraphAlgorithmWorker-e4100973bd96490e90ad.min.worker.js\");\n}\n","import gHelp from \"./util/graphHelpers\";\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport GraphState from \"./graphState\";\nimport { FlowResult, kColorResult, MSTResult, ShortestPathResult } from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from \"worker-loader!./workers/GraphAlgorithmWorker\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./classes/GraphImmut/EdgeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport * as languages from \"./languages\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean;\n}\n\nconst possibleColorModes = {\n    \"Ordered by Node Label (increasing)\": 1,\n    \"Ordered by Node Label (decreasing)\": 2,\n    \"Ordered by Degree (increasing)\": 3,\n    \"Ordered by Degree (decreasing)\": 4\n}\n\nconst makeAndPrintShortestPath = (title: string, fn: string, weighted: boolean): void => {\n    const myName = languages.current.ShortestPath;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (fn.includes(\"dijkstra\")) {\n                        help.showSimpleModal(\n                            languages.current.DijkstraError,\n                            languages.current.DijkstraErrorHTML\n                        );\n                    } else if (fn.includes(\"bellman\")) {\n                        help.showSimpleModal(\n                            languages.current.BellmanFordError,\n                            languages.current.BellmanFordErrorHTML\n                        );\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                    help.htmlEncode(source.toString()), help.htmlEncode(sink.toString()))}`;\n\n                if (a.pathExists) {\n                    p = help.stringReplacement(languages.current.ShortestPathFromAToB, title,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.distance);\n                    if (weighted) {\n                        p += `\\n${help.stringReplacement(languages.current.WithWeightedCost, a.cost)}`;\n                    }\n                    p += \"\\n\\n\" + languages.current.UsingPath;\n\n                    p = help.htmlEncode(p);\n                    let graph = GraphState.getGraphData(GraphState.graph, false, true);\n                    let G = new GraphImmut(graph.nodes, graph.edges, graph.directed, graph.weighted);\n                    a.path.forEach((v: number, i: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                        if (i > 0) {\n                            G = G.editEdge(a.path[i - 1], v, null, null, \"#FF0000\") as GraphImmut;\n                        }\n                    });\n                    GraphState.graph = G;\n                    window.main.setData(GraphState.getGraphData(G), false, false, false);\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title,\n        languages.current.Go,\n        [\n            {\n                label: languages.current.StartNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            },\n            {\n                label: languages.current.EndNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\n\nconst makeAndPrintGreedyColoring = (): void => {\n    const myName = languages.current.GraphColoringGreedy;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const orderingMode = values[0];\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                GraphState.graphProperties.colormode = 2;\n                GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n                (GraphState.state.graphColoringGreedy as {}) = a.colors;\n\n                \n\n                // p += `\\nApprox. Chromatic Number from Welsh algorithm: ${a.chromaticNumber}`;\n\n\n                let p = \"Greedy algorithm work with the following ordering of vertices: \\n\";\n\n                const order : number[] = a.vertexOrder;\n\n                console.log(order);\n\n                order.forEach((v, i) => {\n                    p += GraphState.nodeIDToLabel(v) + \", \";\n                })\n\n                p += \"\\n\\n\";\n\n                // let p = help.stringReplacement(languages.current.NumberOfVertices, colors.length + \"\");\n                p += help.stringReplacement(languages.current.ApproxChromaticNumberIs, a.chromaticNumber + \"\");\n\n                p += \"\\n\\n\";\n\n                const colors = help.flatten(a.colors);\n                // colors.forEach((v, i) => {\n                //     p += help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n                // });\n\n                // p     += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                const historyToPrint: {nodeToColor: number, colorsOfNeighbors: {[key: number]: number} }[] = a.history;\n\n                // console.log(historyToPrint);\n\n                // p += \"\\n\\n\";\n\n                // history.push({nodeToColor: vertexOrder[curPos], colorsOfNeighbors: coloredAdjacencyList});\n\n                if (historyToPrint != null && window.settings.getOption(\"stepByStepInfo\")) {\n                    p += \"<h3>Step-by-Step output:</h3><hr>\" + \"\\n\";\n\n                    for (let step = 0; step < historyToPrint.length; step++) {\n\n                        const curNode: number = historyToPrint[step].nodeToColor;\n                        const colAdjList: { [key: number]: number } = historyToPrint[step].colorsOfNeighbors as {};\n\n                        // console.log(historyToPrint[step]);\n                        // console.log(\"Current node: \" + curNode);\n                        // console.log(GraphState.nodeIDToLabel(curNode));\n                        // console.log(colAdjList);\n                        // console.log(typeof colAdjList[0]);\n                        // console.log(typeof Object.keys(colAdjList))\n                        \n\n                        p += \"Step \" + (step+1) + \" : \" + \"AL(\" + GraphState.nodeIDToLabel(curNode) + \") : \";\n\n                        for (let neighbor in colAdjList) {\n                            const nb: number = (neighbor as unknown) as number;\n                            if ( colAdjList[neighbor] === -1) {\n                                // p += neighbor + \" not yet colored; \"\n                                p += GraphState.nodeIDToLabel(nb) + \" not yet colored; \"\n                            }\n                            else {\n                                p += GraphState.nodeIDToLabel(nb) + \" with color \" + colAdjList[neighbor] + \"; \";\n                            }\n                            // p += GraphState.nodeIDToLabel(neighbor) + \" with color \" + colAdjList[neighbor].toString() + \"; \";\n                        }\n\n                        p += \"--> \" + help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(curNode), colors[curNode] + \"\");\n                        //p += \"--> \" + help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(curNode), 0colors[curNode].toString()) + \"\\n\";\n                        p += \"\\n\";\n\n                    }\n\n                    // console.log(historyToPrint);\n                }\n                else {\n                    p += \"No step-by-step output. If desired, please ensure that the checkbox 'Step-by-Step Info' in the 'Graph Options' menu is chosen and rerun the coloring algorithm.\";\n                }\n\n                p = `<h3>${languages.current.GraphColoringGreedyTitle}</h3><hr>${help.htmlEncode(p)}`;\n                \n\n\n                if (a.chromaticNumber > 6) {\n                    p += \"As the coloring needs more than the six standard colors additional randomly chosen colors are used. To change their appearence press the button.\"\n                    p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n                }\n\n                help.printout(p);\n                window.main.applyColors();\n\n            });\n            w.send({\n                type: \"colorNetworkGreedy\",\n                args: [orderingMode],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        languages.current.GraphColoringGreedy,\n        languages.current.Go,\n        [\n            {\n                type: \"select\",\n                label: languages.current.ColoringMode, \n                optionText: Object.keys(possibleColorModes), \n                optionValues: Object.values(possibleColorModes), \n                initialValue: 0\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\n\nconst makeAndPrintkColoringBacktracking = (): void => {\n    const myName = languages.current.kColoringBacktracking;\n\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    const options: ModalFormRow[] = [\n        {\n        type: \"numeric\", initialValue: 1, label: languages.current.NumberOfColors, validationFunc: (v) => {\n            return v > 0 || languages.current.NumberOfColorsPositiveError;}\n        }\n    ]\n    if (window.settings.getOption(\"stepByStepInfo\")) {\n        options.push(\n            { \n                type: \"numeric\", initialValue: 1, label: languages.current.NumberOfSteps, validationFunc: (v) => {\n                    return v > 0 || languages.current.NumberOfColorsPositiveError;}\n            }\n        );\n    }\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const kColor = values[0];\n            let numberOfSteps = -1;\n\n            if (window.settings.getOption(\"stepByStepInfo\")) {\n                numberOfSteps = values[1];\n            }\n            \n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                \n                a = a as kColorResult;\n\n                // console.log(a.totalSteps);\n                // console.log(a.history);\n\n                // return { kColor, kColorable: false, color: [], totalSteps: recAnswer.totalSteps, history };\n\n                GraphState.graphProperties.colormode = 1;\n\n                \n\n                if (GraphState.state.kColorable === null || GraphState.getProperty(\"Most recent k-color check\") == null) {\n                    GraphState.graphProperties[\"Most recent k-color check\"] = -1;\n                    GraphState.state.kColorable = {};\n                    console.log(\"Newly set up; kColorable and MostRecentKColorCheck\");\n                }\n\n                // console.log(\"Check a. kColorable: \" + a.kColorable);\n\n                let p = \"\";\n\n                if (a.kColorable) {\n                    \n\n                    GraphState.graphProperties[\"Most recent k-color check\"] = a.kColor;\n\n                    const bestChrNumber = GraphState.graphProperties[\"Current best guess of chromatic number\"];\n                    if (bestChrNumber === null) {\n                        GraphState.graphProperties[\"Current best guess of chromatic number\"] = a.kColor;\n                    }\n                    else {\n                        GraphState.graphProperties[\"Current best guess of chromatic number\"] = Math.min(a.kColor, bestChrNumber);\n                    }\n\n\n                    GraphState.setUpToDate(true, [\"Most recent k-color check\", \"kColorable\", \"Current best guess of chromatic number\"]); // TODO: What about kColor dictionary if changing the graph?\n                    (GraphState.state.kColorable[kColor] as {}) = a.color;\n\n                    // console.log(\"Saving output from kColor-Algorithm\");\n                    // console.log(a.color);\n                    // console.log(GraphState.state.kColorable[3]);\n                    // console.log(GraphState.getProperty(\"kColorable\", true));\n                    \n                    // console.log(\"Building output string\");\n\n                    p += help.stringReplacement(languages.current.kColoringSuccess, a.kColor + \"\") + \"\\n\";\n\n                    p += help.stringReplacement(languages.current.kColoringTerminated, a.totalSteps + \"\");\n                    \n                    p = `<h3>${languages.current.kColoringBacktrackingTitle}</h3><hr>${help.htmlEncode(p)}`;\n                    \n                    if (a.kColor > 6) {\n                        p += languages.current.ReColorInfo;\n                        p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n                    }\n\n                }\n                else {\n                    p += help.stringReplacement(languages.current.kColoringFail, a.kColor + \"\") + \"\\n\";\n                    p += help.stringReplacement(languages.current.kColoringCheckedAll, a.totalSteps + \"\");\n\n                    GraphState.state.kColorable[kColor] = [];\n\n                }\n\n                if (numberOfSteps > 0) {\n                    p += \"\\n\\n\";\n                    p += help.stringReplacement(languages.current.kColoringDocStep1, numberOfSteps + \"\") + \"\\n\";\n                    p += languages.current.kColoringDocStep2;\n                    \n                    for (let i = 0; i < a.color.length; i++) {\n                        p += GraphState.nodeIDToLabel(i) + \", \";\n                    };\n                    p += \"\\n\";\n\n                    for (let step = 0; step < a.history.length; step++) {\n                        p += languages.current.Step + (step+1) + \": \" + (a.history[step]).toString() + \"\\n\";\n                    }\n                }\n\n                help.printout(p);\n\n                if (a.kColorable) {\n                    window.main.applyColors();\n                }\n\n            });\n            w.send({\n                type: \"kColoringBacktracking\",\n                args: [kColor, numberOfSteps],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n        },\n        languages.current.kColoringBacktracking,\n        languages.current.Go,\n        options,\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\nconst makeAndPrintkColoringBruteForce = (): void => {\n    const myName = languages.current.kColoringBruteForce;\n\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    const options: ModalFormRow[] = [\n        {\n        type: \"numeric\", initialValue: 1, label: languages.current.NumberOfColors, validationFunc: (v) => {\n            return v > 0 || languages.current.NumberOfColorsPositiveError;}\n        }\n    ]\n    if (window.settings.getOption(\"stepByStepInfo\")) {\n        options.push(\n            { \n                type: \"numeric\", initialValue: 1, label: languages.current.NumberOfSteps, validationFunc: (v) => {\n                    return v > 0 || languages.current.NumberOfColorsPositiveError;}\n            }\n        );\n    }\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const kColor = values[0];\n            let numberOfSteps = -1;\n\n            if (window.settings.getOption(\"stepByStepInfo\")) {\n                numberOfSteps = values[1];\n            }\n            \n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                \n                a = a as kColorResult;\n\n                // console.log(a.totalSteps);\n                // console.log(a.history);\n\n                // return { kColor, kColorable: false, color: [], totalSteps: recAnswer.totalSteps, history };\n\n                GraphState.graphProperties.colormode = 1;\n\n                \n\n                if (GraphState.state.kColorable === null || GraphState.getProperty(\"Most recent k-color check\") == null) {\n                    GraphState.graphProperties[\"Most recent k-color check\"] = -1;\n                    GraphState.state.kColorable = {};\n                    console.log(\"Newly set up; kColorable and MostRecentKColorCheck\");\n                }\n\n                // console.log(\"Check a. kColorable: \" + a.kColorable);\n\n                let p = \"\";\n\n                if (a.kColorable) {\n                    \n\n                    GraphState.graphProperties[\"Most recent k-color check\"] = a.kColor;\n\n                    const bestChrNumber = GraphState.graphProperties[\"Current best guess of chromatic number\"];\n                    if (bestChrNumber === null) {\n                        GraphState.graphProperties[\"Current best guess of chromatic number\"] = a.kColor;\n                    }\n                    else {\n                        GraphState.graphProperties[\"Current best guess of chromatic number\"] = Math.min(a.kColor, bestChrNumber);\n                    }\n\n\n                    GraphState.setUpToDate(true, [\"Most recent k-color check\", \"kColorable\", \"Current best guess of chromatic number\"]); // TODO: What about kColor dictionary if changing the graph?\n                    (GraphState.state.kColorable[kColor] as {}) = a.color;\n\n                    // console.log(\"Saving output from kColor-Algorithm\");\n                    // console.log(a.color);\n                    // console.log(GraphState.state.kColorable[3]);\n                    // console.log(GraphState.getProperty(\"kColorable\", true));\n                    \n                    // console.log(\"Building output string\");\n\n                    p += help.stringReplacement(languages.current.kColoringSuccess, a.kColor + \"\") + \"\\n\";\n\n                    p += help.stringReplacement(languages.current.kColoringTerminated, a.totalSteps + \"\");\n                    \n                    p = `<h3>${languages.current.kColoringBruteForceTitle}</h3><hr>${help.htmlEncode(p)}`;\n                    \n                    if (a.kColor > 6) {\n                        p += languages.current.ReColorInfo;\n                        p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n                    }\n\n                }\n                else {\n                    p += help.stringReplacement(languages.current.kColoringFail, a.kColor + \"\") + \"\\n\";\n                    p += help.stringReplacement(languages.current.kColoringCheckedAll, a.totalSteps + \"\");\n\n                    GraphState.state.kColorable[kColor] = [];\n\n                }\n\n                if (numberOfSteps > 0) {\n                    p += \"\\n\\n\";\n                    p += help.stringReplacement(languages.current.kColoringDocStep1, numberOfSteps + \"\") + \"\\n\";\n                    p += languages.current.kColoringDocStep2;\n                    \n                    for (let i = 0; i < a.color.length; i++) {\n                        p += GraphState.nodeIDToLabel(i) + \", \";\n                    };\n                    p += \"\\n\";\n\n                    for (let step = 0; step < a.history.length; step++) {\n                        p += languages.current.Step + (step+1) + \": \" + a.history[step].toString() + \"\\n\";\n                    }\n                }\n\n                help.printout(p);\n\n                if (a.kColorable) {\n                    window.main.applyColors();\n                }\n\n            });\n            w.send({\n                type: \"kColoringBruteForce\",\n                args: [kColor, numberOfSteps],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n        },\n        languages.current.kColoringBruteForce,\n        languages.current.Go,\n        options,\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = languages.current.ConnectedComponents;\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = languages.current.StronglyConnectedComponents;\n        componentKey = \"stronglyConnectedComponents\";\n    } else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if (UIInteractions.isRunning[cc]) {\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(languages.current.TaskAlreadyRunning);\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible(e => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = help.stringReplacement(languages.current.NumberOfConnectedComponents, cc, a.count);\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += help.stringReplacement(languages.current.VertexIsInConnectedComponentNumber, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if (iStartedProgress) {\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({ type: \"id\", id });\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({ data: e.data.data });\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: { [index: string]: boolean } = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: languages.current.GetAllDegrees,\n                directional: false,\n                applyFunc: UIInteractions.getAllDegrees,\n                display: true\n            },\n            {\n                name: languages.current.CheckColoring,\n                directional: false,\n                applyFunc: UIInteractions.checkGraphColoring,\n                display: true\n            },\n            {\n                //name: \"Graph Coloring Welsh\",\n                name: languages.current.GraphColoringGreedy,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintGreedyColoring();\n                },\n                display: true\n            },\n            {\n                name: languages.current.kColoringBruteForce,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintkColoringBruteForce();\n                },\n                display: true\n            },\n            {\n                name: languages.current.kColoringBacktracking,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintkColoringBacktracking();\n                },\n                display: true\n            },\n            {\n                name: languages.current.ConnectedComponents,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.StronglyConnectedComponents,\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: languages.current.BFS,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BFS, \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.Dijkstra,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.Dijkstra, \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.BellmanFord,\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BellmanFord, \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.FordFulkerson,\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: languages.current.KruskalMST,\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: languages.current.Cyclic,\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.TopoSort,\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector)!.addEventListener(\"click\", e => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#stop-allworker-link\", UIInteractions.terminateAllWebWorkers);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#load-default-color\", async () => {\n            GraphState.resetColor();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n        makeSimpleClickListener(\"#import-graph-g1\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(0);\n        });\n        makeSimpleClickListener(\"#import-graph-g2\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(1);\n        });\n        makeSimpleClickListener(\"#import-graph-g3\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(2);\n        });\n        makeSimpleClickListener(\"#import-graph-g4\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(3);\n        });\n        makeSimpleClickListener(\"#blank-background\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(0);\n        });\n        makeSimpleClickListener(\"#import-verkehrskreuzung\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(1);\n        });\n        makeSimpleClickListener(\"#import-schweiz\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(2);\n        });\n\n        (document.querySelector(\"#fileDropdown\") as HTMLAnchorElement).innerText = languages.current.File;\n        (document.querySelector(\"#import-file-link\") as HTMLAnchorElement).innerText = languages.current.ImportFile;\n        (document.querySelector(\"#import-text-link\") as HTMLAnchorElement).innerText = languages.current.ImportText;\n        (document.querySelector(\"#export-file-link\") as HTMLAnchorElement).innerText = languages.current.ExportFile;\n        (document.querySelector(\"#export-text-link\") as HTMLAnchorElement).innerText = languages.current.ExportText;\n\n        (document.querySelector(\"#graphloadDropdown\") as HTMLAnchorElement).innerText = languages.current.LoadGraphs;\n        (document.querySelector(\"#import-graph-g1\") as HTMLAnchorElement).innerText = \"Graph G1\";\n        (document.querySelector(\"#import-graph-g2\") as HTMLAnchorElement).innerText = \"Graph G2\";\n        (document.querySelector(\"#import-graph-g3\") as HTMLAnchorElement).innerText = \"Graph G3\";\n        (document.querySelector(\"#import-graph-g4\") as HTMLAnchorElement).innerText = \"Graph G4\";\n\n        (document.querySelector(\"#setBackgroundDropdown\") as HTMLAnchorElement).innerText = languages.current.SetBackground;\n        (document.querySelector(\"#blank-background\") as HTMLAnchorElement).innerText = \"Reset\";\n        (document.querySelector(\"#import-verkehrskreuzung\") as HTMLAnchorElement).innerText = \"Verkehrskreuzung\";\n        (document.querySelector(\"#import-schweiz\") as HTMLAnchorElement).innerText = \"Karte der Schweiz\";\n\n        (document.querySelector(\"#calculate-all-properties-link\") as HTMLAnchorElement).innerText = languages.current.CalculateAllProperties;\n        (document.querySelector(\"#new-graph-layout-link\") as HTMLAnchorElement).innerText = languages.current.NewGraphLayout;\n        (document.querySelector(\"#graph-options-link\") as HTMLAnchorElement).innerText = languages.current.GraphOptions;\n        (document.querySelector(\"#print-help-link\") as HTMLAnchorElement).innerText = languages.current.Help;\n\n        (document.querySelector(\"#example-graphs-label\") as HTMLHeadingElement).innerText = languages.current.ExampleGraphs;\n        (document.querySelector(\"#load-petersen-link\") as HTMLAnchorElement).innerText = languages.current.LoadPetersen;\n        (document.querySelector(\"#load-konigsberg-link\") as HTMLAnchorElement).innerText = languages.current.LoadKonigsberg;\n        (document.querySelector(\"#load-complete-link\") as HTMLAnchorElement).innerText = languages.current.LoadComplete;\n        (document.querySelector(\"#load-hypercube-link\") as HTMLAnchorElement).innerText = languages.current.LoadHypercube;\n        (document.querySelector(\"#load-custom-link\") as HTMLAnchorElement).innerText = languages.current.LoadCustom;\n\n        (document.querySelector(\"#algorithms-label\") as HTMLHeadElement).innerText = languages.current.Algorithms;\n\n        (document.querySelector(\"#graph-properties-label\") as HTMLHeadElement).innerText = languages.current.GraphProperties;\n        (document.querySelector(\"#results-label\") as HTMLHeadElement).innerText = languages.current.Results;\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\n            languages.current.Help,\n            languages.current.IssuesHTML\n        );\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n\n                // if (window.settings.getOption(\"direction\") !== vals[1]) {\n                //     window.settings.changeOption(\"direction\", vals[1]);\n                //     let G = GraphState.graph;\n                //     G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                //     // Clear node coloring because graph color doesn't apply to directed graphs\n                //     window.main.setData(GraphState.getGraphData(G, true));\n                // }\n                // if (window.settings.getOption(\"weights\") !== vals[2]) {\n                //     window.settings.changeOption(\"weights\", vals[2]);\n                //     let G = GraphState.graph;\n                //     G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                //     window.main.setData(GraphState.getGraphData(G));\n                // }\n                // if (window.settings.getOption(\"customColors\") !== vals[1]) {\n                //     window.settings.changeOption(\"customColors\", vals[1]);\n                // }\n                if (window.settings.getOption(\"smoothEdges\") !== vals[1]) {\n                    window.settings.changeOption(\"smoothEdges\", vals[1]);\n\n                    window.network.setOptions({ edges: { smooth: vals[1] } });\n                    let G = GraphState.graph;\n                    window.main.setData(GraphState.getGraphData(G));\n                    \n                }\n\n                if (window.settings.getOption(\"fastColorChange\") !== vals[2]) {\n                    window.settings.changeOption(\"fastColorChange\", vals[2]);                  \n                }\n\n                if (window.settings.getOption(\"stepByStepInfo\") !== vals[3]) {\n                    window.settings.changeOption(\"stepByStepInfo\", vals[3]);                  \n                }\n\n            },\n            languages.current.Options,\n            languages.current.Save,\n            [\n                {\n                    label: languages.current.GraphPhysics,\n                    initialValue: window.settings.getOption(\"nodePhysics\"),\n                    type: \"checkbox\"\n                },\n\n                // {\n                //     label: languages.current.DiGraph,\n                //     initialValue: window.settings.getOption(\"direction\"),\n                //     type: \"checkbox\"\n                // },\n                // {\n                //     label: languages.current.WeightedGraph,\n                //     initialValue: window.settings.getOption(\"weights\"),\n                //     type: \"checkbox\"\n                // },\n                // {\n                //     label: languages.current.CustomNodeColors,\n                //     initialValue: window.settings.getOption(\"customColors\"),\n                //     type: \"checkbox\"\n                // }\n                {\n                    label: languages.current.SmoothEdges,\n                    initialValue: window.settings.getOption(\"smoothEdges\"),\n                    type: \"checkbox\"\n                },\n                \n                {\n                    label: languages.current.FastColorChange,\n                    initialValue: window.settings.getOption(\"fastColorChange\"),\n                    type: \"checkbox\"\n                },\n\n                {\n                    label: languages.current.StepByStepInfo,\n                    initialValue: window.settings.getOption(\"stepByStepInfo\"),\n                    type: \"checkbox\"\n                }\n\n            ],\n            null\n        );\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (const v of GraphState.workerPool) {\n            if (v !== null && v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        // Cleanup state\n        GraphState.workerPool = [];\n        UIInteractions.stopLoadingAnimation();\n        UIInteractions.isRunning = {};\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex(v => {\n            return v === null || typeof v === \"undefined\";\n        });\n        if (nextIndex === -1) {\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"flex\") {\n            prog.style.display = \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"none\") {\n            prog.style.display = \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string) {\n        let n = languages.current.ThisTask;\n        if (name) {\n            n = name;\n        }\n        help.showSimpleModal(\n            languages.current.TaskAlreadyRunning,\n            \"<p>\" + help.stringReplacement(languages.current.TaskAlreadyRunningBody, n) + \"</p>\"\n        );\n    }\n\n    static getAllDegrees(): Promise<void> {\n        const myName = languages.current.GetAllDegrees;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            let a = { degrees: [] };\n\n            \n\n            const printGAD = () => {\n            \n                const degrees = a.degrees;\n\n                let p = \"\";\n                \n                degrees.forEach((v,i) => {\n                    p += help.stringReplacement(languages.current.VertexHasDegree, GraphState.nodeIDToLabel(i) + \"\", v + \"\") + \"\\n\";\n                });\n\n                p = `<h3>${languages.current.GetAllDegreesTitle}</h3><hr>${help.htmlEncode(p)}`;\n\n                help.printout(p);\n                \n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            \n            const w = UIInteractions.getWorkerIfPossible(e => {\n                a = e.data;\n                printGAD();\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n            w.send({\n                type: \"getAllDegreesWrapper\",\n                args: [],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n            \n        });\n    }\n\n    static checkGraphColoring(): Promise<void> {\n        const myName = languages.current.CheckColoring;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            let a = { from: [], to: [],  num: -1, confList: []};\n\n            const printCC = () => {\n                let p = help.stringReplacement(languages.current.NumberOfConflicts, a.num + \"\");\n\n                const conflist = a.confList;\n                \n                p += \"\\n\\n\";\n\n                conflist.forEach((v,i) => {\n                    p += help.stringReplacement(languages.current.NodeIsInConflictWith, (i+1).toString(), GraphState.nodeIDToLabel(v[0]), GraphState.nodeIDToLabel(v[1]) + \"\") + \"\\n\";\n                });\n\n                p = `<h3>${languages.current.CheckColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n\n                help.printout(p);\n                \n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            \n            const w = UIInteractions.getWorkerIfPossible(e => {\n                a = e.data;\n                printCC();\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n            w.send({\n                type: \"checkColoringByString\",\n                args: [],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n            \n        });\n    }\n\n    static resetgraphColoringGreedy(): Promise<void> {\n\n        // console.log(\"Hi, I'm resetgraphColoringGreedy\");\n\n        return new Promise<void>(async resolve => {\n            GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = null;\n            GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n            GraphState.state.graphColoringGreedy = null;\n        });\n\n    }\n\n    static makeAndPrintgraphColoringWelsh(): Promise<void> {\n        const myName = languages.current.GraphColoringWelsh;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Approx. Chromatic Greedy\")) as number,\n                colors: GraphState.state.graphColoringGreedy as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties.colormode = 2;\n                GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n                (GraphState.state.graphColoringGreedy as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n\n                // p += `\\nApprox. Chromatic Number from Welsh algorithm: ${a.chromaticNumber}`;\n\n                let p = help.stringReplacement(languages.current.NumberOfVertices, colors.length + \"\");\n                p += \"\\n\" + help.stringReplacement(languages.current.ChromaticNumberIs, a.chromaticNumber + \"\");\n\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n                });\n\n                /*help.printout(p)\n                if (!confirm(\"Do you want to continue\")) {\n                    window.main.applyColors();\n                    return;    \n                }*/\n                \n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>${languages.current.GraphColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n                p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoringGreedy\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetworkWelsh\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            } else {\n                printGC();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n            }\n        });\n    }\n\n    \n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            if (ignoreDuplicate) {\n                return Promise.resolve();\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({\n                type: \"hasEulerianCircuit\",\n                args: [GraphState.graph.getAllOutDegrees(), cc]\n            });\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = languages.current.FordFulkerson;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(\n            async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: boolean | FlowResult | null = null;\n\n                const cb = () => {\n                    let p = `<h3>${languages.current.FordFulkerson}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                        help.htmlEncode(GraphState.nodeIDToLabel(source)), help.htmlEncode(GraphState.nodeIDToLabel(sink)))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `${languages.current.FordFulkersonMaxFlowMinCut} ${help.stringReplacement(languages.current.MaxFlowFromAToB,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.maxFlow + \"\")}`;\n                    p += `\\n\\n${languages.current.UsingCapacities}\\n\\n`;\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach(v => {\n                        p += help.stringReplacement(languages.current.FlowWithCapacity, GraphState.nodeIDToLabel(v.from),\n                            GraphState.nodeIDToLabel(v.to), v.flow + \"\", v.capacity + \"\");\n                        p += \"\\n\";\n                    });\n                    p = p.trim();\n                    p = `<h3>${languages.current.FordFulkersonMaxFlowMinCut}</h3><hr>` + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            languages.current.FordFulkersonMaxFlowMinCut,\n            languages.current.Go,\n            [\n                {\n                    label: languages.current.SourceNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                },\n                {\n                    label: languages.current.SinkNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                }\n            ],\n            ($modal) => {\n                UIInteractions.isRunning[myName] = false;\n                $modal.modal(\"hide\");\n            }\n        );\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = languages.current.KruskalMST;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = help.stringReplacement(languages.current.KruskalMSTTotalWeight, a.totalWeight + \"\");\n            p += `\\n\\n${languages.current.UsingEdges}\\n\\n`;\n            p = help.htmlEncode(p);\n            a.mst.forEach(v => {\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getFrom())}&rarr;`;\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>${languages.current.KruskalMST}</h3><hr>${p}`;\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return Promise.resolve();\n        }\n\n        const myName = languages.current.Cyclic;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(resolve => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = languages.current.TopoSort;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(languages.current.TopoSortErrorHTML);\n                return;\n            }\n\n            let p = languages.current.TopoSort + \":\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach(v => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>${languages.current.TopoSort}</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    // display only the graph algorithms that are suited for directional, weighted graphs\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\")!;\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement(\"a\");\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", e => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach(alg => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            } else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\n\nimport \"bootstrap\";\nimport { Network } from \"vis-network\";\nimport { default as main, MainI } from \"./main\";\nimport Settings from \"./settings\";\nimport UI from \"./UIInteractions\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\ndeclare global {\n    interface Window {\n        main: MainI;\n        network: Network;\n        settings: typeof Settings;\n        ui: typeof UI;\n        Worker: Function;\n    }\n}\n\nwindow.main = main;\nwindow.settings = Settings;\n\nlanguages.setLanguage().then(() => {\n    window.ui = UI;\n    window.ui.registerListeners();\n\n    main.visOptions.locales = languages.current.VisLocale;\n    main.visOptions.locale = \"\";\n    window.network = new Network(main.container, {}, main.visOptions);\n    Settings.loadSettings();\n\n    main.addNetworkListeners(window.network);\n\n    let loadDefault = true;\n    if (Settings.checkForLocalStorage()) {\n        const s = localStorage.getItem(\"graphPlayground.lastState\");\n        if (s !== null) {\n            const jsonGraph: any = JSON.parse(s);\n            if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\n                loadDefault = false;\n                main.applyState(false, jsonGraph as { graph: GraphPlain });\n            }\n        }\n    }\n    if (loadDefault) {\n        (async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            main.setData(predefined.Petersen(), false, true, true);\n        })();\n    }\n});\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number;\n\n    [key: string]: any;\n\n    [key: number]: any;\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n    private readonly attributes: any;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: number | string = 1, extraAttrs: any = null) {\n        if (typeof from === \"object\") {\n            extraAttrs = Object.keys(from)\n                .filter(key => ![\"from\", \"to\", \"weight\"].includes(key))\n                .reduce((obj: any, key: string) => {\n                    obj[key] = (<EdgeImmutPlain>from)[key];\n                    return obj;\n                }, {});\n\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to!);\n        this.weight = Object.freeze(parseFloat(weight as string));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    toPlain(): EdgeImmutPlain {\n        const toReturn: EdgeImmutPlain = { from: this.from, to: this.to, weight: this.weight };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    editEdge(newWeight: number | null, extraAttrs: any = {}): EdgeImmut {\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach(key => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new EdgeImmut(\n            this.getFrom(),\n            this.getTo(),\n            newWeight === null ? this.getWeight() : newWeight,\n            attributes\n        );\n    }\n}\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterExtraAttr = (data: any, labels: any) => {\n    return Object.keys(data)\n        .filter((key) => !(labels).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst filterNodeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"label\", \"id\"]);\n};\n\nconst filterEdgeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"from\", \"to\", \"weight\"]);\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n            let extraAttrs = {};\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n            if (\"attributes\" in edge) {\n                extraAttrs = filterEdgeExtraAttr(edge.attributes);\n            }\n            else {\n                extraAttrs = filterEdgeExtraAttr(edge);\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | Readonly<List<NodeImmut>> | NodeImmutPlain[],\n                edges: null | Readonly<List<EdgeImmut>> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        const node = this.nodes.get(id);\n        if(typeof node === \"undefined\"){\n            return false;\n        }\n        if (rich) {\n            return node;\n        }\n        return node.toPlain();\n    }\n\n    getNodeForColor(id: number): NodeImmut | boolean {\n        const node = this.nodes.get(id);\n        if (typeof node === \"undefined\") {\n            return false;\n        }\n\n        return node;\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight(), edge.getAllAttributes());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null, color: string | null = null): GraphImmut | boolean {\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n\n            if (((edge.getFrom() === from && edge.getTo() === to)\n                || (!this.isDirected() && edge.getFrom() === to && edge.getTo() === from))\n                && (oldWeight === null || edge.getWeight() === oldWeight)) {\n\n                if (color !== null) {\n                    newEdges = newEdges.set(index,\n                        edge.editEdge(newWeight === null ? null : parseFloat(newWeight),\n                            {color: color}));\n                }\n                else {\n                    newEdges = newEdges.set(index, edge.editEdge(newWeight === null ? null : parseFloat(newWeight)));\n                }\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): Readonly<List<NodeImmut>> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): Readonly<List<EdgeImmut>> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            if (degrees.includes(edge.getFrom())) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    getAllInOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            if (degrees.includes(edge.getFrom())) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n            \n            if (degrees.includes(edge.getTo())) {\n                degrees[edge.getTo()]++;\n            }\n            else {\n                degrees[edge.getTo()] = 1;\n            }\n            \n\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight(), edge.getAllAttributes()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to < from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight(), edge.getAllAttributes()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = G.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = G.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = G.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = G.asUnweighted();\n        }\n\n        return G;\n    }\n\n    // MH: Adjacency matrix\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        if (id1 >= this.numNodes || id2 >= this.numNodes) {\n            return edgeList;\n        }\n\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number = Math.min, initialValue: any = Infinity): GraphImmut {\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n","\"use strict\";\n\nimport help from \"../../util/genericHelpers\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n    [key: string]: any;\n    [key: number]: any;\n}\n\nconst capitalLetters = help.deepFreeze([\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n]) as string[];\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: null | string = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            // MH: If the id is an integer number and between 0 and 25, than take a capital letter from the alphabet as label\n            if (typeof id === \"number\" && (id >= 0 && id <=25)) {\n                this.label = capitalLetters[id];\n            } else {\n                this.label = id.toString();\n            }\n            \n        } else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = { id: this.id, label: this.label };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        if (extraAttrs !== null) {\n            Object.keys(extraAttrs).forEach(key => {\n                attributes[key] = extraAttrs[key];\n            });\n        }\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nimport { DataSet } from 'vis-data';\nimport { Node, Edge } from 'vis-network';\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\n\ninterface UpToDateProperties {\n    name: string;\n    upToDate: boolean;\n    type: string;\n    always?: boolean;\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\n    [index: string]: undefined | string | boolean | ((ignoreDuplicate?: boolean) => any)\n}\n\ninterface GraphProperties {\n    vertices: number;\n    edges: number;\n    colormode: number;\n    eulerian: boolean;\n    \"Approx. Chromatic Greedy\": number | null;\n    \"Connected Components\": number | null;\n    \"Strongly Connected Components\": number | null;\n    \"Most recent k-color check\": number | null;\n    \"Current best guess of chromatic number\": number | null;\n    cyclic: boolean;\n\n    [index: string]: boolean | number | null;\n}\n\ninterface GraphStateData {\n    stronglyConnectedComponents: null | { [key: number]: number };\n    connectedComponents: null | { [key: number]: number };\n    graphColoringGreedy: null | number[];\n    kColorable: null | { [key: number]: number[] };\n\n    [index: string]: null | number[] | { [key: number]: number } | { [key: number]: number[] };\n}\n\nexport interface AddNodeI {\n    id?: number\n    label: string;\n    x: number;\n    y: number;\n    color?: string;\n}\n\nexport interface GraphStateHistory {\n    upToDate: UpToDateProperties[];\n    state: GraphStateData;\n    graph: GraphImmut;\n    graphProperties: GraphProperties;\n    [index: string]: UpToDateProperties[] | GraphStateData | GraphImmut | GraphProperties;\n}\n\nconst getInt = (v: string | number): number => {\n    if (typeof v === 'number') {\n        return v;\n    }\n    return parseInt(v);\n};\n\nexport default class GraphState {\n    public static workerPool: (Worker | null)[] = [];\n    public static backHistory: GraphStateHistory[] = [];\n    public static forwardHistory: GraphStateHistory[] = [];\n    public static maxHistory = 10;\n    public static upToDate: UpToDateProperties[] = [\n        {\n            name: \"Approx. Chromatic Greedy\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                // console.log(\"Hi, I'm updating approx. chromatic welsh.\");\n                return window.ui.resetgraphColoringGreedy();\n                \n            }\n        },\n        {\n            name: \"graphColoringGreedy\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                return window.ui.resetgraphColoringGreedy();\n            }\n        },\n        {\n            name: \"Most recent k-color check\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"Current best guess of chromatic number\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"colormode\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"kColorable\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                // console.log(\"Hi, I'm updating kColorable.\");\n                return null;\n            }\n        },\n        { name: \"vertices\", upToDate: true, always: true, type: \"property\" },\n        { name: \"edges\", upToDate: true, always: true, type: \"property\" },\n        {\n            name: \"eulerian\", upToDate: false, type: \"property\",\n            applyFunc: (i) => {\n                return window.ui.makeAndPrintEulerian(i);\n            }\n        },\n        {\n            name: \"Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"cyclic\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintIsCyclic();\n            }\n        },\n    ];\n    public static state: GraphStateData = {\n        stronglyConnectedComponents: null,\n        connectedComponents: null,\n        graphColoringGreedy: null,\n        kColorable: null\n    };\n    public static graph: GraphImmut;\n    public static graphProperties: GraphProperties = {\n        vertices: 0,\n        edges: 0,\n        colormode: 0,\n        eulerian: false,\n        \"Approx. Chromatic Greedy\": null,\n        \"Connected Components\": null,\n        \"Strongly Connected Components\": null,\n        \"Most recent k-color check\": null,\n        \"Current best guess of chromatic number\": null,\n        cyclic: false,\n    };\n\n    static setUpToDate(value = false, listOptions?: string[]) {\n        // console.log(\"Hi, I am 'setUpToDate'\");\n        const all = listOptions === null || typeof listOptions === \"undefined\";\n        let property = false;\n        GraphState.upToDate.forEach((v) => {\n            // console.log(v);\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions!.indexOf(v.name) > -1)) {\n                v.upToDate = value;\n                if (v.type === \"property\") {\n                    property = true;\n                }\n            }\n        });\n        if (property) {\n            GraphState.makeAndPrintProperties();\n        }\n    }\n\n    static async getProperty(property: keyof GraphProperties, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\n        // console.log(\"Hi, I am getProperty\");\n        const a = GraphState.upToDate.find((v) => {\n            return (\"name\" in v && v.name === property);\n        })!;\n        if (!a.upToDate) {\n            // console.log(\"Not up to date:\");\n            // console.log(a);\n            if (\"applyFunc\" in a && typeof a.applyFunc === \"function\" && updateIfNotUpdated) {\n                // console.log(\"applyFunc applied:\");\n                await a.applyFunc(ignoreDuplicate);\n            }\n            else {\n                return null;\n            }\n        }\n        if (a.type === \"state\") {\n            return Promise.resolve(GraphState.state[property]);\n        }\n        return Promise.resolve(GraphState.graphProperties[property]);\n    }\n\n    static async makeAndPrintProperties(recalcLong = false) {\n        const directional = window.settings.getOption(\"direction\");\n\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\n\n        if (!directional) {\n            await GraphState.getProperty(\"eulerian\", true, true);\n        }\n\n        const p = Object.keys(GraphState.graphProperties);\n        if (recalcLong) {\n            p.forEach(async (v) => {\n                await GraphState.getProperty(v, true);\n            });\n        }\n\n        const printableProperties: any = {};\n        await Promise.all(p.map(async (v) => {\n            printableProperties[v] = await GraphState.getProperty(v);\n        }));\n\n        GraphState.printGraphProperties(printableProperties);\n    }\n\n    static printGraphProperties(properties: any) {\n        let p = \"\";\n        Object.keys(properties).forEach((k) => {\n            if (properties[k] !== null) {\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\n            }\n        });\n        p = p.trim();\n        p = help.htmlEncode(p);\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\n    }\n\n    private static updateGraph(graph = GraphState.graph) {\n        // console.log(\"Hi, I am 'updateGraph'\");\n        let nodes = graph.getAllNodes() as NodeImmutPlain[];\n        let edges = graph.getAllEdges() as EdgeImmutPlain[];\n        if (!window.settings.getOption(\"customColors\")) {\n            nodes = GraphState.clearColorFromNodes(nodes);\n            edges = GraphState.clearColorFromEdges(edges);\n        }\n        window.main.setData({ nodes, edges });\n    }\n\n    static resetColor() {\n        const saveState = window.settings.getOption(\"customColors\");\n        window.settings.changeOption(\"customColors\", false);\n        this.updateGraph();\n        window.settings.changeOption(\"customColors\", saveState);\n    }\n\n    static repaint() {\n        this.updateGraph();\n    }\n\n    static addEdge(from: number | string, to: number | string, weight = 0, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\n        this.updateGraph(graph);\n    }\n\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\n        graph = graph.addNode({ label: data.label, x: data.x, y: data.y, color: data.color });\n        this.updateGraph(graph);\n    }\n\n    static editNode(id: number | string, label: string, color?: string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        graph = graph.editNode(iId, { label, color });\n        window.main.setData(GraphState.getGraphData(graph), false, false);\n    }\n\n    static editEdge(from: number | string, to: number | string,\n        newWeight: number, oldWeight: number, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\n        if (newGraph instanceof GraphImmut) {\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\n        }\n    }\n\n    static deleteEdge(from: number | string, to: number | string, weight: (undefined | null | number) = null, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\n        this.updateGraph(graph);\n    }\n\n    static deleteNode(id: number | string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        const newGraph = graph.deleteNode(iId);\n        if (newGraph instanceof GraphImmut) {\n            this.updateGraph(newGraph);\n        }\n    }\n\n    static checkAdjacency(from: number | string, to: number | string , graph = GraphState.graph): boolean {\n        const nodeFrom = getInt(from);\n        const nodeTo = getInt(to);\n        return graph.areAdjacent(nodeFrom, nodeTo);\n    }\n\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\n        nodes.forEach((v) => {\n            v.color = null;\n        });\n        return nodes;\n    }\n\n    static clearColorFromEdges(edges: EdgeImmutPlain[]): EdgeImmutPlain[] {\n        edges.forEach((v) => {\n            delete v.color;\n        });\n        return edges;\n    }\n\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\n        const n = graph.getNode(id, true);\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\n            return n.getLabel().trim();\n        }\n\n        return id.toString();\n    }\n\n    // Preferentially search by ID, label, and case-insensitive label\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\n        let n = graph.getAllNodes(true) as NodeImmut[];\n        n = n.filter((node) => {\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\n        });\n\n        if (n.length === 0) {\n            return -1;\n        }\n        else if (n.length === 1) {\n            return n[0].getID();\n        }\n\n        let rID = -1;\n        let found = false;\n\n        n.forEach((node) => {\n            if (!found && node.getID().toString() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        return rID;\n    }\n\n    // Return graph as a Vis compatible dataset\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<Node>; edges: DataSet<Edge> } {\n        const d = GraphState.getGraphData(graph);\n        if (graph.isWeighted()) {\n            d.edges.forEach((e) => {\n                e.label = e.weight.toString();\n            });\n        }\n        d.edges.forEach((e) => {\n            if ('color' in e) {\n                e.color = { color: e.color };\n            }\n        });\n\n        return { nodes: new DataSet(d.nodes as Node[]), edges: new DataSet(d.edges as Edge[]) };\n    }\n\n    static setLocations(locations: { [key: string]: { x: number; y: number } }, graph = GraphState.graph): GraphImmut {\n        let newNodes = graph.getAllNodesAsImmutableList();\n        Object.keys(locations).forEach((i) => {\n            const v = locations[i];\n            const node = newNodes.get(parseInt(i))!;\n            // Only change when there is actually a new position\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\n                // Batch up all changes that we'll be making\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), { x: v.x, y: v.y }));\n            }\n        });\n\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\n    }\n\n    static getGraphData(graph = GraphState.graph, clearNodeColors = false, clearEdgeColors = false): GraphPlain {\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\n        const edges = graph.getAllEdges() as EdgeImmutPlain[];\n        return {\n            nodes: clearNodeColors ? GraphState.clearColorFromNodes(nodes) : nodes,\n            edges: clearEdgeColors ? GraphState.clearColorFromEdges(edges) : edges,\n            directed: graph.isDirected(),\n            weighted: graph.isWeighted()\n        };\n    }\n}\n","import EN_US from \"src/EN_US\";\n\nexport enum Languages {\n    EN_US = \"EN_US\",\n\n}\n\nexport let current = {} as typeof EN_US;\n\n\nexport const setLanguage = async () => {\n    current = (await import(`../${window.settings.getOption(\"language\") || Languages.EN_US}.ts`)).default;\n};\n","\"use strict\";\n\nimport gHelp from './util/graphHelpers';\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport randomColor from 'randomcolor';\nimport GraphState, { AddNodeI, GraphStateHistory } from './graphState';\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport { Network, Node as VisNode, Edge } from \"vis-network\";\nimport { DataSet } from \"vis-data\";\nimport * as languages from \"./languages\";\n\n\nexport interface MainI {\n    graphState: typeof GraphState;\n    container: HTMLElement;\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\n    visOptions: {\n        edges: { smooth: boolean, color: {inherit: boolean}};\n        interaction: { hover: boolean };\n        manipulation: {\n            addNode: (data: AddNodeI, callback: Function) => void;\n            editNode: (data: AddNodeI, callback: Function) => void;\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\n        },\n        locale?: string,\n        locales?: any,\n    };\n    cancelEdit: (callback: Function) => void;\n    saveData: (data: any, callback: Function, operation: string, label: string, color: string) => Promise<void>;\n    nodeLabelIDValidator: (v: string) => (boolean | string);\n    applyColors: () => Promise<void>;\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\n    saveState: () => void;\n    getStateForSaving: () => GraphStateHistory;\n    undo: () => void;\n    redo: () => void;\n    applyState: (undo?: boolean, newState?: any) => void;\n    saveStateLocalStorage: () => void;\n    shuffleNetworkLayout: () => void;\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\n    addNetworkListeners: (network: Network) => void\n}\n\ninterface VisNetworkEvent {\n    edges: DataSet<Edge>;\n    nodes: DataSet<VisNode>;\n}\n\ninterface VisNetworkInternals extends Network {\n    layoutEngine: {\n        randomSeed: number,\n        initialRandomSeed: number\n    }\n}\n\ninterface VisEditEdgeInternal {\n    from: { id: string | number };\n    to: { id: string | number };\n    label?: string\n}\n\ninterface VisEdgeInternal {\n    from: string | number;\n    to: string | number;\n    id: string;\n    label?: string\n}\n\nconst customColorPallete = {\n    \"1: blue\": \"DEFAULT\",\n    \"2: red\": \"#ff3f3f\",\n    \"3: orange\": \"#ffbf64\",\n    \"4: yellow\": \"#ffff00\",\n    \"5: green\": \"#00ff80\",\n    \"6: violet\": \"#f964ff\"\n};\n  \n\n //    { type: \"select\", label: \"Color\", optionValues: [0, 1, 2, 3, 4, 5], optionText: [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"], initialValue: 0}\n                //]);\n// const basicColors = ['#ff3f3f ', '#ffbf64', '#ffff00', '#00ff80', '#00a0ff', '#f964ff'];\n\nconst self: MainI = {\n    graphState: GraphState,\n    container: document.getElementById('network')!,\n    // Function used to overwrite the edge edit functionality when weights are active\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\n        help.showFormModal(($modal, vals) => {\n            callback(null);\n            $modal.modal(\"hide\");\n            const value = parseFloat(vals[0]);\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label!));\n        }, languages.current.EditEdge, languages.current.Save, [\n            {\n                type: \"numeric\",\n                label: languages.current.WeightCapacity,\n                initialValue: parseFloat(data.label!)\n            }\n        ]);\n    },\n    visOptions: {\n        edges: { smooth: false, color: {inherit: false}},\n        interaction: { hover: true },\n        manipulation: {\n            addNode: async (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, await GraphState.getProperty(\"vertices\"))}</p>`\n                    },\n\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: gHelp.generateLabelFromNumber(await GraphState.getProperty(\"vertices\")) }\n\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete) });\n                }\n                const $popup = help.makeFormModal(languages.current.AddNode, languages.current.Save, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            editNode: (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const initialColor = Object.getOwnPropertyNames(data.color).includes(\"background\") ? (data.color as any).background : \"white\";\n\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, data.id + \"\")}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: data.label },\n\n                //    { type: \"select\", label: \"Color\", optionValues: [0, 1, 2, 3, 4, 5], optionText: [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"], initialValue: 0}\n                //]);\n\n\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete), initialValue: initialColor });\n                }\n                const $popup = help.makeFormModal(languages.current.EditNode, languages.current.Save, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                    window.network.addEdgeMode();\n                };\n                if (data.from === data.to) {\n                    alert(languages.current.ConnectNodeToItselfAlert);\n                    return;\n                }\n                else if (GraphState.checkAdjacency(data.from, data.to)) {\n                    alert(languages.current.AlreadyConnectedNodes);\n                    return;\n                }\n\n                apply();\n            },\n            /*addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                };\n                if (data.from === data.to) {\n                    if (confirm(languages.current.ConnectNodeToItselfConfirmation)) {\n\n                        apply();\n                    }\n                    return;\n                }\n\n                apply();\n            },*/\n            editEdge: (data, callback) => {\n                callback(null);\n                self.visOptions.manipulation.deleteEdge({ edges: [data.id] });\n                self.visOptions.manipulation.addEdge(data);\n            },\n            deleteEdge: (data, callback) => {\n                if (typeof callback === \"function\") {\n                    callback(null);\n                }\n                data.edges.forEach((v: any) => {\n                    let weight = null;\n                    const edge = (window.network as any).body.data.edges.get(v);\n                    const weightFromLabel = edge.label;\n                    if (typeof weightFromLabel !== \"undefined\") {\n                        weight = parseFloat(weightFromLabel);\n                    }\n\n                    GraphState.deleteEdge(edge.from, edge.to, weight);\n                });\n            },\n            deleteNode: (data, callback) => {\n                callback(null);\n                data.nodes.forEach((v: string) => {\n                    GraphState.deleteNode(v);\n                });\n            },\n        },\n    },\n\n    cancelEdit: (callback) => {\n        if (typeof callback === \"function\") {\n            callback(null);\n        }\n    },\n\n    saveData: async (data, callback, operation, label, color) => {\n        callback(null);\n\n        data.label = label;\n        data.color = color;\n        if (color === \"DEFAULT\") {\n            data.color = undefined;\n        }\n        if (operation === \"add\") {\n            GraphState.addNode(data);\n        }\n        else if (operation === \"editNode\") {\n            GraphState.editNode(data.id, data.label, data.color);\n        }\n    },\n\n    nodeLabelIDValidator: (v) => {\n        if (GraphState.nodeLabelToID(v) > -1) {\n            return true;\n        }\n        return languages.current.InvalidLabelOrId;\n    },\n\n    applyColors: async () => {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const coloring = GraphState.graphProperties.colormode;\n\n        let graphColors : any;\n        let chromaticNumber : any;\n\n        // alert(coloring);\n\n        if (coloring == 1) {\n            // console.log(\"Starting coloring in mode 1\");\n            chromaticNumber = await GraphState.getProperty(\"Most recent k-color check\");\n            // console.log(\"Chromatic number is given by \" + chromaticNumber);\n            const graphKColorable = await GraphState.getProperty(\"kColorable\", true);\n            // console.log(\"GraphKColorable is given by\");\n            // console.log(graphKColorable);\n            graphColors = graphKColorable[chromaticNumber]; //GraphState.state.kColorable[3]\n            // console.log(\"Those are the loaded colors\");\n            // console.log(graphColors);\n\n        }\n        else if (coloring === 2) {\n            graphColors = await GraphState.getProperty(\"graphColoringGreedy\", true);\n            chromaticNumber = await GraphState.getProperty(\"Approx. Chromatic Greedy\", true);\n        }\n        else {\n            alert(\"No correct colormode\");\n            return;\n        }\n\n    //     \"1: blue\": \"DEFAULT\",\n    // \"2: red\": \"#ff3f3f\",\n    // \"3: orange\": \"#ffbf64\",\n    // \"4: yellow\": \"#ffff00\",\n    // \"5: green\": \"#00ff80\",\n    // \"6: violet\": \"#f964ff\"\n\n    // '#00a0ff'\n\n        const basicColors = ['#97c2fc', '#ff3f3f', '#ffbf64', '#ffff00', '#00ff80', '#f964ff'];\n        const addColors = randomColor({ count: chromaticNumber > 6 ? chromaticNumber - 6 : 1, luminosity: \"light\" });\n\n        const colors = [...basicColors, ...addColors];\n\n        // const colors = randomColor({ count: chromaticNumber, luminosity: \"light\" });\n\n        // console.log(graphColors);\n        // console.log(colors);\n\n        let G = GraphState.graph;\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\n            G = G.editNode(v.id, { color: colors[graphColors[v.id]] });\n        });\n        self.setData(GraphState.getGraphData(G), false, false);\n    },\n\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\n        \n        // console.log(\"Hi, I am 'setData'\");\n        \n        // Store existing positions in the data if we're supposed to keep the layout\n        if (rearrangeGraph) {\n            data.nodes.forEach((v) => {\n                delete v.x;\n                delete v.y;\n            });\n        }\n\n        if (graphChanged) {\n            self.saveState();\n        }\n\n        if (\"directed\" in data && typeof data.directed !== \"undefined\") {\n            window.settings.changeOption(\"direction\", data.directed);\n        }\n        if (\"weighted\" in data && typeof data.weighted !== \"undefined\") {\n            window.settings.changeOption(\"weights\", data.weighted);\n        }\n        const directional = window.settings.getOption(\"direction\") as boolean;\n        const weighted = window.settings.getOption(\"weights\") as boolean;\n\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\n        GraphState.graph = g;\n\n        // Set a new random seed so that the layout will be different\n        self.randomizeNetworkLayoutSeed(window.network as unknown as VisNetworkInternals);\n        window.network.setData(GraphState.getGraphAsDataSet(g));\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\n\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        if (graphChanged) {\n            window.ui.stopLoadingAnimation();\n            window.ui.isRunning = {};\n            window.ui.terminateAllWebWorkers();\n            window.ui.printGraphAlgorithms();\n            help.printout(\"\");\n            GraphState.setUpToDate();\n            GraphState.makeAndPrintProperties(recalcProps);\n        }\n\n        self.saveStateLocalStorage();\n    },\n\n    saveState: () => {\n        if (GraphState.graph === null) {\n            return;\n        }\n\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\n            GraphState.backHistory.shift();\n        }\n\n        GraphState.backHistory.push(self.getStateForSaving());\n        GraphState.forwardHistory = [];\n        document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n    },\n\n    getStateForSaving: () => {\n        const state: any = {};\n        Object.keys(GraphState).forEach((k: string) => {\n            const v: any = (GraphState as any)[k];\n            if (typeof v !== \"function\") {\n                if (typeof v !== \"object\") {\n                    state[k] = v;\n                }\n                else {\n                    if (k === \"graph\" && v !== null) {\n                        state[k] = v;\n                    }\n                    if (!k.toLowerCase().includes(\"history\")) {\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\n                    }\n                }\n            }\n        });\n\n        return state as GraphStateHistory;\n    },\n\n    undo: () => {\n        if (GraphState.backHistory.length > 0) {\n            self.applyState(true);\n        }\n    },\n\n    redo: () => {\n        if (GraphState.forwardHistory.length > 0) {\n            self.applyState(false);\n        }\n    },\n\n    applyState: (undo = true, newState: null | GraphStateHistory = null) => {\n        const firstLoad = newState !== null;\n        const currentState = self.getStateForSaving();\n\n        if (!firstLoad) {\n            if (undo) {\n                newState = GraphState.backHistory.pop()!;\n            }\n            else {\n                newState = GraphState.forwardHistory.pop()!;\n            }\n        }\n\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\n\n        window.settings.changeOption(\"direction\", newState!.graph.isDirected());\n        window.settings.changeOption(\"weights\", newState!.graph.isWeighted());\n\n        GraphState.graph = newState!.graph;\n\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        window.ui.printGraphAlgorithms();\n        help.printout(\"\");\n\n        Object.keys(newState!).forEach((k: string) => {\n            const v = newState![k];\n            if (typeof v !== \"object\") {\n                (GraphState as any)[k] = v;\n            }\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\n                if (k.toLowerCase() === \"uptodate\") {\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\n                    });\n                }\n                else {\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\n                }\n            }\n        });\n\n        GraphState.makeAndPrintProperties().then(() => {\n            if (undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.backHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.forwardHistory.push(currentState);\n            }\n            else if (!undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.forwardHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.backHistory.push(currentState);\n            }\n\n            self.saveStateLocalStorage();\n        });\n    },\n\n    saveStateLocalStorage: () => {\n        if (window.settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\n        }\n    },\n\n    shuffleNetworkLayout: () => {\n        self.setData({\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\n        }, false, false, true);\n    },\n\n    randomizeNetworkLayoutSeed: (network) => {\n        const r = Math.round(Math.random() * 1000000);\n        network.layoutEngine.randomSeed = r;\n        network.layoutEngine.initialRandomSeed = r;\n    },\n\n    addNetworkListeners: (network) => {\n        // Enable edit node/edge when double clicking\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\n                network.editEdgeMode();\n            }\n            if (\"nodes\" in p && p.nodes.length === 1 && window.settings.getOption(\"fastColorChange\")) {\n                \n                \n                const chosenNode = p.nodes as unknown as number[];\n                const nodeId = chosenNode[0];\n\n                const data = GraphState.graph.getNodeForColor(nodeId);\n\n                if (typeof data !== 'boolean') {\n                    //console.log(data);\n                    const newColor = gHelp.toggleNodeColor(data);\n                    GraphState.editNode(data.getID(), data.getLabel(), newColor);\n                }\n                else {\n                    alert(\"Double-click selection of node doesn't work.\")\n                }\n\n                \n\n                // if (typeof data === \"String\") {\n                //     gHelp.toggleNodeColor(data);\n                // }\n                \n\n                // console.log(data);\n\n\n\n                // const currentNode = GraphState.graph.getNode(p.nodes[0] as number, true);\n\n                // GraphState.editNode(data.id, data.label, data.color);\n\n            }\n            if (\"nodes\" in p && p.nodes.length === 1 && !window.settings.getOption(\"fastColorChange\")) {\n                network.editNode();\n            }\n        });\n\n        // Save locations of nodes after dragging\n        network.on(\"dragEnd\", () => {\n            GraphState.graph = GraphState.setLocations(network.getPositions());\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\n        });\n\n        // Delete nodes/edges when hit \"Delete\"\n        let lastNetworkClickEvent: Event | null = null;\n        network.on('click', (event) => {\n            lastNetworkClickEvent = event;\n        });\n\n        // Delete key to delete node or edge\n        document.addEventListener('keyup', (key) => {\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\n                        network.deleteSelected();\n                    }\n                }\n            }\n        });\n\n        // Undo/Redo keyboard commands\n        document.addEventListener(\"keydown\", (e) => {\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\n                self.redo();\n            }\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\n                self.undo();\n            }\n        });\n\n        // When clicking off of the network, remove the Delete functionality\n        document.addEventListener(\"click\", (e) => {\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\n                lastNetworkClickEvent = null;\n            }\n        });\n    },\n\n};\n\nexport default self;\n","\"use strict\";\ninterface SettingsList {\n    nodePhysics: boolean;\n    direction: boolean;\n    weights: boolean;\n    smoothEdges: boolean;\n    fastColorChange: boolean;\n    stepByStepInfo: boolean;\n\n    [index: string]: boolean;\n}\n\n// \"smoothEdges\"),\n//                     type: \"checkbox\"\n//                 },\n                \n//                 {\n//                     label: languages.current.FastColorChange,\n//                     initialValue: window.settings.getOption(\"fastColorChange\"),\n//                     type: \"checkbox\"\n//                 },\n\n//                 {\n//                     label: languages.current.StepByStepInfo,\n//                     initialValue: window.settings.getOption(\"stepByStepInfo\"),\n\nexport default class Settings {\n    private static readonly defaults: SettingsList = {\n        nodePhysics: false,\n        direction: false,\n        weights: false,\n        smoothEdges: false,\n        fastColorChange: false,\n        stepByStepInfo: false\n    };\n    private static current: any = {};\n\n    public static checkForLocalStorage() {\n        try {\n            const x = \"__storage_test__\";\n            localStorage.setItem(x, x);\n            localStorage.removeItem(x);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    public static saveSettings() {\n        if (Settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\n        }\n    }\n\n    public static loadSettings() {\n        if (Settings.checkForLocalStorage()) {\n            const settings = localStorage.getItem(\"graphPlayground.settings\");\n            if (settings === null) {\n                Settings.current = settings;\n            } else {\n                Settings.current = JSON.parse(settings);\n            }\n        }\n        if (Settings.current === null) {\n            Settings.current = {};\n        }\n        Settings.setAll();\n    }\n\n    public static setAll() {\n        window.network.setOptions({ nodes: { physics: Settings.getOption(\"nodePhysics\") as boolean } });\n        window.network.setOptions({ edges: { arrows: { to: Settings.getOption(\"direction\") as boolean } } });\n        if (Settings.getOption(\"weights\")) {\n            window.network.setOptions({\n                manipulation: {\n                    editEdge: {\n                        editWithoutDrag: window.main.visWeightEdgeEdit\n                    }\n                }\n            });\n        } else {\n            window.network.setOptions({ manipulation: { editEdge: window.main.visOptions.manipulation.editEdge } });\n        }\n    }\n\n    public static changeOption(option: string, value: string | boolean): void {\n        Settings.current[option] = value;\n        Settings.saveSettings();\n        Settings.setAll();\n    }\n\n    public static getOption(option: string): string | boolean {\n        if (option in Settings.current) {\n            return Settings.current[option];\n        }\n        return Settings.defaults[option];\n    }\n}\n","\"use strict\";\n\nimport * as $ from \"jquery\";\n\nexport declare interface ModalFormRow {\n    type: string;\n    label?: string;\n    initialValue?: any;\n    id?: string | number;\n    extraAttrs?: any;\n    validationFunc?: (value: any, container: JQuery) => boolean | string;\n    clickDismiss?: boolean;\n    onclick?: (...args: any[]) => void;\n    optionText?: any[];\n    optionValues?: any[];\n}\n\ndeclare interface BasicMapType {\n    class: string;\n    id: string;\n    value: any;\n\n    [key: number]: any;\n\n    [key: string]: any;\n}\n\nconst defaultCancelCb = ($modal: JQuery) => {\n    $modal.modal(\"hide\");\n};\n\nconst self = {\n    deepCopy(deep: boolean, clone: any, copy: any) {\n        const isPlainObject = (obj: any) => {\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\n                return false;\n            }\n\n            let proto = Object.getPrototypeOf(obj);\n\n            if (!proto) {\n                return true;\n            }\n\n            // Objects with prototype are plain iff they were constructed by a global Object function\n            let Ctor = {}.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n            return (\n                typeof Ctor === \"function\" &&\n                {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n            );\n        };\n\n        let options,\n            name,\n            src,\n            copyIsArray,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length;\n\n        // Handle a deep copy situation\n        if (typeof target === \"boolean\") {\n            deep = target;\n\n            // Skip the boolean and the target\n            target = arguments[i] || {};\n            i++;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\n            target = {};\n        }\n\n        if (i === length) {\n            target = this;\n            i--;\n        }\n\n        for (; i < length; i++) {\n            // Only deal with non-null/undefined values\n            if ((options = arguments[i]) != null) {\n                // Extend the base object\n                for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && Array.isArray(src) ? src : [];\n                        } else {\n                            clone = src && isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[name] = self.deepCopy(deep, clone, copy);\n\n                        // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n                        target[name] = copy;\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n    },\n\n    deepFreeze: <T extends Object>(o: T): Readonly<T> => {\n        Object.freeze(o);\n\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\n            if (\n                o.hasOwnProperty(prop) &&\n                (o as any)[prop] !== null &&\n                (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\") &&\n                !Object.isFrozen((o as any)[prop])\n            ) {\n                self.deepFreeze((o as any)[prop]);\n            }\n        });\n\n        return o;\n    },\n\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\n        return [...arr].sort(compareFunction);\n    },\n\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\n        const r: any[] = [];\n        ds.forEach((v: { [index: string]: any }) => {\n            r.push(v[key]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\n        arr = arr.slice();\n        arr.forEach((v: any) => {\n            const k = Object.keys(v);\n            k.forEach(key => {\n                if (keys.indexOf(key) < 0) {\n                    delete v[key];\n                }\n            });\n        });\n        return self.deepFreeze(arr);\n    },\n\n    getFileExtension: (filename: string): string => {\n        return filename.split(\".\").splice(-1)[0];\n    },\n\n    htmlEncode: (string: string): string => {\n        const t = document.createElement(\"textarea\");\n        t.textContent = string;\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\n        return string;\n    },\n\n    printout: (text: string, escape?: string): void => {\n        if (escape) {\n            text = self.htmlEncode(escape);\n        }\n        document.getElementById(\"printout\")!.innerHTML = text;\n    },\n\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\n        const r: T[] = [];\n        Object.keys(map).forEach(i => {\n            r.push(map[i]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    rotate: (map: { [key: string]: any }): Readonly<any> => {\n        const r: any = {};\n        Object.keys(map).forEach(i => {\n            if (map[i] in r) {\n                r[map[i]].push(i);\n            } else {\n                r[map[i]] = [i];\n            }\n        });\n        return self.deepFreeze(r);\n    },\n\n    max: (iterable: any[]): number => {\n        return iterable.reduce((a, b) => {\n            return Math.max(a, b);\n        });\n    },\n\n    toTitleCase: (str: string): string => {\n        return str.replace(/(?:^|\\s)\\w/g, match => {\n            return match.toUpperCase();\n        });\n    },\n\n    stringReplacement: (str: string, ...replacements: string[]) => {\n        return replacements.reduce((val, replacement, i) => {\n            return val.replace(`$${i + 1}`, replacement);\n        }, str);\n    },\n\n    showSimpleModal: (title: string, body: string): void => {\n        self.showFormModal(null, title, null, [{ type: \"html\", initialValue: body }], null, false);\n    },\n\n    makeFormModal: (title: string, successText: string | null, form: ModalFormRow[], footer = true): JQuery => {\n        const f = $(\"<div>\", { class: \"modal-body form-group\" });\n        form.forEach((formRow, i) => {\n            if (!(\"initialValue\" in formRow)) {\n                formRow.initialValue = \"\";\n            }\n\n            let id = \"form-modal-\" + i;\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\n                id = formRow.id;\n            }\n\n            const basicMap: BasicMapType = { class: \"form-control\", id, value: formRow.initialValue };\n\n            if (\"extraAttrs\" in formRow) {\n                Object.keys(formRow.extraAttrs).forEach(attrname => {\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\n                    }\n                });\n            }\n\n            let validFunc: typeof formRow[\"validationFunc\"] = () => true;\n            if (\"validationFunc\" in formRow && typeof formRow.validationFunc === \"function\") {\n                validFunc = formRow.validationFunc;\n            }\n\n            const generalValidator = (event: any, valueMutator: null | ((v: any) => any) = null) => {\n                const $v = $(event.target);\n                let val = $v.val();\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\n                    val = valueMutator(val);\n                }\n                const valid = validFunc!(val, $v);\n\n                if (valid === true) {\n                    $v.removeClass(\"is-invalid\")\n                        .next(\"#feedback-\" + i)\n                        .remove();\n                } else {\n                    $v.addClass(\"is-invalid\");\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\n                        $v.after($(\"<div>\", { class: \"invalid-feedback\", id: \"feedback-\" + i }).text(valid));\n                    }\n                }\n            };\n\n            if (formRow.type === \"html\") {\n                f.append($(formRow.initialValue));\n            } else if (formRow.type === \"checkbox\") {\n                basicMap.type = \"checkbox\";\n                basicMap.class = \"form-check-input\";\n                delete basicMap.value;\n                if (formRow.initialValue) {\n                    basicMap.checked = \"\";\n                }\n\n                f.append(\n                    $(\"<div>\", { class: \"form-check\" }).append(\n                        $(\"<label>\", { for: id, class: \"form-check-label\" })\n                            .text(formRow.label!)\n                            .prepend($(\"<input>\", basicMap))\n                    )\n                );\n            } else {\n                f.append($(\"<label>\", { for: id, class: \"col-form-label\" }).text(formRow.label!));\n\n                if (formRow.type === \"button\") {\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\n                        basicMap.class += \" btn-dismiss\";\n                    }\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\n                        $b.on(\"click\", formRow.onclick);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"numeric\") {\n                    basicMap.type = \"number\";\n                    f.append(\n                        $(\"<input>\", basicMap).on(\"blur validate\", e => {\n                            generalValidator(e, parseFloat);\n                        })\n                    );\n                } else if (formRow.type === \"text\") {\n                    basicMap.type = \"text\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"file\") {\n                    basicMap.type = \"file\";\n                    basicMap.class = \"form-control-file form-control\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"textarea\") {\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\n                    if (\"onclick\" in formRow) {\n                        $b.on(\"click\", formRow.onclick!);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"select\") {\n                    const $options = $(\"<select>\", basicMap);\n                    formRow.optionText!.forEach((oText, oIndex) => {\n                        if (oIndex < formRow.optionValues!.length) {\n                            let selected = false;\n                            if (formRow.initialValue === formRow.optionValues![oIndex]) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { value: formRow.optionValues![oIndex], selected }).text(oText));\n                        } else {\n                            let selected = false;\n                            if (formRow.initialValue === oText) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { selected }).text(oText));\n                        }\n                    });\n                    f.append($options.on(\"blur validate\", generalValidator));\n                }\n            }\n        });\n\n        let $footer: JQuery<HTMLElement> | null = $(\"<div>\", { class: \"modal-footer\" })\n            .append($(\"<button>\", { class: \"btn btn-success\", type: \"button\" }).text(successText!))\n            .append($(\"<button>\", { class: \"btn btn-danger btn-cancel\", type: \"button\" }).text(\"Cancel\"));\n\n        if (footer === false) {\n            $footer = null;\n        }\n\n        const $modal = $(\"<div>\", { class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\" });\n        $modal.append(\n            $(\"<div>\", { class: \"modal-dialog\" }).append(\n                $(\"<div>\", { class: \"modal-content\" })\n                    .append(\n                        $(\"<div>\", { class: \"modal-header\" })\n                            .append($(\"<h5>\", { class: \"modal-title\" }).text(title))\n                            .append(\n                                $(\"<button>\", {\n                                    class: \"close\",\n                                    \"data-dismiss\": \"modal\",\n                                    \"aria-label\": \"close\"\n                                }).append($(\"<span>\", { \"aria-hidden\": \"true\" }).html(\"&times;\"))\n                            )\n                    )\n                    .append(f)\n                    .append($footer!)\n            )\n        );\n        $modal\n            .find(\"input, textarea\")\n            .off(\"keyup\")\n            .on(\"keyup\", e => {\n                if (e.key === \"Enter\") {\n                    $(\".btn-success\")\n                        .last()\n                        .trigger(\"click\");\n                }\n            });\n        $modal.on(\"shown.bs.modal\", () => {\n            $modal\n                .find(\"input[type='text'], input[type='number'], textarea\")\n                .first()\n                .trigger(\"focus\");\n        });\n\n        return $modal;\n    },\n\n    showFormModal: (\n        successCb: null | (($modal: JQuery, vals: any[]) => void),\n        title: string,\n        successText: string | null,\n        form: ModalFormRow[],\n        cancelCb: null | (($modal: JQuery) => void) = defaultCancelCb,\n        footer = true\n    ) => {\n        const $modal = self.makeFormModal(title, successText, form, footer);\n\n        $modal\n            .on(\"click\", \".btn-cancel\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                } else {\n                    $modal.modal(\"hide\");\n                }\n            })\n            .on(\"click\", \".btn-dismiss\", () => {\n                $modal.modal(\"hide\");\n            })\n            .on(\"click\", \".btn-success\", () => {\n                const vals: any[] = [];\n                let hasErrors = false;\n\n                $modal.find(\"input, textarea, select\").each((i, v) => {\n                    const $v = $(v);\n\n                    if (($v as any).tagName === \"SELECT\") {\n                        vals.push($v.find(\":selected\").val());\n                    } else if ($v.attr(\"type\") === \"checkbox\") {\n                        vals.push($v.prop(\"checked\"));\n                    } else if ($v.attr(\"type\") === \"file\") {\n                        vals.push(($v.get(0) as any).files);\n                    } else if ($v.attr(\"type\") === \"number\") {\n                        vals.push(parseFloat($v.val() as string));\n                    } else {\n                        vals.push($v.val());\n                    }\n\n                    if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\n                        hasErrors = true;\n                    }\n                });\n\n                if (!hasErrors && typeof successCb === \"function\") {\n                    successCb($modal, vals);\n                }\n            })\n            .on(\"hidden.bs.modal\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                }\n                $modal.remove();\n            })\n            .modal(\"show\");\n    }\n};\n\nexport default self;\n","\"use strict\";\n\nimport gHelp from './graphHelpers';\nimport help from './genericHelpers';\nimport {EdgeImmutPlain} from \"../classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, {NodeImmutPlain} from \"../classes/GraphImmut/NodeImmut\";\nimport GraphImmut from '../classes/GraphImmut/GraphImmut';\n\ninterface Degree {\n    in: number;\n    out: number;\n}\n\nconst capitalLetters = help.deepFreeze([\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n]) as string[];\n\nexport default {\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\n        // Adjacency stores IDs of edges TO\n        const degrees: Degree[] = [];\n        adjacencyMatrix.forEach((v, i) => {\n            if (i in degrees) {\n                degrees[i].out += v.length;\n            }\n            else {\n                degrees[i] = {out: v.length, in: 0};\n            }\n            v.forEach((outV) => {\n                if (outV in degrees) {\n                    degrees[outV].in += 1;\n                }\n                else {\n                    degrees[outV] = {in: 1, out: 0};\n                }\n            });\n        });\n\n        return degrees;\n    },\n\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\n        const nodes: NodeImmutPlain[] = [];\n\n        // MH: TODO NOT REALLY CLEAN\n        window.settings.changeOption(\"customColors\", true);\n\n        edges.forEach((v) => {\n            nodes[v.from] = {id: v.from, label: gHelp.generateLabelFromNumber(v.from)};\n            nodes[v.to] = {id: v.to, label: gHelp.generateLabelFromNumber(v.to)};\n        });\n\n        return nodes;\n    },\n\n    generateLabelFromNumber : (prelabel: number) : string => {\n        if (typeof prelabel === \"number\" && (prelabel >= 0 && prelabel <=25)) {\n            return capitalLetters[prelabel];\n        } else {\n            return prelabel.toString();\n        }\n    },\n\n\n    compareColor : (color1: string | undefined | null, color2: string | undefined | null) => {\n        if (color1 === null || color1 === undefined) {\n            color1 = \"DEFAULT\";\n        }\n        if (color2 === null || color2 === undefined) {\n            color2 = \"DEFAULT\";\n        }\n\n        return color1 === color2;\n\n    },\n\n    toggleNodeColor : (node: NodeImmut) : string | undefined => {\n        \n        const customColorPalleteArray = [\"DEFAULT\", \"#ff3f3f\", \"#ffbf64\", \"#ffff00\", \"#00ff80\", \"#f964ff\"];\n        const customColorPalleteInverted = {\n            \"#ff3f3f\": 1,\n            \"#ffbf64\": 2,\n            \"#ffff00\": 3,\n            \"#00ff80\": 4,\n            \"#f964ff\": 5\n        };\n\n        const currentColor = node.getAttribute('color');\n\n        let currentIndex = 0;        \n\n        if (currentColor === null || currentColor === undefined) {\n            currentIndex = 0;\n        }\n        else {\n            const currentColorString = currentColor as string;\n            currentIndex = customColorPalleteArray.indexOf(currentColorString);\n        }\n\n        if (currentIndex === 5 || currentIndex < 0) {\n            return undefined;\n        }\n\n        return customColorPalleteArray[(currentIndex+1)%6];\n    },\n\n    checkColoringByNumber : (color: number[], G: GraphImmut): boolean => {\n\n        const nodes = G.getAllNodes(true) as NodeImmut[];\n\n        const V = G.getNumberOfNodes();\n        for (let v = 0; v < V; v++) {\n            const vertexAdjacency = G.getNodeAdjacency(v);\n            const currentColor = color[v];\n\n            for (const i of vertexAdjacency) {\n                const conflict  = (currentColor === color[i]);\n                if (conflict && i > v) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n\n    },\n\n    nextColorIsSafe : (curNode: number, G: GraphImmut, color : number[], curColor: number): boolean => {\n        const V = G.getNumberOfNodes();\n        const vertexAdjacency = G.getNodeAdjacency(curNode);\n\n        for (let i = 0; i < vertexAdjacency.length; i++) {\n            if (color[vertexAdjacency[i]] === curColor) {\n                return false\n            }\n        }\n\n        return true;\n\n    }\n\n    \n\n};\n","var map = {\n\t\"./EN_US.ts\": [\n\t\t216,\n\t\t9,\n\t\t872\n\t],\n\t\"./custom.d.ts\": [\n\t\t883,\n\t\t7,\n\t\t883\n\t],\n\t\"./js/GraphAlgorithms.ts\": [\n\t\t446,\n\t\t9,\n\t\t446\n\t],\n\t\"./js/UIInteractions.ts\": [\n\t\t825,\n\t\t9\n\t],\n\t\"./js/app.ts\": [\n\t\t238,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/EdgeImmut.ts\": [\n\t\t268,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/GraphImmut.ts\": [\n\t\t536,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/NodeImmut.ts\": [\n\t\t729,\n\t\t9\n\t],\n\t\"./js/classes/SpanningTree.ts\": [\n\t\t866,\n\t\t9,\n\t\t866\n\t],\n\t\"./js/dataImportExport.ts\": [\n\t\t346,\n\t\t9,\n\t\t346\n\t],\n\t\"./js/graphState.ts\": [\n\t\t669,\n\t\t9\n\t],\n\t\"./js/languages.ts\": [\n\t\t119,\n\t\t9\n\t],\n\t\"./js/main.ts\": [\n\t\t863,\n\t\t9\n\t],\n\t\"./js/settings.ts\": [\n\t\t660,\n\t\t9\n\t],\n\t\"./js/util/genericHelpers.ts\": [\n\t\t485,\n\t\t9\n\t],\n\t\"./js/util/graphHelpers.ts\": [\n\t\t641,\n\t\t9\n\t],\n\t\"./js/util/predefinedGraphs.ts\": [\n\t\t133,\n\t\t9,\n\t\t981\n\t],\n\t\"./js/workers/GraphAlgorithmWorker.ts\": [\n\t\t69,\n\t\t9,\n\t\t69\n\t],\n\t\"./js/workers/pwaServiceWorker.ts\": [\n\t\t304,\n\t\t7,\n\t\t304\n\t],\n\t\"./overloadTypes.d.ts\": [\n\t\t595,\n\t\t7,\n\t\t595\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 529;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \"-\" + {\"69\":\"f5855291187ac96a9b87\",\"304\":\"ccc6e4cf8218ed5136d7\",\"346\":\"e68a61fc3a05bd99b427\",\"446\":\"f4a48e552708b12aaa76\",\"595\":\"ab0534da15976842763e\",\"866\":\"9b7761053fcdd8f59adf\",\"872\":\"917ad835cd56d84efb09\",\"883\":\"c85793bacdb38e138bcf\",\"981\":\"c52b57ebe78b4c7c0c51\"}[chunkId] + \".min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t296: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgraphPlayground\"] = self[\"webpackChunkgraphPlayground\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(238)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","Worker_fn","Worker","possibleColorModes","makeAndPrintShortestPath","title","fn","weighted","myName","languages","current","ShortestPath","UIInteractions","isRunning","printAlreadyRunning","$modal","values","modal","source","sink","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","e","a","data","cleanup","stopLoadingAnimation","p","NoPathFromAToB","toString","pathExists","ShortestPathFromAToB","distance","WithWeightedCost","cost","UsingPath","graph","GraphImmut","nodes","edges","directed","path","forEach","v","i","editEdge","window","main","setData","slice","includes","DijkstraError","DijkstraErrorHTML","BellmanFordError","BellmanFordErrorHTML","send","type","args","convertToGraphImmut","graphState","getGraphData","Go","label","StartNode","validationFunc","nodeLabelIDValidator","EndNode","makeAndPrintGreedyColoring","GraphColoringGreedy","orderingMode","chromaticNumber","colors","order","vertexOrder","console","log","ApproxChromaticNumberIs","historyToPrint","history","settings","getOption","step","length","curNode","nodeToColor","colAdjList","colorsOfNeighbors","neighbor","nb","VertexGetsColor","GraphColoringGreedyTitle","ReColor","applyColors","ColoringMode","optionText","Object","keys","optionValues","initialValue","makeAndPrintkColoringBacktracking","kColoringBacktracking","options","NumberOfColors","NumberOfColorsPositiveError","push","NumberOfSteps","kColor","numberOfSteps","kColorable","bestChrNumber","Math","min","color","kColoringSuccess","kColoringTerminated","totalSteps","kColoringBacktrackingTitle","ReColorInfo","kColoringFail","kColoringCheckedAll","kColoringDocStep1","kColoringDocStep2","Step","makeAndPrintkColoringBruteForce","kColoringBruteForce","kColoringBruteForceTitle","makeAndPrintComponents","stronglyConnected","cc","ConnectedComponents","componentKey","StronglyConnectedComponents","Promise","reject","TaskAlreadyRunning","count","components","NumberOfConnectedComponents","VertexIsInConnectedComponentNumber","JSON","stringify","id","listener","this","worker","postMessage","onmessage","terminate","getAlgorithms","name","GetAllDegrees","directional","applyFunc","getAllDegrees","display","CheckColoring","checkGraphColoring","BFS","Dijkstra","BellmanFord","FordFulkerson","makeAndPrintFFMCMF","KruskalMST","makeAndPrintKruskal","Cyclic","makeAndPrintIsCyclic","TopoSort","makeAndPrintTopologicalSort","Eulerian","makeAndPrintDirectionalEulerian","registerListeners","makeSimpleClickListener","selector","document","querySelector","addEventListener","preventDefault","printHelp","terminateAllWebWorkers","printOptions","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","undo","redo","shuffleNetworkLayout","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","makeImportGraphExercise","setGraphBackground","innerText","File","ImportFile","ImportText","ExportFile","ExportText","LoadGraphs","SetBackground","CalculateAllProperties","NewGraphLayout","GraphOptions","Help","ExampleGraphs","LoadPetersen","LoadKonigsberg","LoadComplete","LoadHypercube","LoadCustom","Algorithms","GraphProperties","Results","IssuesHTML","vals","changeOption","network","setOptions","smooth","G","Options","Save","GraphPhysics","SmoothEdges","FastColorChange","StepByStepInfo","nextIndex","WorkerProxy","prog","getElementById","style","n","ThisTask","TaskAlreadyRunningBody","resolve","degrees","printGAD","VertexHasDegree","GetAllDegreesTitle","from","to","num","confList","printCC","NumberOfConflicts","conflist","NodeIsInConflictWith","CheckColoringTitle","resetgraphColoringGreedy","makeAndPrintgraphColoringWelsh","GraphColoringWelsh","printGC","NumberOfVertices","ChromaticNumberIs","GraphColoringTitle","scc","makeAndPrintEulerian","ignoreDuplicate","cb","FordFulkersonMaxFlowMinCut","MaxFlowFromAToB","maxFlow","UsingCapacities","flowPath","FlowWithCapacity","flow","capacity","trim","SourceNode","SinkNode","KruskalMSTTotalWeight","totalWeight","UsingEdges","mst","EdgeImmut","getFrom","getTo","TopoSortErrorHTML","printGraphAlgorithms","$div","innerHTML","addAlgoToPane","alg","navlink","createElement","classList","add","setAttribute","appendChild","then","ui","Network","loadDefault","s","localStorage","getItem","jsonGraph","parse","weight","extraAttrs","filter","key","reduce","obj","attributes","freeze","parseFloat","getWeight","getAttribute","attribute","getAllAttributes","toPlain","toReturn","newWeight","assign","filterExtraAttr","labels","filterNodeExtraAttr","nodeMap","Error","newNodes","floor","set","map","genericNodesToImmutNodes","numNodes","size","newEdges","edge","genericEdgesToImmutEdges","numEdges","getNode","rich","node","get","getNodeForColor","addNode","editNode","has","getLabel","deleteNode","nodeCount","getID","addEdge","deleteEdge","deleteAll","foundOneEdge","oldWeight","foundFirst","index","isDirected","getAllNodes","toArray","getAllNodesAsImmutableList","getAllEdgesAsImmutableList","getAllEdges","getNumberOfNodes","getNumberOfEdges","getAllOutDegrees","_","getAllInOutDegrees","asWeighted","asUnweighted","asDirected","doubleEdges","asUndirected","addedEdges","asChangedDirectedWeighted","getNodeAdjacency","adj","getFullAdjacency","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","multiEdges","uniques","Set","acc","keep","duplicateEdge","isWeighted","capitalLetters","NodeImmut","getInt","parseInt","setUpToDate","value","listOptions","all","property","GraphState","upToDate","always","indexOf","makeAndPrintProperties","getProperty","updateIfNotUpdated","find","state","graphProperties","recalcLong","vertices","printableProperties","printGraphProperties","properties","k","updateGraph","clearColorFromNodes","clearColorFromEdges","resetColor","saveState","repaint","edgeFrom","edgeTo","x","y","iId","newGraph","checkAdjacency","nodeFrom","nodeTo","nodeIDToLabel","nodeLabelToID","toLowerCase","rID","found","getGraphAsDataSet","d","DataSet","setLocations","locations","clearNodeColors","clearEdgeColors","workerPool","backHistory","forwardHistory","maxHistory","stronglyConnectedComponents","connectedComponents","graphColoringGreedy","colormode","eulerian","cyclic","Languages","setLanguage","EN_US","customColorPallete","self","container","visWeightEdgeEdit","callback","visOptions","inherit","interaction","hover","manipulation","customColors","stringReplacement","generateLabelFromNumber","$popup","on","saveData","first","val","cancelEdit","remove","initialColor","getOwnPropertyNames","background","alert","addEdgeMode","body","weightFromLabel","operation","undefined","coloring","graphKColorable","graphColors","basicColors","addColors","luminosity","recalcProps","graphChanged","rearrangeGraph","g","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","saveStateLocalStorage","getStateForSaving","getElementsByClassName","item","parentElement","Array","isArray","applyState","newState","firstLoad","currentState","oldKey","checkForLocalStorage","setItem","r","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","nodeId","newColor","lastNetworkClickEvent","event","contains","target","deleteSelected","ctrlKey","shiftKey","removeItem","saveSettings","Settings","loadSettings","setAll","physics","arrows","editWithoutDrag","option","defaults","nodePhysics","direction","weights","smoothEdges","fastColorChange","stepByStepInfo","defaultCancelCb","deepCopy","deep","clone","copy","src","copyIsArray","isPlainObject","call","proto","getPrototypeOf","Ctor","hasOwnProperty","constructor","arguments","deepFreeze","o","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","keepOnlyKeys","getFileExtension","filename","split","splice","htmlEncode","string","t","textContent","replace","printout","text","escape","flatten","rotate","max","iterable","b","toTitleCase","str","match","toUpperCase","replacements","replacement","showSimpleModal","showFormModal","makeFormModal","successText","form","footer","f","class","formRow","basicMap","attrname","validFunc","generalValidator","valueMutator","$v","valid","removeClass","next","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","oText","oIndex","selected","$footer","tabindex","role","html","off","last","trigger","successCb","cancelCb","hasErrors","each","tagName","attr","files","hasClass","findVertexDegreesDirectional","adjacencyMatrix","out","in","outV","interpolateNodesFromEdges","prelabel","compareColor","color1","color2","toggleNodeColor","customColorPalleteArray","currentColor","currentIndex","currentColorString","checkColoringByNumber","V","vertexAdjacency","nextColorIsSafe","curColor","webpackAsyncContext","req","__webpack_require__","code","ids","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","result","chunkIds","priority","notFulfilled","fulfilled","j","every","getter","__esModule","mode","ns","create","def","definition","defineProperty","enumerable","chunkId","promises","u","globalThis","Function","prototype","l","url","done","script","needAttach","scripts","getElementsByTagName","charset","timeout","nc","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","Symbol","toStringTag","nmd","paths","children","installedChunks","installedChunkData","promise","error","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}