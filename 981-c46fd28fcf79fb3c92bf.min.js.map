{"version":3,"file":"981-c46fd28fcf79fb3c92bf.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/util/predefinedGraphs.ts"],"sourcesContent":["\"use strict\";\n\nimport gHelp from './graphHelpers';\nimport help from './genericHelpers';\nimport { EdgeImmutPlain } from \"../classes/GraphImmut/EdgeImmut\";\nimport { NodeImmutPlain } from \"../classes/GraphImmut/NodeImmut\";\nimport * as languages from \"../languages\";\n\nexport interface GraphPlain {\n    edges: EdgeImmutPlain[];\n    nodes: NodeImmutPlain[];\n    directed?: boolean;\n    weighted?: boolean\n}\n\nconst petersenEdges = help.deepFreeze([\n    { from: 1, to: 2, weight: 1 },\n    { from: 2, to: 3, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 4, to: 5, weight: 1 },\n    { from: 5, to: 1, weight: 1 },\n\n    { from: 6, to: 8, weight: 1 },\n    { from: 7, to: 9, weight: 1 },\n    { from: 7, to: 10, weight: 1 },\n    { from: 8, to: 10, weight: 1 },\n    { from: 9, to: 6, weight: 1 },\n\n    { from: 1, to: 6, weight: 1 },\n    { from: 2, to: 7, weight: 1 },\n    { from: 3, to: 8, weight: 1 },\n    { from: 4, to: 9, weight: 1 },\n    { from: 5, to: 10, weight: 1 }\n]) as EdgeImmutPlain[];\n\nconst konigsbergEdges = help.deepFreeze([\n    { from: 1, to: 2, weight: 1 },\n    { from: 2, to: 3, weight: 1 },\n    { from: 2, to: 4, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 4, to: 1, weight: 1 },\n    { from: 4, to: 1, weight: 1 },\n]) as EdgeImmutPlain[];\n\n\nconst completeGraph = (V: number): Readonly<GraphPlain> => {\n    const edges = [];\n    const nodes = [];\n\n    for (let i = 0; i < V; i++) {\n        nodes.push({ id: i, label: gHelp.generateLabelFromNumber(i) });\n        for (let j = i + 1; j < V; j++) {\n            edges.push({ from: i, to: j });\n        }\n    }\n\n    // MH: TODO NOT REALLY CLEAN\n    window.settings.changeOption(\"customColors\", true);\n    return help.deepFreeze({ nodes, edges, directed: false, weighted: false } as GraphPlain);\n};\n\n\nconst cycleGraph = (V: number): Readonly<GraphPlain> => {\n    const edges = [];\n    const nodes = [];\n\n    for (let i = 0; i < V; i++) {\n        nodes.push({ id: i, label: gHelp.generateLabelFromNumber(i) });\n        edges.push({ from: i, to: (i+1)%V })\n    }\n\n    // MH: TODO NOT REALLY CLEAN\n    window.settings.changeOption(\"customColors\", true);\n    return help.deepFreeze({ nodes, edges, directed: false, weighted: false } as GraphPlain);\n};\n\nconst wheelGraph = (V: number): Readonly<GraphPlain> => {\n    const edges = [];\n    const nodes = [];\n\n    for (let i = 0; i < V; i++) {\n        nodes.push({ id: i, label: gHelp.generateLabelFromNumber(i) });\n        edges.push({ from: i, to: (i+1)%V });\n    }\n\n    nodes.push({ id: V, label: gHelp.generateLabelFromNumber(V) });\n    for (let i = 0; i < V; i++) {\n        edges.push({ from: i, to: V });\n    }\n\n    // MH: TODO NOT REALLY CLEAN\n    window.settings.changeOption(\"customColors\", true);\n    return help.deepFreeze({ nodes, edges, directed: false, weighted: false } as GraphPlain);\n};\n\nconst hypercubeGraph = (D: number): Readonly<GraphPlain> => {\n    const edges: EdgeImmutPlain[] = [];\n    const nodes: NodeImmutPlain[] = [];\n\n    const numNodes = Math.pow(2, D);\n\n    const pad = (str: string, max: number): string => {\n        return str.length < max ? pad(\"0\" + str, max) : str;\n    };\n\n    const generateDifferByOne = (input: number, numBits: number) => {\n        const inputBits = pad((input).toString(2), numBits).split(\"\").reverse();\n        const allDiffer = [];\n\n        // 1 bit difference from input, increasing order, none less than input\n        for (let b = 0; b < numBits; b++) {\n            if (inputBits[b] === \"0\") {\n                const newNum = inputBits.slice();\n                newNum[b] = \"1\";\n                newNum.reverse();\n                allDiffer.push(parseInt(newNum.join(\"\"), 2));\n            }\n        }\n\n        return allDiffer;\n    };\n\n    for (let i = 0; i < numNodes; i++) {\n        nodes.push({ id: i, label: pad(i.toString(2), D) });\n        generateDifferByOne(i, D).forEach((j) => {\n            edges.push({ from: i, to: j, weight: 1 });\n        });\n    }\n\n    // MH: TODO NOT REALLY CLEAN\n    window.settings.changeOption(\"customColors\", true);\n    return help.deepFreeze({ nodes, edges, directed: false, weighted: false } as GraphPlain);\n\n};\n\nconst newCustomGraph = (V: number, directed = false, weighted = false): Readonly<GraphPlain> => {\n    const nodes = [];\n    for (let i = 0; i < V; i++) {\n        nodes.push({ id: i, label: gHelp.generateLabelFromNumber(i) });\n    }\n\n    // MH: TODO NOT REALLY CLEAN\n    window.settings.changeOption(\"customColors\", true);\n    return help.deepFreeze({nodes, edges: [], directed, weighted} as GraphPlain);\n};\n\nexport default class PredefinedGraphs {\n    public static _complete = completeGraph;\n    public static _custom = newCustomGraph;\n    public static _hypercube = hypercubeGraph;\n    public static _cycle = cycleGraph;\n    // public static _wheel = wheelGraph;\n\n    public static Petersen(): Readonly<GraphPlain> {\n        return help.deepFreeze({\n            edges: petersenEdges,\n            nodes: gHelp.interpolateNodesFromEdges(petersenEdges),\n            directed: false,\n            weighted: false,\n        });\n    }\n\n    public static Konigsberg(): Readonly<GraphPlain> {\n        return help.deepFreeze({\n            edges: konigsbergEdges,\n            nodes: gHelp.interpolateNodesFromEdges(konigsbergEdges),\n            directed: false,\n            weighted: false,\n        });\n    }\n\n    public static Complete(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(completeGraph(vals[0]), false, true, true);\n        },\n            languages.current.ConfigurableCompleteGraph, languages.current.Go,\n            [{\n                type: \"numeric\", initialValue: 5, label: languages.current.NumberOfVerticesLabel, validationFunc: (v) => {\n                    return v >= 0 || languages.current.NumberOfVerticesNonNegativeError;\n                }\n            }]);\n    }\n\n    public static Cycle(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(cycleGraph(vals[0]), false, true, true);\n        },\n            languages.current.ConfigurableCycleGraph, languages.current.Go,\n            [{\n                type: \"numeric\", initialValue: 5, label: languages.current.NumberOfVerticesLabel, validationFunc: (v) => {\n                    return v >= 0 || languages.current.NumberOfVerticesNonNegativeError;\n                }\n            }]);\n    }\n\n    public static Wheel(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(wheelGraph(vals[0]), false, true, true);\n        },\n            languages.current.ConfigurableWheelGraph, languages.current.Go,\n            [{\n                type: \"numeric\", initialValue: 5, label: languages.current.NumberOfVerticesLabel, validationFunc: (v) => {\n                    return v >= 0 || languages.current.NumberOfVerticesNonNegativeError;\n                }\n            }]);\n    }\n\n    public static Hypercube(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(hypercubeGraph(vals[0]), false, true, true);\n        },\n            languages.current.ConfigurableHypercubeGraph, languages.current.Go,\n            [{\n                type: \"numeric\", initialValue: 3, label: languages.current.NumberOfDimensionsLabel, validationFunc: (v) => {\n                    return v >= 0 || languages.current.NumberOfDimensionsNonNegativeError;\n                }\n            }]);\n    }\n\n    public static Custom(): void {\n        help.showFormModal(($modal, vals) => {\n                $modal.modal(\"hide\");\n                window.main.setData(newCustomGraph(vals[0], false, false), false, true, true);\n            },\n            languages.current.ConfigurableGraph, languages.current.Go,\n\n            [\n                {\n                    type: \"numeric\", initialValue: 0, label: languages.current.NumberOfVerticesLabel, validationFunc: (v) => {\n                        return v >= 0 || languages.current.NumberOfVerticesNonNegativeError;\n                    }\n                },\n\n                //{ type: \"checkbox\", initialValue: false, label: \"Directed\" },\n                //{ type: \"checkbox\", initialValue: false, label: \"Weighted\" },\n            ]);\n    }\n}\n"],"names":["petersenEdges","from","to","weight","konigsbergEdges","completeGraph","V","edges","nodes","i","push","id","label","j","window","settings","changeOption","directed","weighted","cycleGraph","hypercubeGraph","D","numNodes","Math","pow","pad","str","max","length","toString","input","numBits","inputBits","split","reverse","allDiffer","b","newNum","slice","parseInt","join","generateDifferByOne","forEach","newCustomGraph","Petersen","Konigsberg","Complete","$modal","vals","modal","main","setData","type","initialValue","validationFunc","v","Cycle","Wheel","wheelGraph","Hypercube","Custom","_complete","_custom","_hypercube","_cycle"],"sourceRoot":""}