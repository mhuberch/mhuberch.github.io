{"version":3,"file":"src_js_dataImportExport_ts-0be00978f2d6c73b4550.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/dataImportExport.ts"],"sourcesContent":["\"use strict\";\n\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport GraphState from \"./graphState\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\nconst exportedTextSelector = \"exportedText\";\n\nconst self = {\n    importByString: (string: string, format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            try {\n                const n = JSON.parse(string);\n                if (\"nodes\" in n && \"edges\" in n) {\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\n                    // locations\n                    window.main.setData(n, false, true, false);\n                }\n                else {\n                    help.showSimpleModal(languages.current.DataImportError,\n                        `<p>${languages.current.DataImportErrorText}</p>`);\n                }\n            }\n            catch (err) {\n                help.showSimpleModal(languages.current.JsonParseError, `<p>${languages.current.JsonParseErrorText}</p><pre>${err}</pre>`);\n            }\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            const lines = string.split(/\\r?\\n/);\n            let graph: GraphImmut | null = null;\n            let error = false;\n            lines.forEach((l) => {\n                const vals = l.split(/\\s+/);\n                if (vals[0].toLowerCase() === \"p\") {\n                    if (vals[1].toLowerCase() !== \"edge\") {\n                        help.showSimpleModal(languages.current.DimacsParseError,\n                            `<p>${help.htmlEncode(languages.current.DimacsParseErrorText)}</p>`);\n                        error = true;\n                        return;\n                    }\n                    graph = new GraphImmut(parseInt(vals[2]));\n                }\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\n                }\n            });\n\n            if (graph === null && !error) {\n                help.showSimpleModal(languages.current.DimacsParseError, `<p>${languages.current.DimacsParseErrorNoProgram}</p>`);\n                error = true;\n            }\n\n            if (!error) {\n                const d: GraphPlain = GraphState.getGraphData(graph!);\n                d.nodes.forEach((v) => {\n                    v.label = v.id.toString();\n                });\n                window.main.setData(d, false, true, true);\n            }\n        }\n        else {\n            help.showSimpleModal(languages.current.UnrecognizedInputError, `<p>${languages.current.UnrecognizedInputError}.</p>`);\n        }\n    },\n\n    makeImportTextModal: (): void => {\n        help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n            self.importByString(values[0], values[1]);\n        }, languages.current.ImportGraphFromText, languages.current.Import,\n            [{ type: \"textarea\", label: languages.current.ImportText, extraAttrs: { style: \"height: 20vh; min-height:400px;\" } },\n            { type: \"select\", label: languages.current.Format, optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"] }\n            ]);\n    },\n\n    makeImportFileModal: (): void => {\n        help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const files = values[0];\n            if (files.length === 1) {\n                const file = files[0];\n                const reader = new FileReader();\n                reader.onload = function (event: any) {\n                    self.importByString(event.target.result, help.getFileExtension(file.name));\n                };\n\n                reader.readAsText(file);\n            }\n        }, languages.current.ImportGraphFromFile, languages.current.Import,\n            [{\n                type: \"file\", label: languages.current.UploadFile, validationFunc: (val, $files) => {\n                    const files = ($files.get(0) as any).files;\n                    if (files.length >= 1) {\n                        return true;\n                    }\n                    return languages.current.MustChooseFileError;\n                }\n            }]);\n    },\n\n    makeExportFileModal: (): void => {\n        help.showFormModal(null, languages.current.ExportGraphToFile, null,\n            [{\n                type: \"button\",\n                initialValue: languages.current.ExportToJson,\n                onclick: () => {\n                    self.exportToFile(\"json\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary m-1\"\n\n                },\n                clickDismiss: true\n            },\n            {\n                type: \"button\",\n                initialValue: languages.current.ExportToDimacs,\n                onclick: () => {\n                    self.exportToFile(\"dimacs\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary\"\n                },\n                clickDismiss: true\n            }\n            ], null, false);\n    },\n\n    makeExportTextModal: (): void => {\n        help.showFormModal(null, languages.current.ExportGraphToText, null,\n            [{\n                type: \"button\",\n                initialValue: languages.current.ExportToJson,\n                onclick: () => {\n                    self.exportToText(\"json\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary m-1\",\n                },\n                clickDismiss: false\n            },\n            {\n                type: \"button\",\n                initialValue: languages.current.ExportToDimacs,\n                onclick: () => {\n                    self.exportToText(\"dimacs\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary\",\n                },\n                clickDismiss: false\n            },\n            {\n                type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\n                    style: \"height: 20vh;\" +\n                        \" min-height:400px; white-space:pre; margin-top: 1rem;\"\n                },\n                onclick: () => {\n                    (document.getElementById(exportedTextSelector) as HTMLTextAreaElement).select();\n                    document.execCommand(\"copy\");\n                }, id: \"exportedText\"\n            }\n            ], ($modal) => {\n                $modal.modal(\"hide\");\n            }, false);\n    },\n\n    exportToFile: (format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\n        }\n    },\n\n    exportToText: (format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            document.getElementById(exportedTextSelector)!.innerHTML = JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2);\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            document.getElementById(exportedTextSelector)!.innerHTML = self.getDataAsDIMACS();\n        }\n    },\n\n    getDataAsJSON: (): string => {\n        const d = GraphState.getGraphData(GraphState.graph);\n        const nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\n        const edgeKeys = [\"from\", \"to\", \"weight\", \"color\"];\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys) as NodeImmutPlain[];\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys) as EdgeImmutPlain[];\n\n        return JSON.stringify(d);\n    },\n\n    getDataAsDIMACS: (): string => {\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\n        const g = GraphState.getGraphData();\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground \" +\n            \"-- https://mikedombo.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\n\n        let adj = GraphState.graph.getFullAdjacency();\n        adj = adj.filter((v: number[]) => {\n            return v.length !== 0;\n        });\n\n        const nodes: number[] = [];\n        adj.forEach((v: number[], i: number) => {\n            if (nodes.indexOf(i + 1) === -1) {\n                nodes.push(i + 1);\n            }\n            v.forEach((n: number) => {\n                if (nodes.indexOf(n + 1) === -1) {\n                    nodes.push(n + 1);\n                }\n            });\n        });\n\n        let edgeCount = 0;\n        let edgeText = \"\";\n        g.edges.forEach((v: EdgeImmutPlain) => {\n            edgeText += `e ${v.from + 1} ${v.to + 1}\\n`;\n            edgeCount++;\n        });\n        edgeText = edgeText.trim();\n\n        text += `p edge ${nodes.length} ${edgeCount}\\n`;\n        return text + edgeText;\n    },\n\n    downloadFile: (filename: string, text: string): void => {\n        const blob = new Blob([text], { type: 'text/plain' });\n        // @ts-ignore\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveBlob(blob, filename);\n        }\n        else {\n            const a = window.document.createElement('a');\n            a.href = window.URL.createObjectURL(blob);\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(blob as any);\n        }\n    },\n};\n\nexport default self;\n"],"names":[],"sourceRoot":""}