{"version":3,"file":"GraphAlgorithmWorker-ebb27597f42ad67cdd3d.min.worker.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uGAAiD;AACjD,MAAM,GAAG,GAAW,IAAW,CAAC;AAEhC,IAAI,IAAY,CAAC;AAEjB,SAAS,KAAK,CAAC,EAAU;IACrB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AAC3D,CAAC;AAED,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAM,CAAC,EAAC,EAAE;IACtC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;QACtB,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;QACjB,OAAO;KACV;IACD,MAAM,IAAI,GAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IAChC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;QACxB,MAAM,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7B,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;QAC5C,OAAO;KACV;IACD,IAAI,qBAAqB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE;QAC/D,IAAI,CAAC,IAAI,CAAC,yBAAe,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAChE,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAG,yBAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;KAChG;SAAM;QACH,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAG,yBAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;KAChG;AACL,CAAC,EAAC,CAAC;;;;;;;UC1BH;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://graphPlayground/./src/js/workers/GraphAlgorithmWorker.ts","webpack://graphPlayground/webpack/bootstrap","webpack://graphPlayground/webpack/before-startup","webpack://graphPlayground/webpack/startup","webpack://graphPlayground/webpack/after-startup"],"sourcesContent":["import GraphAlgorithms from \"../GraphAlgorithms\";\nconst ctx: Worker = self as any;\n\nlet myID: number;\n\nfunction sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nctx.addEventListener(\"message\", async e => {\n    if (e.data.type === \"id\") {\n        myID = e.data.id;\n        return;\n    }\n    const args: any[] = e.data.args;\n    if (e.data.type === \"test\") {\n        await sleep(e.data.waitTime);\n        ctx.postMessage({ id: myID, data: \"DONE\" });\n        return;\n    }\n    if (\"convertToGraphImmut\" in e.data && e.data.convertToGraphImmut) {\n        args.push(GraphAlgorithms.graphPlainToGraphImmut(e.data.graph));\n        ctx.postMessage({ id: myID, data: (GraphAlgorithms as any)[e.data.type].apply(null, args) });\n    } else {\n        ctx.postMessage({ id: myID, data: (GraphAlgorithms as any)[e.data.type].apply(null, args) });\n    }\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./node_modules/ts-loader/index.js!./src/js/workers/GraphAlgorithmWorker.ts\");\n",""],"names":[],"sourceRoot":""}